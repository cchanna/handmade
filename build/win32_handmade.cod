; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z	; XInputGetStateStub
PUBLIC	?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
CONST	SEGMENT
$SG87666 DB	'xinput1_4.dll', 00H
	ORG $+2
$SG87668 DB	'xinput9_1_0.dll', 00H
$SG87670 DB	'xinput1_3.dll', 00H
	ORG $+2
$SG87673 DB	'XInputGetState', 00H
	ORG $+1
$SG87675 DB	'XInputSetState', 00H
	ORG $+1
$SG87697 DB	'dsound.dll', 00H
	ORG $+1
$SG87785 DB	0aH, 00H
	ORG $+2
$SG87699 DB	'DirectSoundCreate', 00H
	ORG $+2
$SG87780 DB	'Space ', 00H
	ORG $+5
$SG87708 DB	'Primary buffer format was set.', 0aH, 00H
$SG87710 DB	'Secondary buffer created successfuly', 0aH, 00H
	ORG $+2
$SG87753 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG87782 DB	'IsDown ', 00H
$SG87784 DB	'WasDown ', 00H
	ORG $+7
$SG87788 DB	'WM_PAINT', 0aH, 00H
	ORG $+6
$SG87916 DB	'HandmadeHeroWindowClass', 00H
$SG87919 DB	'Handmade Hero', 00H
CONST	ENDS
_DATA	SEGMENT
?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA DQ FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetState_
?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA DQ FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetState_
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@412e848000000000
PUBLIC	__real@43000000
PUBLIC	__real@43f0000000000000
PUBLIC	__real@46fffe00
PUBLIC	__real@47000000
EXTRN	sinf:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
_BSS	SEGMENT
?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA DD 01H DUP (?) ; `GameOutputSound'::`2'::tSine
_BSS	ENDS
;	COMDAT ?XOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
_BSS	SEGMENT
?XOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA DD 01H DUP (?) ; `GameUpdateAndRender'::`2'::XOffset
_BSS	ENDS
;	COMDAT ?YOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
_BSS	SEGMENT
?YOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA DD 01H DUP (?) ; `GameUpdateAndRender'::`2'::YOffset
_BSS	ENDS
_BSS	SEGMENT
?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
	ALIGN	8

?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA DQ 01H DUP (?) ; GlobalSecondaryBuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z DD imagerel ?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z
	DD	imagerel ?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z+194
	DD	imagerel $unwind$?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z
$pdata$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z DD imagerel ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z
	DD	imagerel ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z+249
	DD	imagerel $unwind$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z
$pdata$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z DD imagerel ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z+301
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z
$pdata$WinMain DD imagerel $LN34
	DD	imagerel $LN34+2705
	DD	imagerel $unwind$WinMain
$pdata$?Wind32LoadXInput@@YAXXZ DD imagerel ?Wind32LoadXInput@@YAXXZ
	DD	imagerel ?Wind32LoadXInput@@YAXXZ+185
	DD	imagerel $unwind$?Wind32LoadXInput@@YAXXZ
$pdata$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
	DD	imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z+554
	DD	imagerel $unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
	DD	imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+269
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z+159
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z+819
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z DD imagerel ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z
	DD	imagerel ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z+271
	DD	imagerel $unwind$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z
$pdata$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z DD imagerel ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z
	DD	imagerel ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z+539
	DD	imagerel $unwind$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z
$pdata$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z DD imagerel ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z
	DD	imagerel ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z+120
	DD	imagerel $unwind$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z
pdata	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+19
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT ?ToneHz@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
_DATA	SEGMENT
?ToneHz@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA DD 0100H ; `GameUpdateAndRender'::`2'::ToneHz
_DATA	ENDS
xdata	SEGMENT
$unwind$?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z DD 011301H
	DD	06213H
$unwind$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z DD 010d01H
	DD	0820dH
$unwind$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$WinMain DD 032e19H
	DD	0a0011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	04f0H
$unwind$?Wind32LoadXInput@@YAXXZ DD 010401H
	DD	06204H
$unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD 032819H
	DD	0180116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD 011801H
	DD	0e218H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01b011aH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z DD 010901H
	DD	0e209H
$unwind$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z DD 021a01H
	DD	011011aH
$unwind$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z DD 011701H
	DD	02217H
xdata	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv67 = 0
tv72 = 4
XInputButtonState$ = 32
OldState$ = 40
NewState$ = 48
ButtonBit$ = 56
?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z PROC ; Win32ProcessXInputDigitalButton

; 414  : Win32ProcessXInputDigitalButton(DWORD XInputButtonState, game_button_state *OldState, game_button_state *NewState, DWORD ButtonBit) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 18	 sub	 rsp, 24

; 415  :     NewState->EndedDown = (XInputButtonState & ButtonBit) == ButtonBit;

  00017	8b 44 24 38	 mov	 eax, DWORD PTR ButtonBit$[rsp]
  0001b	8b 4c 24 20	 mov	 ecx, DWORD PTR XInputButtonState$[rsp]
  0001f	23 c8		 and	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	3b 44 24 38	 cmp	 eax, DWORD PTR ButtonBit$[rsp]
  00027	75 09		 jne	 SHORT $LN3@Win32Proce
  00029	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  00030	eb 07		 jmp	 SHORT $LN4@Win32Proce
$LN3@Win32Proce:
  00032	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@Win32Proce:
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR NewState$[rsp]
  0003e	8b 0c 24	 mov	 ecx, DWORD PTR tv67[rsp]
  00041	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 416  :     NewState->HalfTransitionCount = (OldState->EndedDown != NewState->EndedDown) ? 1 : 0;  

  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR OldState$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR NewState$[rsp]
  0004e	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00051	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  00054	74 0a		 je	 SHORT $LN5@Win32Proce
  00056	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN6@Win32Proce
$LN5@Win32Proce:
  00060	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN6@Win32Proce:
  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR NewState$[rsp]
  0006d	8b 4c 24 04	 mov	 ecx, DWORD PTR tv72[rsp]
  00071	89 08		 mov	 DWORD PTR [rax], ecx

; 417  : }

  00073	48 83 c4 18	 add	 rsp, 24
  00077	c3		 ret	 0
?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ENDP ; Win32ProcessXInputDigitalButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DestSample$1 = 64
SourceSample$2 = 72
SampleIndex$3 = 80
SampleIndex$4 = 84
Region2Size$ = 88
Region1Size$ = 92
Region1SampleCount$5 = 96
Region2SampleCount$6 = 100
Region2$ = 104
Region1$ = 112
SoundOutput$ = 144
ByteToLock$ = 152
BytesToWrite$ = 160
SourceBuffer$ = 168
?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z PROC ; win32FillSoundBuffer

; 377  : win32FillSoundBuffer(win32_sound_output *SoundOutput, DWORD ByteToLock, DWORD BytesToWrite, game_sound_output_buffer *SourceBuffer) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 378  :     VOID *Region1;
; 379  :     DWORD Region1Size;
; 380  :     VOID *Region2;
; 381  :     DWORD Region2Size;
; 382  :     if(SUCCEEDED(GlobalSecondaryBuffer->Lock(

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00024	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0002c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Region2Size$[rsp]
  00031	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00036	48 8d 4c 24 68	 lea	 rcx, QWORD PTR Region2$[rsp]
  0003b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00040	48 8d 4c 24 5c	 lea	 rcx, QWORD PTR Region1Size$[rsp]
  00045	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004a	4c 8d 4c 24 70	 lea	 r9, QWORD PTR Region1$[rsp]
  0004f	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR BytesToWrite$[rsp]
  00057	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR ByteToLock$[rsp]
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00065	ff 50 58	 call	 QWORD PTR [rax+88]
  00068	85 c0		 test	 eax, eax
  0006a	0f 8c a3 01 00
	00		 jl	 $LN8@win32FillS

; 383  :         ByteToLock, BytesToWrite,
; 384  :         &Region1, &Region1Size,
; 385  :         &Region2, &Region2Size,
; 386  :         0
; 387  :     ))) {
; 388  :         //TODO Assert that Region1Size/Region2Size is valid
; 389  :         //TODO Collapse these to loops
; 390  :         DWORD Region1SampleCount = Region1Size/SoundOutput->BytesPerSample;

  00070	33 d2		 xor	 edx, edx
  00072	8b 44 24 5c	 mov	 eax, DWORD PTR Region1Size$[rsp]
  00076	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  0007e	f7 71 08	 div	 DWORD PTR [rcx+8]
  00081	89 44 24 60	 mov	 DWORD PTR Region1SampleCount$5[rsp], eax

; 391  :         int16 *DestSample = (int16 *)Region1;

  00085	48 8b 44 24 70	 mov	 rax, QWORD PTR Region1$[rsp]
  0008a	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax

; 392  :         int16 *SourceSample = SourceBuffer->Samples;

  0008f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR SourceBuffer$[rsp]
  00097	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0009b	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 393  :         for(DWORD SampleIndex = 0; SampleIndex < Region1SampleCount; ++SampleIndex) {

  000a0	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR SampleIndex$4[rsp], 0
  000a8	eb 0a		 jmp	 SHORT $LN4@win32FillS
$LN2@win32FillS:
  000aa	8b 44 24 54	 mov	 eax, DWORD PTR SampleIndex$4[rsp]
  000ae	ff c0		 inc	 eax
  000b0	89 44 24 54	 mov	 DWORD PTR SampleIndex$4[rsp], eax
$LN4@win32FillS:
  000b4	8b 44 24 60	 mov	 eax, DWORD PTR Region1SampleCount$5[rsp]
  000b8	39 44 24 54	 cmp	 DWORD PTR SampleIndex$4[rsp], eax
  000bc	73 75		 jae	 SHORT $LN3@win32FillS

; 394  :             *DestSample++ = *SourceSample++;

  000be	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  000c8	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  000cb	66 89 08	 mov	 WORD PTR [rax], cx
  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000d3	48 83 c0 02	 add	 rax, 2
  000d7	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  000dc	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  000e1	48 83 c0 02	 add	 rax, 2
  000e5	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 395  :             *DestSample++ = *SourceSample++;

  000ea	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000ef	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  000f4	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  000f7	66 89 08	 mov	 WORD PTR [rax], cx
  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000ff	48 83 c0 02	 add	 rax, 2
  00103	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  00108	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  0010d	48 83 c0 02	 add	 rax, 2
  00111	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 396  :             ++SoundOutput->RunningSampleIndex;

  00116	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR SoundOutput$[rsp]
  0011e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00121	ff c0		 inc	 eax
  00123	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  0012b	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 397  :         }

  0012e	e9 77 ff ff ff	 jmp	 $LN2@win32FillS
$LN3@win32FillS:

; 398  : 
; 399  :         DWORD Region2SampleCount = Region2Size/SoundOutput->BytesPerSample;

  00133	33 d2		 xor	 edx, edx
  00135	8b 44 24 58	 mov	 eax, DWORD PTR Region2Size$[rsp]
  00139	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  00141	f7 71 08	 div	 DWORD PTR [rcx+8]
  00144	89 44 24 64	 mov	 DWORD PTR Region2SampleCount$6[rsp], eax

; 400  :         DestSample = (int16 *)Region2;

  00148	48 8b 44 24 68	 mov	 rax, QWORD PTR Region2$[rsp]
  0014d	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax

; 401  :         for(DWORD SampleIndex = 0; SampleIndex < Region2SampleCount; ++SampleIndex) {

  00152	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR SampleIndex$3[rsp], 0
  0015a	eb 0a		 jmp	 SHORT $LN7@win32FillS
$LN5@win32FillS:
  0015c	8b 44 24 50	 mov	 eax, DWORD PTR SampleIndex$3[rsp]
  00160	ff c0		 inc	 eax
  00162	89 44 24 50	 mov	 DWORD PTR SampleIndex$3[rsp], eax
$LN7@win32FillS:
  00166	8b 44 24 64	 mov	 eax, DWORD PTR Region2SampleCount$6[rsp]
  0016a	39 44 24 50	 cmp	 DWORD PTR SampleIndex$3[rsp], eax
  0016e	73 75		 jae	 SHORT $LN6@win32FillS

; 402  :             *DestSample++ = *SourceSample++;

  00170	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  00175	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  0017a	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  0017d	66 89 08	 mov	 WORD PTR [rax], cx
  00180	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  00185	48 83 c0 02	 add	 rax, 2
  00189	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  0018e	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  00193	48 83 c0 02	 add	 rax, 2
  00197	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 403  :             *DestSample++ = *SourceSample++;

  0019c	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  001a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  001a6	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  001a9	66 89 08	 mov	 WORD PTR [rax], cx
  001ac	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  001b1	48 83 c0 02	 add	 rax, 2
  001b5	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  001bf	48 83 c0 02	 add	 rax, 2
  001c3	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 404  :             ++SoundOutput->RunningSampleIndex;

  001c8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR SoundOutput$[rsp]
  001d0	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001d3	ff c0		 inc	 eax
  001d5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  001dd	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 405  :         }

  001e0	e9 77 ff ff ff	 jmp	 $LN5@win32FillS
$LN6@win32FillS:

; 406  : 
; 407  :         GlobalSecondaryBuffer->Unlock(Region1, Region1Size, Region2, Region2Size);

  001e5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001ec	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ef	8b 4c 24 58	 mov	 ecx, DWORD PTR Region2Size$[rsp]
  001f3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001f7	4c 8b 4c 24 68	 mov	 r9, QWORD PTR Region2$[rsp]
  001fc	44 8b 44 24 5c	 mov	 r8d, DWORD PTR Region1Size$[rsp]
  00201	48 8b 54 24 70	 mov	 rdx, QWORD PTR Region1$[rsp]
  00206	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0020d	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
$LN8@win32FillS:

; 408  :     }
; 409  : }

  00213	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0021a	c3		 ret	 0
?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z ENDP ; win32FillSoundBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
ByteIndex$1 = 64
ByteIndex$2 = 68
Region2Size$ = 72
Region1Size$ = 76
DestSample$3 = 80
Region2$ = 88
Region1$ = 96
SoundOutput$ = 128
?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z PROC	; win32ClearBuffer

; 350  : win32ClearBuffer(win32_sound_output *SoundOutput) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 351  :     VOID *Region1;
; 352  :     DWORD Region1Size;
; 353  :     VOID *Region2;
; 354  :     DWORD Region2Size;
; 355  :     if(SUCCEEDED(GlobalSecondaryBuffer->Lock(

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00010	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00013	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0001b	48 8d 4c 24 48	 lea	 rcx, QWORD PTR Region2Size$[rsp]
  00020	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00025	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Region2$[rsp]
  0002a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002f	48 8d 4c 24 4c	 lea	 rcx, QWORD PTR Region1Size$[rsp]
  00034	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00039	4c 8d 4c 24 60	 lea	 r9, QWORD PTR Region1$[rsp]
  0003e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  00046	44 8b 41 0c	 mov	 r8d, DWORD PTR [rcx+12]
  0004a	33 d2		 xor	 edx, edx
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00053	ff 50 58	 call	 QWORD PTR [rax+88]
  00056	85 c0		 test	 eax, eax
  00058	0f 8c ac 00 00
	00		 jl	 $LN8@win32Clear

; 356  :         0, SoundOutput->SecondaryBufferSize,
; 357  :         &Region1, &Region1Size,
; 358  :         &Region2, &Region2Size,
; 359  :         0
; 360  :     ))) {
; 361  :         // TODO Assert that Region1Size/Region2Sizse is valid
; 362  :         uint8 *DestSample = (uint8 *)Region1;

  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR Region1$[rsp]
  00063	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 363  :         for(DWORD ByteIndex = 0; ByteIndex < Region1Size; ++ByteIndex) {

  00068	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR ByteIndex$1[rsp], 0
  00070	eb 0a		 jmp	 SHORT $LN4@win32Clear
$LN2@win32Clear:
  00072	8b 44 24 40	 mov	 eax, DWORD PTR ByteIndex$1[rsp]
  00076	ff c0		 inc	 eax
  00078	89 44 24 40	 mov	 DWORD PTR ByteIndex$1[rsp], eax
$LN4@win32Clear:
  0007c	8b 44 24 4c	 mov	 eax, DWORD PTR Region1Size$[rsp]
  00080	39 44 24 40	 cmp	 DWORD PTR ByteIndex$1[rsp], eax
  00084	73 17		 jae	 SHORT $LN3@win32Clear

; 364  :             *DestSample++ = 0;

  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  0008b	c6 00 00	 mov	 BYTE PTR [rax], 0
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  00093	48 ff c0	 inc	 rax
  00096	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 365  :         }

  0009b	eb d5		 jmp	 SHORT $LN2@win32Clear
$LN3@win32Clear:

; 366  : 
; 367  :         DestSample = (uint8 *)Region2;

  0009d	48 8b 44 24 58	 mov	 rax, QWORD PTR Region2$[rsp]
  000a2	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 368  :         for(DWORD ByteIndex = 0; ByteIndex < Region2Size; ++ByteIndex) {

  000a7	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ByteIndex$2[rsp], 0
  000af	eb 0a		 jmp	 SHORT $LN7@win32Clear
$LN5@win32Clear:
  000b1	8b 44 24 44	 mov	 eax, DWORD PTR ByteIndex$2[rsp]
  000b5	ff c0		 inc	 eax
  000b7	89 44 24 44	 mov	 DWORD PTR ByteIndex$2[rsp], eax
$LN7@win32Clear:
  000bb	8b 44 24 48	 mov	 eax, DWORD PTR Region2Size$[rsp]
  000bf	39 44 24 44	 cmp	 DWORD PTR ByteIndex$2[rsp], eax
  000c3	73 17		 jae	 SHORT $LN6@win32Clear

; 369  :             *DestSample++ = 0;

  000c5	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  000ca	c6 00 00	 mov	 BYTE PTR [rax], 0
  000cd	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  000d2	48 ff c0	 inc	 rax
  000d5	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 370  :         }

  000da	eb d5		 jmp	 SHORT $LN5@win32Clear
$LN6@win32Clear:

; 371  : 
; 372  :         GlobalSecondaryBuffer->Unlock(Region1, Region1Size, Region2, Region2Size);

  000dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	8b 4c 24 48	 mov	 ecx, DWORD PTR Region2Size$[rsp]
  000ea	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ee	4c 8b 4c 24 58	 mov	 r9, QWORD PTR Region2$[rsp]
  000f3	44 8b 44 24 4c	 mov	 r8d, DWORD PTR Region1Size$[rsp]
  000f8	48 8b 54 24 60	 mov	 rdx, QWORD PTR Region1$[rsp]
  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00104	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
$LN8@win32Clear:

; 373  :     }
; 374  : }

  0010a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0010e	c3		 ret	 0
?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z ENDP	; win32ClearBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
VKCode$1 = 32
WasDown$2 = 36
IsDown$3 = 37
tv64 = 40
tv72 = 44
tv68 = 48
Result$ = 56
Dimension$4 = 64
Y$5 = 72
Width$6 = 76
$T7 = 80
X$8 = 88
DeviceContext$9 = 96
Height$10 = 104
Paint$11 = 112
__$ArrayPad$ = 192
Window$ = 224
Message$ = 232
WParam$ = 240
LParam$ = 248
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 253  : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 254  :     LRESULT Result = 0;

  0002c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 255  : 
; 256  :     switch(Message)

  00035	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 28 10	 cmp	 DWORD PTR tv64[rsp], 16
  00045	77 25		 ja	 SHORT $LN43@Win32MainW
  00047	83 7c 24 28 10	 cmp	 DWORD PTR tv64[rsp], 16
  0004c	74 5f		 je	 SHORT $LN5@Win32MainW
  0004e	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  00053	74 76		 je	 SHORT $LN7@Win32MainW
  00055	83 7c 24 28 05	 cmp	 DWORD PTR tv64[rsp], 5
  0005a	74 4c		 je	 SHORT $LN4@Win32MainW
  0005c	83 7c 24 28 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00061	0f 84 d8 01 00
	00		 je	 $LN36@Win32MainW
  00067	e9 80 02 00 00	 jmp	 $LN37@Win32MainW
$LN43@Win32MainW:
  0006c	83 7c 24 28 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00071	74 46		 je	 SHORT $LN6@Win32MainW
  00073	81 7c 24 28 ff
	00 00 00	 cmp	 DWORD PTR tv64[rsp], 255 ; 000000ffH
  0007b	0f 86 6b 02 00
	00		 jbe	 $LN37@Win32MainW
  00081	81 7c 24 28 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  00089	76 4c		 jbe	 SHORT $LN8@Win32MainW
  0008b	81 7c 24 28 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  00093	0f 86 53 02 00
	00		 jbe	 $LN37@Win32MainW
  00099	81 7c 24 28 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  000a1	76 34		 jbe	 SHORT $LN8@Win32MainW
  000a3	e9 44 02 00 00	 jmp	 $LN37@Win32MainW
$LN4@Win32MainW:

; 257  :     {
; 258  :         case WM_SIZE: {
; 259  :         } break;

  000a8	e9 69 02 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 260  : 
; 261  :         case WM_CLOSE: {
; 262  :             // TODO Handle this with a message to the user?
; 263  :             GlobalRunning = false;

  000ad	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 264  :         } break;

  000b4	e9 5d 02 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 265  : 
; 266  :         case WM_ACTIVATEAPP: {
; 267  :             OutputDebugStringA("WM_ACTIVATEAPP\n");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87753
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 268  :         } break;

  000c6	e9 4b 02 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 269  : 
; 270  :         case WM_DESTROY: {
; 271  :             // TODO Handle this as an error - recreate window?
; 272  :             GlobalRunning = false;

  000cb	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 273  :         } break;

  000d2	e9 3f 02 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 274  : 
; 275  :         case WM_SYSKEYDOWN: 
; 276  :         case WM_SYSKEYUP:
; 277  :         case WM_KEYDOWN:
; 278  :         case WM_KEYUP: {
; 279  :             uint32 VKCode = WParam;

  000d7	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR WParam$[rsp]
  000de	89 44 24 20	 mov	 DWORD PTR VKCode$1[rsp], eax

; 280  :             bool WasDown = ((LParam & (1 << 30)) != 0);

  000e2	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  000ea	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  000f0	48 85 c0	 test	 rax, rax
  000f3	74 0a		 je	 SHORT $LN39@Win32MainW
  000f5	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  000fd	eb 08		 jmp	 SHORT $LN40@Win32MainW
$LN39@Win32MainW:
  000ff	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN40@Win32MainW:
  00107	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv68[rsp]
  0010c	88 44 24 24	 mov	 BYTE PTR WasDown$2[rsp], al

; 281  :             bool IsDown = ((LParam & (1 << 31)) == 0);

  00110	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00118	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  0011e	48 85 c0	 test	 rax, rax
  00121	75 0a		 jne	 SHORT $LN41@Win32MainW
  00123	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0012b	eb 08		 jmp	 SHORT $LN42@Win32MainW
$LN41@Win32MainW:
  0012d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN42@Win32MainW:
  00135	0f b6 44 24 2c	 movzx	 eax, BYTE PTR tv72[rsp]
  0013a	88 44 24 25	 mov	 BYTE PTR IsDown$3[rsp], al

; 282  :             if(WasDown != IsDown) {

  0013e	0f b6 44 24 24	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  00143	0f b6 4c 24 25	 movzx	 ecx, BYTE PTR IsDown$3[rsp]
  00148	3b c1		 cmp	 eax, ecx
  0014a	0f 84 c9 00 00
	00		 je	 $LN9@Win32MainW

; 283  :                 if(VKCode == 'W') {

  00150	83 7c 24 20 57	 cmp	 DWORD PTR VKCode$1[rsp], 87 ; 00000057H
  00155	75 05		 jne	 SHORT $LN10@Win32MainW
  00157	e9 bd 00 00 00	 jmp	 $LN11@Win32MainW
$LN10@Win32MainW:

; 284  :                 }
; 285  :                 else if(VKCode == 'A') {

  0015c	83 7c 24 20 41	 cmp	 DWORD PTR VKCode$1[rsp], 65 ; 00000041H
  00161	75 05		 jne	 SHORT $LN12@Win32MainW
  00163	e9 b1 00 00 00	 jmp	 $LN13@Win32MainW
$LN12@Win32MainW:

; 286  :                 }
; 287  :                 else if(VKCode == 'S') {

  00168	83 7c 24 20 53	 cmp	 DWORD PTR VKCode$1[rsp], 83 ; 00000053H
  0016d	75 05		 jne	 SHORT $LN14@Win32MainW
  0016f	e9 a5 00 00 00	 jmp	 $LN15@Win32MainW
$LN14@Win32MainW:

; 288  :                 }
; 289  :                 else if(VKCode == 'D') {

  00174	83 7c 24 20 44	 cmp	 DWORD PTR VKCode$1[rsp], 68 ; 00000044H
  00179	75 05		 jne	 SHORT $LN16@Win32MainW
  0017b	e9 99 00 00 00	 jmp	 $LN17@Win32MainW
$LN16@Win32MainW:

; 290  :                 }
; 291  :                 else if(VKCode == 'Q') {

  00180	83 7c 24 20 51	 cmp	 DWORD PTR VKCode$1[rsp], 81 ; 00000051H
  00185	75 05		 jne	 SHORT $LN18@Win32MainW
  00187	e9 8d 00 00 00	 jmp	 $LN19@Win32MainW
$LN18@Win32MainW:

; 292  :                 }
; 293  :                 else if(VKCode == 'E') {

  0018c	83 7c 24 20 45	 cmp	 DWORD PTR VKCode$1[rsp], 69 ; 00000045H
  00191	75 05		 jne	 SHORT $LN20@Win32MainW
  00193	e9 81 00 00 00	 jmp	 $LN21@Win32MainW
$LN20@Win32MainW:

; 294  :                 }
; 295  :                 else if(VKCode == VK_UP) {

  00198	83 7c 24 20 26	 cmp	 DWORD PTR VKCode$1[rsp], 38 ; 00000026H
  0019d	75 02		 jne	 SHORT $LN22@Win32MainW
  0019f	eb 78		 jmp	 SHORT $LN23@Win32MainW
$LN22@Win32MainW:

; 296  :                 }
; 297  :                 else if(VKCode == VK_DOWN) {

  001a1	83 7c 24 20 28	 cmp	 DWORD PTR VKCode$1[rsp], 40 ; 00000028H
  001a6	75 02		 jne	 SHORT $LN24@Win32MainW
  001a8	eb 6f		 jmp	 SHORT $LN25@Win32MainW
$LN24@Win32MainW:

; 298  :                 }
; 299  :                 else if(VKCode == VK_LEFT) {

  001aa	83 7c 24 20 25	 cmp	 DWORD PTR VKCode$1[rsp], 37 ; 00000025H
  001af	75 02		 jne	 SHORT $LN26@Win32MainW
  001b1	eb 66		 jmp	 SHORT $LN27@Win32MainW
$LN26@Win32MainW:

; 300  :                 }
; 301  :                 else if(VKCode == VK_RIGHT) {

  001b3	83 7c 24 20 27	 cmp	 DWORD PTR VKCode$1[rsp], 39 ; 00000027H
  001b8	75 02		 jne	 SHORT $LN28@Win32MainW
  001ba	eb 5d		 jmp	 SHORT $LN29@Win32MainW
$LN28@Win32MainW:

; 302  :                 }
; 303  :                 else if(VKCode == VK_ESCAPE) {

  001bc	83 7c 24 20 1b	 cmp	 DWORD PTR VKCode$1[rsp], 27
  001c1	75 09		 jne	 SHORT $LN30@Win32MainW

; 304  :                     GlobalRunning = false;

  001c3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
  001ca	eb 4d		 jmp	 SHORT $LN31@Win32MainW
$LN30@Win32MainW:

; 305  :                 }
; 306  :                 else if(VKCode == VK_SPACE) {

  001cc	83 7c 24 20 20	 cmp	 DWORD PTR VKCode$1[rsp], 32 ; 00000020H
  001d1	75 46		 jne	 SHORT $LN32@Win32MainW

; 307  :                     OutputDebugStringA("Space ");

  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87780
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 308  :                     if(IsDown) {

  001e0	0f b6 44 24 25	 movzx	 eax, BYTE PTR IsDown$3[rsp]
  001e5	85 c0		 test	 eax, eax
  001e7	74 0d		 je	 SHORT $LN33@Win32MainW

; 309  :                         OutputDebugStringA("IsDown ");

  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87782
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN33@Win32MainW:

; 310  :                     }
; 311  :                     if(WasDown) {

  001f6	0f b6 44 24 24	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  001fb	85 c0		 test	 eax, eax
  001fd	74 0d		 je	 SHORT $LN34@Win32MainW

; 312  :                         OutputDebugStringA("WasDown ");

  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87784
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN34@Win32MainW:

; 313  :                     }
; 314  :                     OutputDebugStringA("\n");

  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87785
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN32@Win32MainW:
$LN31@Win32MainW:
$LN29@Win32MainW:
$LN27@Win32MainW:
$LN25@Win32MainW:
$LN23@Win32MainW:
$LN21@Win32MainW:
$LN19@Win32MainW:
$LN17@Win32MainW:
$LN15@Win32MainW:
$LN13@Win32MainW:
$LN11@Win32MainW:
$LN9@Win32MainW:

; 315  :                 }
; 316  : 
; 317  :             }
; 318  : 
; 319  :             if((LParam & (1 << 29)) && VKCode == VK_F4) { //Alt+F4

  00219	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00221	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00227	48 85 c0	 test	 rax, rax
  0022a	74 0e		 je	 SHORT $LN35@Win32MainW
  0022c	83 7c 24 20 73	 cmp	 DWORD PTR VKCode$1[rsp], 115 ; 00000073H
  00231	75 07		 jne	 SHORT $LN35@Win32MainW

; 320  :                 GlobalRunning = false;

  00233	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN35@Win32MainW:

; 321  :             }
; 322  : 
; 323  :         } break;

  0023a	e9 d7 00 00 00	 jmp	 $LN2@Win32MainW
$LN36@Win32MainW:

; 324  : 
; 325  :         case WM_PAINT: {
; 326  :             OutputDebugStringA("WM_PAINT\n");

  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87788
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 327  :             PAINTSTRUCT Paint;
; 328  :             HDC DeviceContext = BeginPaint(Window, &Paint);

  0024c	48 8d 54 24 70	 lea	 rdx, QWORD PTR Paint$11[rsp]
  00251	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  0025f	48 89 44 24 60	 mov	 QWORD PTR DeviceContext$9[rsp], rax

; 329  :             int X = Paint.rcPaint.left;

  00264	8b 44 24 7c	 mov	 eax, DWORD PTR Paint$11[rsp+12]
  00268	89 44 24 58	 mov	 DWORD PTR X$8[rsp], eax

; 330  :             int Y = Paint.rcPaint.top;

  0026c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  00273	89 44 24 48	 mov	 DWORD PTR Y$5[rsp], eax

; 331  :             int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  00277	8b 44 24 7c	 mov	 eax, DWORD PTR Paint$11[rsp+12]
  0027b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+20]
  00282	2b c8		 sub	 ecx, eax
  00284	8b c1		 mov	 eax, ecx
  00286	89 44 24 4c	 mov	 DWORD PTR Width$6[rsp], eax

; 332  :             int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  0028a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  00291	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+24]
  00298	2b c8		 sub	 ecx, eax
  0029a	8b c1		 mov	 eax, ecx
  0029c	89 44 24 68	 mov	 DWORD PTR Height$10[rsp], eax

; 333  : 
; 334  : 
; 335  :             win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  002a0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  002a8	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  002ad	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  002b2	48 8b 44 24 50	 mov	 rax, QWORD PTR $T7[rsp]
  002b7	48 89 44 24 40	 mov	 QWORD PTR Dimension$4[rsp], rax

; 336  :             Win32DisplayBufferInWindow(&GlobalBackbuffer, DeviceContext, Dimension.Width, Dimension.Height);

  002bc	44 8b 4c 24 44	 mov	 r9d, DWORD PTR Dimension$4[rsp+4]
  002c1	44 8b 44 24 40	 mov	 r8d, DWORD PTR Dimension$4[rsp]
  002c6	48 8b 54 24 60	 mov	 rdx, QWORD PTR DeviceContext$9[rsp]
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  002d2	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 337  :             EndPaint(Window, &Paint);

  002d7	48 8d 54 24 70	 lea	 rdx, QWORD PTR Paint$11[rsp]
  002dc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  002e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 338  :         } break;

  002ea	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN37@Win32MainW:

; 339  : 
; 340  :         default: {
; 341  :             Result = DefWindowProcA(Window, Message, WParam, LParam);

  002ec	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  002f4	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  002fc	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00303	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0030b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  00311	48 89 44 24 38	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 342  :         } break;
; 343  :     }
; 344  : 
; 345  :     return(Result);

  00316	48 8b 44 24 38	 mov	 rax, QWORD PTR Result$[rsp]

; 346  : } 

  0031b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00323	48 33 cc	 xor	 rcx, rsp
  00326	e8 00 00 00 00	 call	 __security_check_cookie
  0032b	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00332	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Buffer$ = 128
DeviceContext$ = 136
WindowWidth$ = 144
WindowHeight$ = 152
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z PROC ; Win32DisplayBufferInWindow

; 233  : ) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 234  :     // TODO aspect ration correction
; 235  :     StretchDIBits(

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  00020	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00028	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00030	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00035	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00041	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00046	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004e	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005d	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00060	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00064	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00074	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007f	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 236  :         DeviceContext,
; 237  :         0, 0, WindowWidth, WindowHeight,
; 238  :         0, 0, Buffer->Width, Buffer->Height,
; 239  :         Buffer->Memory,
; 240  :         &Buffer->Info,
; 241  :         DIB_RGB_COLORS, SRCCOPY
; 242  :     );
; 243  : }

  0009a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009e	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 198  : Win32ResizeDIBSection(win32_offscreen_buffer *Buffer, int Width, int Height) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 199  :     // TODO Bulletproof this
; 200  :     // Maybe don't free first, free after, then free first if that fails
; 201  : 
; 202  :     if(Buffer->Memory) {

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 203  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 204  :     }
; 205  : 
; 206  :     Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 207  :     Buffer->Height = Height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 208  :     Buffer->BytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 209  : 
; 210  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 211  :     Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 212  :     Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 213  :     Buffer->Info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 214  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 215  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 216  : 
; 217  :     // NOTE: Thanks Chris Hecker for clarifying StretchDIBits/BitBlt
; 218  :     int BitmapMemorySize = (Buffer->Width*Buffer->Height)*Buffer->BytesPerPixel;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000bb	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000c4	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c8	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 219  :     Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000d1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d7	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000ed	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 220  : 
; 221  :     // TODO probably clear to black
; 222  : 
; 223  :     Buffer->Pitch = Width*Buffer->BytesPerPixel;

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f6	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  000fa	0f af 48 44	 imul	 ecx, DWORD PTR [rax+68]
  000fe	8b c1		 mov	 eax, ecx
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00105	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 224  : }

  00108	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010c	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 181  : internal win32_window_dimension Win32GetWindowDimension(HWND Window) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 182  :     win32_window_dimension Result;
; 183  : 
; 184  :     RECT ClientRect;
; 185  :     GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 186  :     Result.Width = ClientRect.right - ClientRect.left;

  00028	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 187  :     Result.Height = ClientRect.bottom - ClientRect.top;

  00038	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 188  : 
; 189  :     return(Result);

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 190  : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DirectSound$1 = 32
Error$2 = 40
Error$3 = 44
DirectSoundCreate$4 = 48
PrimaryBuffer$5 = 56
DSoundLibrary$ = 64
BufferDescription$6 = 72
WaveFormat$7 = 112
BufferDescription$8 = 136
__$ArrayPad$ = 176
Window$ = 208
SamplesPerSecond$ = 216
BufferSize$ = 224
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z PROC		; Win32InitDSound

; 117  : Win32InitDSound(HWND Window, int32 SamplesPerSecond, int32 BufferSize) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 118  :     // load the library
; 119  :     HMODULE DSoundLibrary = LoadLibraryA("dsound.dll");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87697
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00035	48 89 44 24 40	 mov	 QWORD PTR DSoundLibrary$[rsp], rax

; 120  : 
; 121  :     if(DSoundLibrary) {

  0003a	48 83 7c 24 40
	00		 cmp	 QWORD PTR DSoundLibrary$[rsp], 0
  00040	0f 84 cb 01 00
	00		 je	 $LN2@Win32InitD

; 122  :         // get a DirectSound object
; 123  :         direct_sound_create *DirectSoundCreate = (direct_sound_create *)GetProcAddress(DSoundLibrary, "DirectSoundCreate");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87699
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR DSoundLibrary$[rsp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00058	48 89 44 24 30	 mov	 QWORD PTR DirectSoundCreate$4[rsp], rax

; 124  :         // TODO double-check that this works on XP -- 7 or 8?
; 125  :         LPDIRECTSOUND DirectSound;
; 126  :         if(DirectSoundCreate && SUCCEEDED(DirectSoundCreate(0, &DirectSound, 0))) {

  0005d	48 83 7c 24 30
	00		 cmp	 QWORD PTR DirectSoundCreate$4[rsp], 0
  00063	0f 84 a8 01 00
	00		 je	 $LN3@Win32InitD
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	48 8d 54 24 20	 lea	 rdx, QWORD PTR DirectSound$1[rsp]
  00071	33 c9		 xor	 ecx, ecx
  00073	ff 54 24 30	 call	 QWORD PTR DirectSoundCreate$4[rsp]
  00077	85 c0		 test	 eax, eax
  00079	0f 8c 92 01 00
	00		 jl	 $LN3@Win32InitD

; 127  :             WAVEFORMATEX WaveFormat = {};

  0007f	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  00084	48 8b f8	 mov	 rdi, rax
  00087	33 c0		 xor	 eax, eax
  00089	b9 12 00 00 00	 mov	 ecx, 18
  0008e	f3 aa		 rep stosb

; 128  :             WaveFormat.wFormatTag = WAVE_FORMAT_PCM;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	66 89 44 24 70	 mov	 WORD PTR WaveFormat$7[rsp], ax

; 129  :             WaveFormat.nChannels = 2;

  0009a	b8 02 00 00 00	 mov	 eax, 2
  0009f	66 89 44 24 72	 mov	 WORD PTR WaveFormat$7[rsp+2], ax

; 130  :             WaveFormat.nSamplesPerSec = SamplesPerSecond;

  000a4	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR SamplesPerSecond$[rsp]
  000ab	89 44 24 74	 mov	 DWORD PTR WaveFormat$7[rsp+4], eax

; 131  :             WaveFormat.wBitsPerSample = 16;

  000af	b8 10 00 00 00	 mov	 eax, 16
  000b4	66 89 44 24 7e	 mov	 WORD PTR WaveFormat$7[rsp+14], ax

; 132  :             WaveFormat.nBlockAlign = (WaveFormat.nChannels*WaveFormat.wBitsPerSample) / 8;

  000b9	0f b7 44 24 72	 movzx	 eax, WORD PTR WaveFormat$7[rsp+2]
  000be	0f b7 4c 24 7e	 movzx	 ecx, WORD PTR WaveFormat$7[rsp+14]
  000c3	0f af c1	 imul	 eax, ecx
  000c6	99		 cdq
  000c7	83 e2 07	 and	 edx, 7
  000ca	03 c2		 add	 eax, edx
  000cc	c1 f8 03	 sar	 eax, 3
  000cf	66 89 44 24 7c	 mov	 WORD PTR WaveFormat$7[rsp+12], ax

; 133  :             WaveFormat.nAvgBytesPerSec = WaveFormat.nSamplesPerSec*WaveFormat.nBlockAlign;

  000d4	0f b7 44 24 7c	 movzx	 eax, WORD PTR WaveFormat$7[rsp+12]
  000d9	8b 4c 24 74	 mov	 ecx, DWORD PTR WaveFormat$7[rsp+4]
  000dd	0f af c8	 imul	 ecx, eax
  000e0	8b c1		 mov	 eax, ecx
  000e2	89 44 24 78	 mov	 DWORD PTR WaveFormat$7[rsp+8], eax

; 134  :             WaveFormat.cbSize = 0;

  000e6	33 c0		 xor	 eax, eax
  000e8	66 89 84 24 80
	00 00 00	 mov	 WORD PTR WaveFormat$7[rsp+16], ax

; 135  : 
; 136  :             if(SUCCEEDED(DirectSound->SetCooperativeLevel(Window, DSSCL_PRIORITY))) {

  000f0	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	41 b8 02 00 00
	00		 mov	 r8d, 2
  000fe	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR Window$[rsp]
  00106	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  0010b	ff 50 30	 call	 QWORD PTR [rax+48]
  0010e	85 c0		 test	 eax, eax
  00110	0f 8c 86 00 00
	00		 jl	 $LN5@Win32InitD

; 137  :                 DSBUFFERDESC BufferDescription = {0};

  00116	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 0
  00121	48 8d 84 24 8c
	00 00 00	 lea	 rax, QWORD PTR BufferDescription$8[rsp+4]
  00129	48 8b f8	 mov	 rdi, rax
  0012c	33 c0		 xor	 eax, eax
  0012e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00133	f3 aa		 rep stosb

; 138  :                 BufferDescription.dwSize = sizeof(BufferDescription);

  00135	c7 84 24 88 00
	00 00 28 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 40 ; 00000028H

; 139  :                 BufferDescription.dwFlags = DSBCAPS_PRIMARYBUFFER;

  00140	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp+4], 1

; 140  :                 // TODO DSBCAPS_GLOBALFOCUS?
; 141  : 
; 142  :                 LPDIRECTSOUNDBUFFER PrimaryBuffer;
; 143  : 
; 144  :                 if (SUCCEEDED(DirectSound->CreateSoundBuffer(&BufferDescription, &PrimaryBuffer, 0))) {

  0014b	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  00150	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00153	45 33 c9	 xor	 r9d, r9d
  00156	4c 8d 44 24 38	 lea	 r8, QWORD PTR PrimaryBuffer$5[rsp]
  0015b	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR BufferDescription$8[rsp]
  00163	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  00168	ff 50 18	 call	 QWORD PTR [rax+24]
  0016b	85 c0		 test	 eax, eax
  0016d	7c 2d		 jl	 SHORT $LN7@Win32InitD

; 145  :                     HRESULT Error = PrimaryBuffer->SetFormat(&WaveFormat);

  0016f	48 8b 44 24 38	 mov	 rax, QWORD PTR PrimaryBuffer$5[rsp]
  00174	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00177	48 8d 54 24 70	 lea	 rdx, QWORD PTR WaveFormat$7[rsp]
  0017c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR PrimaryBuffer$5[rsp]
  00181	ff 50 70	 call	 QWORD PTR [rax+112]
  00184	89 44 24 2c	 mov	 DWORD PTR Error$3[rsp], eax

; 146  :                     if(SUCCEEDED(Error)) {

  00188	83 7c 24 2c 00	 cmp	 DWORD PTR Error$3[rsp], 0
  0018d	7c 0d		 jl	 SHORT $LN9@Win32InitD

; 147  :                         OutputDebugStringA("Primary buffer format was set.\n");

  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87708
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN9@Win32InitD:
$LN7@Win32InitD:
$LN5@Win32InitD:

; 148  :                     }
; 149  :                     else {
; 150  :                         // TODO Diagnostic
; 151  :                     }
; 152  :                 }
; 153  :                 else {
; 154  :                     // TODO Diagnostic
; 155  :                 }
; 156  :             }
; 157  :             else {
; 158  :                 // TODO Diagnostic
; 159  :             }
; 160  :             // create a secondary buffer
; 161  :             // TODO DSBCAPS_GETCURENTPOSITION2?
; 162  :             DSBUFFERDESC BufferDescription = {0};

  0019c	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 0
  001a4	48 8d 44 24 4c	 lea	 rax, QWORD PTR BufferDescription$6[rsp+4]
  001a9	48 8b f8	 mov	 rdi, rax
  001ac	33 c0		 xor	 eax, eax
  001ae	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001b3	f3 aa		 rep stosb

; 163  :             BufferDescription.dwSize = sizeof(BufferDescription);

  001b5	c7 44 24 48 28
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 40 ; 00000028H

; 164  :             BufferDescription.dwFlags = 0;

  001bd	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp+4], 0

; 165  :             BufferDescription.dwBufferBytes = BufferSize;

  001c5	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR BufferSize$[rsp]
  001cc	89 44 24 50	 mov	 DWORD PTR BufferDescription$6[rsp+8], eax

; 166  :             BufferDescription.lpwfxFormat = &WaveFormat;

  001d0	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  001d5	48 89 44 24 58	 mov	 QWORD PTR BufferDescription$6[rsp+16], rax

; 167  :             HRESULT Error = DirectSound->CreateSoundBuffer(&BufferDescription, &GlobalSecondaryBuffer, 0);

  001da	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  001df	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e2	45 33 c9	 xor	 r9d, r9d
  001e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001ec	48 8d 54 24 48	 lea	 rdx, QWORD PTR BufferDescription$6[rsp]
  001f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  001f6	ff 50 18	 call	 QWORD PTR [rax+24]
  001f9	89 44 24 28	 mov	 DWORD PTR Error$2[rsp], eax

; 168  : 
; 169  :             if(SUCCEEDED(Error)) {

  001fd	83 7c 24 28 00	 cmp	 DWORD PTR Error$2[rsp], 0
  00202	7c 0d		 jl	 SHORT $LN11@Win32InitD

; 170  :                 OutputDebugStringA("Secondary buffer created successfuly\n");

  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87710
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN11@Win32InitD:
$LN3@Win32InitD:
$LN2@Win32InitD:

; 171  :             }
; 172  :         }
; 173  :         else {
; 174  :             // TODO Diagnositc
; 175  :         }
; 176  :     }
; 177  : }

  00211	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00219	48 33 cc	 xor	 rcx, rsp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00228	5f		 pop	 rdi
  00229	c3		 ret	 0
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ENDP		; Win32InitDSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
XInputLibrary$ = 32
?Wind32LoadXInput@@YAXXZ PROC				; Wind32LoadXInput

; 89   : Wind32LoadXInput(void) {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 90   :     // TODO Test on windows 8
; 91   :     HMODULE XInputLibrary = LoadLibraryA("xinput1_4.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87666
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 92   :     if(!XInputLibrary)

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	75 12		 jne	 SHORT $LN2@Wind32Load

; 93   :     {
; 94   :         // TODO(casey): Diagnostic
; 95   :         XInputLibrary = LoadLibraryA("xinput9_1_0.dll");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87668
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0002b	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN2@Wind32Load:

; 96   :     }
; 97   :     if(!XInputLibrary) {

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00036	75 12		 jne	 SHORT $LN3@Wind32Load

; 98   :         // TODO Diagnostic
; 99   :         XInputLibrary = LoadLibraryA("xinput1_3.dll");

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87670
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00045	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN3@Wind32Load:

; 100  :     }
; 101  :     if(XInputLibrary) {

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00050	74 62		 je	 SHORT $LN4@Wind32Load

; 102  :         XInputGetState = (x_input_get_state *)GetProcAddress(XInputLibrary, "XInputGetState" );

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87673
  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00064	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax

; 103  :         if(!XInputGetState) {XInputGetState = XInputGetStateStub;}

  0006b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, 0
  00073	75 0e		 jne	 SHORT $LN6@Wind32Load
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetStateStub
  0007c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax
$LN6@Wind32Load:

; 104  :         XInputSetState = (x_input_set_state *)GetProcAddress(XInputLibrary, "XInputSetState" );

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87675
  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00095	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax

; 105  :         if(!XInputSetState) {XInputSetState = XInputSetStateStub;}

  0009c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, 0
  000a4	75 0e		 jne	 SHORT $LN7@Wind32Load
  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
  000ad	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax
$LN7@Wind32Load:
$LN4@Wind32Load:

; 106  : 
; 107  :         // TODO Diagnostic
; 108  :     }
; 109  :     else {
; 110  :         // TODO Diagnostic
; 111  :     }
; 112  : }

  000b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b8	c3		 ret	 0
?Wind32LoadXInput@@YAXXZ ENDP				; Wind32LoadXInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pVibration$ = 16
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z PROC	; XInputSetStateStub

; 77   : X_INPUT_SET_STATE(XInputSetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 78   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 79   : }

  0000e	c3		 ret	 0
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ENDP	; XInputSetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z PROC	; XInputGetStateStub

; 68   : X_INPUT_GET_STATE(XInputGetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 69   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 70   : }

  0000e	c3		 ret	 0
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ENDP	; XInputGetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv228 = 96
tv233 = 97
tv223 = 98
Pad$1 = 104
NewController$2 = 112
BytesToWrite$3 = 120
ControllerIndex$4 = 124
ByteToLock$5 = 128
TargetCursor$6 = 132
X$7 = 136
Y$8 = 140
OldController$9 = 144
MaxControllerCount$10 = 152
Right$11 = 156
Up$12 = 157
Left$13 = 158
Down$14 = 159
PlayCursor$15 = 160
SoundIsValid$16 = 164
NewInput$17 = 168
Window$18 = 176
tv281 = 184
tv289 = 188
WriteCursor$19 = 192
tv313 = 196
tv305 = 200
tv297 = 204
tv273 = 208
OldInput$20 = 216
EndCycleCount$21 = 224
CounterElapsed$22 = 232
SoundBuffer$23 = 240
EndCounter$24 = 256
PerfCountFrequency$ = 264
LastCounter$25 = 272
Dimension$26 = 280
LastCycleCount$27 = 288
DeviceContext$28 = 296
YOffset$29 = 304
CyclesElapsed$30 = 312
Samples$31 = 320
Temp$32 = 328
Buffer$33 = 336
PerfCountFrequencyResult$ = 360
$T34 = 368
XOffset$35 = 376
FPS$36 = 384
MCPF$37 = 392
MSPerFrame$38 = 400
WindowClass$ = 416
Message$39 = 496
SoundOutput$40 = 544
ControllerState$41 = 568
Input$42 = 592
__$ArrayPad$ = 1264
Instance$ = 1296
PrevInstance$ = 1304
CmdLine$ = 1312
ShowCode$ = 1320
WinMain	PROC

; 427  : ) {

$LN34:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 00 05
	00 00		 sub	 rsp, 1280		; 00000500H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 428  :     LARGE_INTEGER PerfCountFrequencyResult;
; 429  :     QueryPerformanceFrequency(&PerfCountFrequencyResult);

  0002e	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 430  :     int64 PerfCountFrequency = PerfCountFrequencyResult.QuadPart;

  0003c	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR PerfCountFrequencyResult$[rsp]
  00044	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR PerfCountFrequency$[rsp], rax

; 431  : 
; 432  :     Wind32LoadXInput();

  0004c	e8 00 00 00 00	 call	 ?Wind32LoadXInput@@YAXXZ ; Wind32LoadXInput

; 433  : 
; 434  :     WNDCLASSA WindowClass = {};

  00051	48 8d 84 24 a0
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00059	48 8b f8	 mov	 rdi, rax
  0005c	33 c0		 xor	 eax, eax
  0005e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00063	f3 aa		 rep stosb

; 435  : 
; 436  :     Win32ResizeDIBSection(&GlobalBackbuffer, 1280, 720);

  00065	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  0006b	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00077	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 437  :     
; 438  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0007c	c7 84 24 a0 01
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 439  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  0008e	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 440  :     WindowClass.hInstance = Instance;

  00096	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  0009e	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 441  : //    WindowClass.hIcon;
; 442  :     WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG87916
  000ad	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 443  : 
; 444  : 
; 445  :     if (RegisterClass(&WindowClass)) {

  000b5	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000c3	0f b7 c0	 movzx	 eax, ax
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 a8 09 00
	00		 je	 $LN9@WinMain

; 446  :         HWND Window = CreateWindowExA(

  000ce	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000d7	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000df	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000e4	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000ed	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000f6	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000fe	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  00106	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  0010e	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  00116	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  0011c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG87919
  00123	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0012b	33 c9		 xor	 ecx, ecx
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00133	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR Window$18[rsp], rax

; 447  :             0,
; 448  :             WindowClass.lpszClassName,
; 449  :             "Handmade Hero",
; 450  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 451  :             CW_USEDEFAULT,
; 452  :             CW_USEDEFAULT,
; 453  :             CW_USEDEFAULT,
; 454  :             CW_USEDEFAULT,
; 455  :             0,
; 456  :             0,
; 457  :             Instance,
; 458  :             0
; 459  :         );
; 460  :         if(Window){

  0013b	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR Window$18[rsp], 0
  00144	0f 84 2c 09 00
	00		 je	 $LN11@WinMain

; 461  :             HDC DeviceContext = GetDC(Window);

  0014a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Window$18[rsp]
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00158	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR DeviceContext$28[rsp], rax

; 462  : 
; 463  :             // Graphics test
; 464  :             int XOffset = 0;

  00160	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR XOffset$35[rsp], 0

; 465  :             int YOffset = 0;

  0016b	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR YOffset$29[rsp], 0

; 466  : 
; 467  :             // Sound Test
; 468  :             win32_sound_output SoundOutput = {};

  00176	48 8d 84 24 20
	02 00 00	 lea	 rax, QWORD PTR SoundOutput$40[rsp]
  0017e	48 8b f8	 mov	 rdi, rax
  00181	33 c0		 xor	 eax, eax
  00183	b9 18 00 00 00	 mov	 ecx, 24
  00188	f3 aa		 rep stosb

; 469  :             SoundOutput.SamplesPerSecond = 48000;

  0018a	c7 84 24 20 02
	00 00 80 bb 00
	00		 mov	 DWORD PTR SoundOutput$40[rsp], 48000 ; 0000bb80H

; 470  :             // SoundOutput.ToneHz = 256;
; 471  :             // SoundOutput.ToneVolume = 3000;
; 472  :             SoundOutput.RunningSampleIndex = 0;

  00195	c7 84 24 24 02
	00 00 00 00 00
	00		 mov	 DWORD PTR SoundOutput$40[rsp+4], 0

; 473  :             // SoundOutput.WavePeriod = SoundOutput.SamplesPerSecond/SoundOutput.ToneHz;
; 474  :             SoundOutput.BytesPerSample = sizeof(int16)*2;

  001a0	c7 84 24 28 02
	00 00 04 00 00
	00		 mov	 DWORD PTR SoundOutput$40[rsp+8], 4

; 475  :             SoundOutput.LatencySampleCount = SoundOutput.SamplesPerSecond / 15;

  001ab	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$40[rsp]
  001b2	99		 cdq
  001b3	b9 0f 00 00 00	 mov	 ecx, 15
  001b8	f7 f9		 idiv	 ecx
  001ba	89 84 24 34 02
	00 00		 mov	 DWORD PTR SoundOutput$40[rsp+20], eax

; 476  :             SoundOutput.SecondaryBufferSize = SoundOutput.SamplesPerSecond*SoundOutput.BytesPerSample;

  001c1	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$40[rsp]
  001c8	0f af 84 24 28
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$40[rsp+8]
  001d0	89 84 24 2c 02
	00 00		 mov	 DWORD PTR SoundOutput$40[rsp+12], eax

; 477  :             Win32InitDSound(Window, SoundOutput.SamplesPerSecond, SoundOutput.SecondaryBufferSize);

  001d7	44 8b 84 24 2c
	02 00 00	 mov	 r8d, DWORD PTR SoundOutput$40[rsp+12]
  001df	8b 94 24 20 02
	00 00		 mov	 edx, DWORD PTR SoundOutput$40[rsp]
  001e6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Window$18[rsp]
  001ee	e8 00 00 00 00	 call	 ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ; Win32InitDSound

; 478  :             win32ClearBuffer(&SoundOutput);

  001f3	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR SoundOutput$40[rsp]
  001fb	e8 00 00 00 00	 call	 ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z ; win32ClearBuffer

; 479  :             GlobalSecondaryBuffer->Play(0, 0, DSBPLAY_LOOPING);

  00200	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00207	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0020a	41 b9 01 00 00
	00		 mov	 r9d, 1
  00210	45 33 c0	 xor	 r8d, r8d
  00213	33 d2		 xor	 edx, edx
  00215	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0021c	ff 50 60	 call	 QWORD PTR [rax+96]

; 480  :             // bool SoundIsPlaying = true;
; 481  : 
; 482  :             GlobalRunning = true;

  0021f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1

; 483  : 
; 484  :             // TODO Pool with bitmap VirtualAlloc
; 485  :             int16 *Samples = (int16 *)VirtualAlloc(0, SoundOutput.SecondaryBufferSize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  00226	48 63 84 24 2c
	02 00 00	 movsxd	 rax, DWORD PTR SoundOutput$40[rsp+12]
  0022e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00234	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0023a	48 8b d0	 mov	 rdx, rax
  0023d	33 c9		 xor	 ecx, ecx
  0023f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00245	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR Samples$31[rsp], rax

; 486  : 
; 487  :             game_input Input[2] = {};

  0024d	48 8d 84 24 50
	02 00 00	 lea	 rax, QWORD PTR Input$42[rsp]
  00255	48 8b f8	 mov	 rdi, rax
  00258	33 c0		 xor	 eax, eax
  0025a	b9 a0 02 00 00	 mov	 ecx, 672		; 000002a0H
  0025f	f3 aa		 rep stosb

; 488  :             game_input *NewInput = &Input[0];

  00261	b8 50 01 00 00	 mov	 eax, 336		; 00000150H
  00266	48 6b c0 00	 imul	 rax, rax, 0
  0026a	48 8d 84 04 50
	02 00 00	 lea	 rax, QWORD PTR Input$42[rsp+rax]
  00272	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR NewInput$17[rsp], rax

; 489  :             game_input *OldInput = &Input[1];

  0027a	b8 50 01 00 00	 mov	 eax, 336		; 00000150H
  0027f	48 6b c0 01	 imul	 rax, rax, 1
  00283	48 8d 84 04 50
	02 00 00	 lea	 rax, QWORD PTR Input$42[rsp+rax]
  0028b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR OldInput$20[rsp], rax

; 490  : 
; 491  :             LARGE_INTEGER LastCounter;
; 492  :             QueryPerformanceCounter(&LastCounter);

  00293	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR LastCounter$25[rsp]
  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 493  :             int64 LastCycleCount = __rdtsc();

  002a1	0f 31		 rdtsc
  002a3	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  002a7	48 0b c2	 or	 rax, rdx
  002aa	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR LastCycleCount$27[rsp], rax
$LN2@WinMain:

; 494  : 
; 495  :             // game loop begin
; 496  :             while (GlobalRunning) {

  002b2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA
  002b9	85 c0		 test	 eax, eax
  002bb	0f 84 b5 07 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 497  : 
; 498  :                 MSG Message;
; 499  : 
; 500  :                 while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  002c1	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  002c9	45 33 c9	 xor	 r9d, r9d
  002cc	45 33 c0	 xor	 r8d, r8d
  002cf	33 d2		 xor	 edx, edx
  002d1	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR Message$39[rsp]
  002d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  002df	85 c0		 test	 eax, eax
  002e1	74 2f		 je	 SHORT $LN5@WinMain

; 501  :                     if(Message.message == WM_QUIT) {

  002e3	83 bc 24 f8 01
	00 00 12	 cmp	 DWORD PTR Message$39[rsp+8], 18
  002eb	75 07		 jne	 SHORT $LN13@WinMain

; 502  :                         GlobalRunning = false;

  002ed	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN13@WinMain:

; 503  :                     }
; 504  : 
; 505  :                     // TODO Should we poll this more frequently
; 506  : 
; 507  :                     TranslateMessage(&Message);

  002f4	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR Message$39[rsp]
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 508  :                     DispatchMessageA(&Message);

  00302	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR Message$39[rsp]
  0030a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 509  :                 }

  00310	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 510  : 
; 511  :                 int MaxControllerCount = XUSER_MAX_COUNT;

  00312	c7 84 24 98 00
	00 00 04 00 00
	00		 mov	 DWORD PTR MaxControllerCount$10[rsp], 4

; 512  :                 if(MaxControllerCount = ArrayCount(NewInput->Controllers)) {

  0031d	c7 84 24 98 00
	00 00 04 00 00
	00		 mov	 DWORD PTR MaxControllerCount$10[rsp], 4
  00328	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR MaxControllerCount$10[rsp], 0
  00330	74 0b		 je	 SHORT $LN14@WinMain

; 513  :                     MaxControllerCount = ArrayCount(NewInput->Controllers);

  00332	c7 84 24 98 00
	00 00 04 00 00
	00		 mov	 DWORD PTR MaxControllerCount$10[rsp], 4
$LN14@WinMain:

; 514  :                 }
; 515  :                 for(
; 516  :                     DWORD ControllerIndex = 0;

  0033d	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR ControllerIndex$4[rsp], 0
  00345	eb 0a		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:

; 518  :                     ++ControllerIndex

  00347	8b 44 24 7c	 mov	 eax, DWORD PTR ControllerIndex$4[rsp]
  0034b	ff c0		 inc	 eax
  0034d	89 44 24 7c	 mov	 DWORD PTR ControllerIndex$4[rsp], eax
$LN8@WinMain:

; 517  :                     ControllerIndex < XUSER_MAX_COUNT;

  00351	83 7c 24 7c 04	 cmp	 DWORD PTR ControllerIndex$4[rsp], 4
  00356	0f 83 a1 03 00
	00		 jae	 $LN7@WinMain

; 519  :                 ) {
; 520  :                     game_controller_input *OldController = &OldInput->Controllers[ControllerIndex];

  0035c	8b 44 24 7c	 mov	 eax, DWORD PTR ControllerIndex$4[rsp]
  00360	48 6b c0 54	 imul	 rax, rax, 84		; 00000054H
  00364	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR OldInput$20[rsp]
  0036c	48 03 c8	 add	 rcx, rax
  0036f	48 8b c1	 mov	 rax, rcx
  00372	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR OldController$9[rsp], rax

; 521  :                     game_controller_input *NewController = &NewInput->Controllers[ControllerIndex];

  0037a	8b 44 24 7c	 mov	 eax, DWORD PTR ControllerIndex$4[rsp]
  0037e	48 6b c0 54	 imul	 rax, rax, 84		; 00000054H
  00382	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR NewInput$17[rsp]
  0038a	48 03 c8	 add	 rcx, rax
  0038d	48 8b c1	 mov	 rax, rcx
  00390	48 89 44 24 70	 mov	 QWORD PTR NewController$2[rsp], rax

; 522  : 
; 523  : 
; 524  :                     XINPUT_STATE ControllerState;
; 525  :                     if(XInputGetState(ControllerIndex, &ControllerState) == ERROR_SUCCESS) {

  00395	48 8d 94 24 38
	02 00 00	 lea	 rdx, QWORD PTR ControllerState$41[rsp]
  0039d	8b 4c 24 7c	 mov	 ecx, DWORD PTR ControllerIndex$4[rsp]
  003a1	ff 15 00 00 00
	00		 call	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA
  003a7	85 c0		 test	 eax, eax
  003a9	0f 85 49 03 00
	00		 jne	 $LN15@WinMain

; 526  :                         // NOTE Controller is plugged in
; 527  :                         // TODO See if ControllerState.dwPacketNumber increments
; 528  :                         XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  003af	48 8d 84 24 3c
	02 00 00	 lea	 rax, QWORD PTR ControllerState$41[rsp+4]
  003b7	48 89 44 24 68	 mov	 QWORD PTR Pad$1[rsp], rax

; 529  : 
; 530  :                         // TODO DPad
; 531  :                         bool Up = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);

  003bc	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  003c1	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003c4	83 e0 01	 and	 eax, 1
  003c7	88 84 24 9d 00
	00 00		 mov	 BYTE PTR Up$12[rsp], al

; 532  :                         bool Down = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);

  003ce	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  003d3	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003d6	83 e0 02	 and	 eax, 2
  003d9	85 c0		 test	 eax, eax
  003db	74 07		 je	 SHORT $LN27@WinMain
  003dd	c6 44 24 62 01	 mov	 BYTE PTR tv223[rsp], 1
  003e2	eb 05		 jmp	 SHORT $LN28@WinMain
$LN27@WinMain:
  003e4	c6 44 24 62 00	 mov	 BYTE PTR tv223[rsp], 0
$LN28@WinMain:
  003e9	0f b6 44 24 62	 movzx	 eax, BYTE PTR tv223[rsp]
  003ee	88 84 24 9f 00
	00 00		 mov	 BYTE PTR Down$14[rsp], al

; 533  :                         bool Left = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);

  003f5	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  003fa	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003fd	83 e0 04	 and	 eax, 4
  00400	85 c0		 test	 eax, eax
  00402	74 07		 je	 SHORT $LN29@WinMain
  00404	c6 44 24 60 01	 mov	 BYTE PTR tv228[rsp], 1
  00409	eb 05		 jmp	 SHORT $LN30@WinMain
$LN29@WinMain:
  0040b	c6 44 24 60 00	 mov	 BYTE PTR tv228[rsp], 0
$LN30@WinMain:
  00410	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv228[rsp]
  00415	88 84 24 9e 00
	00 00		 mov	 BYTE PTR Left$13[rsp], al

; 534  :                         bool Right = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

  0041c	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00421	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00424	83 e0 08	 and	 eax, 8
  00427	85 c0		 test	 eax, eax
  00429	74 07		 je	 SHORT $LN31@WinMain
  0042b	c6 44 24 61 01	 mov	 BYTE PTR tv233[rsp], 1
  00430	eb 05		 jmp	 SHORT $LN32@WinMain
$LN31@WinMain:
  00432	c6 44 24 61 00	 mov	 BYTE PTR tv233[rsp], 0
$LN32@WinMain:
  00437	0f b6 44 24 61	 movzx	 eax, BYTE PTR tv233[rsp]
  0043c	88 84 24 9c 00
	00 00		 mov	 BYTE PTR Right$11[rsp], al

; 535  : 
; 536  :                         NewController->IsAnalogue = true;

  00443	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00448	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 537  :                         real32 X;
; 538  :                         if(Pad->sThumbLX < 0) {

  0044e	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00453	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00457	85 c0		 test	 eax, eax
  00459	7d 20		 jge	 SHORT $LN17@WinMain

; 539  :                             X = (real32)Pad->sThumbLX / 32768.0f; 

  0045b	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00460	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00464	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00468	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47000000
  00470	f3 0f 11 84 24
	88 00 00 00	 movss	 DWORD PTR X$7[rsp], xmm0

; 540  :                         }
; 541  :                         else {

  00479	eb 1e		 jmp	 SHORT $LN18@WinMain
$LN17@WinMain:

; 542  :                             X = (real32)Pad->sThumbLX / 32767.0f;

  0047b	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00480	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00484	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00488	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  00490	f3 0f 11 84 24
	88 00 00 00	 movss	 DWORD PTR X$7[rsp], xmm0
$LN18@WinMain:

; 543  :                         }
; 544  : 
; 545  :                         real32 Y;
; 546  :                         if(Pad->sThumbLX < 0) {

  00499	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  0049e	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  004a2	85 c0		 test	 eax, eax
  004a4	7d 20		 jge	 SHORT $LN19@WinMain

; 547  :                             Y = (real32)Pad->sThumbLY / 32768.0f; 

  004a6	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  004ab	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  004af	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004b3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47000000
  004bb	f3 0f 11 84 24
	8c 00 00 00	 movss	 DWORD PTR Y$8[rsp], xmm0

; 548  :                         }
; 549  :                         else {

  004c4	eb 1e		 jmp	 SHORT $LN20@WinMain
$LN19@WinMain:

; 550  :                             Y = (real32)Pad->sThumbLY / 32767.0f;

  004c6	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  004cb	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  004cf	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004d3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  004db	f3 0f 11 84 24
	8c 00 00 00	 movss	 DWORD PTR Y$8[rsp], xmm0
$LN20@WinMain:

; 551  :                         }
; 552  : 
; 553  :                         NewController->StartX = OldController->EndX;

  004e4	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  004e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  004f1	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [rcx+28]
  004f6	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 554  :                         NewController->StartY = OldController->EndY;

  004fb	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00500	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00508	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [rcx+32]
  0050d	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 555  : 
; 556  :                         // TODO Min/max macros
; 557  :                         NewController->MinX = NewController->MaxX = NewController->EndX = X;

  00512	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00517	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR X$7[rsp]
  00520	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
  00525	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  0052a	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR X$7[rsp]
  00533	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
  00538	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  0053d	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR X$7[rsp]
  00546	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 558  :                         NewController->MinY = NewController->MaxY = NewController->EndY = Y;

  0054b	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00550	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR Y$8[rsp]
  00559	f3 0f 11 40 20	 movss	 DWORD PTR [rax+32], xmm0
  0055e	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00563	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR Y$8[rsp]
  0056c	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0
  00571	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00576	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR Y$8[rsp]
  0057f	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 559  : 
; 560  : 
; 561  :                         // TODO Deadzones XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE
; 562  : 
; 563  :                         Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Down, &NewController->Down, XINPUT_GAMEPAD_A);

  00584	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00589	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0058d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00595	48 83 c1 2c	 add	 rcx, 44			; 0000002cH
  00599	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  0059e	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  005a1	89 94 24 d0 00
	00 00		 mov	 DWORD PTR tv273[rsp], edx
  005a8	41 b9 00 10 00
	00		 mov	 r9d, 4096		; 00001000H
  005ae	4c 8b c0	 mov	 r8, rax
  005b1	48 8b d1	 mov	 rdx, rcx
  005b4	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv273[rsp]
  005bb	8b c8		 mov	 ecx, eax
  005bd	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 564  :                         Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Right, &NewController->Right, XINPUT_GAMEPAD_B);

  005c2	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  005c7	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  005cb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  005d3	48 83 c1 3c	 add	 rcx, 60			; 0000003cH
  005d7	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  005dc	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  005df	89 94 24 b8 00
	00 00		 mov	 DWORD PTR tv281[rsp], edx
  005e6	41 b9 00 20 00
	00		 mov	 r9d, 8192		; 00002000H
  005ec	4c 8b c0	 mov	 r8, rax
  005ef	48 8b d1	 mov	 rdx, rcx
  005f2	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv281[rsp]
  005f9	8b c8		 mov	 ecx, eax
  005fb	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 565  :                         Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Left, &NewController->Left, XINPUT_GAMEPAD_X);

  00600	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00605	48 83 c0 34	 add	 rax, 52			; 00000034H
  00609	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00611	48 83 c1 34	 add	 rcx, 52			; 00000034H
  00615	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  0061a	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  0061d	89 94 24 bc 00
	00 00		 mov	 DWORD PTR tv289[rsp], edx
  00624	41 b9 00 40 00
	00		 mov	 r9d, 16384		; 00004000H
  0062a	4c 8b c0	 mov	 r8, rax
  0062d	48 8b d1	 mov	 rdx, rcx
  00630	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv289[rsp]
  00637	8b c8		 mov	 ecx, eax
  00639	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 566  :                         Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Up, &NewController->Up, XINPUT_GAMEPAD_Y);

  0063e	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00643	48 83 c0 24	 add	 rax, 36			; 00000024H
  00647	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  0064f	48 83 c1 24	 add	 rcx, 36			; 00000024H
  00653	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  00658	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  0065b	89 94 24 cc 00
	00 00		 mov	 DWORD PTR tv297[rsp], edx
  00662	41 b9 00 80 00
	00		 mov	 r9d, 32768		; 00008000H
  00668	4c 8b c0	 mov	 r8, rax
  0066b	48 8b d1	 mov	 rdx, rcx
  0066e	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv297[rsp]
  00675	8b c8		 mov	 ecx, eax
  00677	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 567  :                         Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->LeftShoulder, &NewController->LeftShoulder, XINPUT_GAMEPAD_LEFT_SHOULDER);

  0067c	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  00681	48 83 c0 44	 add	 rax, 68			; 00000044H
  00685	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  0068d	48 83 c1 44	 add	 rcx, 68			; 00000044H
  00691	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  00696	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00699	89 94 24 c8 00
	00 00		 mov	 DWORD PTR tv305[rsp], edx
  006a0	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  006a6	4c 8b c0	 mov	 r8, rax
  006a9	48 8b d1	 mov	 rdx, rcx
  006ac	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv305[rsp]
  006b3	8b c8		 mov	 ecx, eax
  006b5	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 568  :                         Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->RightShoulder, &NewController->RightShoulder, XINPUT_GAMEPAD_RIGHT_SHOULDER);

  006ba	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$2[rsp]
  006bf	48 83 c0 4c	 add	 rax, 76			; 0000004cH
  006c3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  006cb	48 83 c1 4c	 add	 rcx, 76			; 0000004cH
  006cf	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  006d4	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  006d7	89 94 24 c4 00
	00 00		 mov	 DWORD PTR tv313[rsp], edx
  006de	41 b9 00 02 00
	00		 mov	 r9d, 512		; 00000200H
  006e4	4c 8b c0	 mov	 r8, rax
  006e7	48 8b d1	 mov	 rdx, rcx
  006ea	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv313[rsp]
  006f1	8b c8		 mov	 ecx, eax
  006f3	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton
$LN15@WinMain:

; 569  : 
; 570  :                         
; 571  : 
; 572  :                         // bool Start = (Pad->wButtons & XINPUT_GAMEPAD_START);
; 573  :                         // bool Back = (Pad->wButtons & XINPUT_GAMEPAD_BACK);
; 574  : 
; 575  :                         // if (AButton) {
; 576  :                         //     SoundOutput.ToneHz = 512 + (int32)256*(((real32)StickY / 30000.0f));
; 577  :                         //     SoundOutput.WavePeriod = SoundOutput.SamplesPerSecond/SoundOutput.ToneHz;
; 578  :                         // }
; 579  :                         // else {
; 580  :                         //     SoundOutput.ToneHz = 256;
; 581  :                         //     SoundOutput.WavePeriod = SoundOutput.SamplesPerSecond/SoundOutput.ToneHz;
; 582  :                         // }
; 583  :                     }
; 584  :                     else {
; 585  :                         // NOTE Controller is not available
; 586  :                     }
; 587  :                 }

  006f8	e9 4a fc ff ff	 jmp	 $LN6@WinMain
$LN7@WinMain:

; 588  : 
; 589  :                 DWORD ByteToLock = 0;

  006fd	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ByteToLock$5[rsp], 0

; 590  :                 DWORD TargetCursor = 0;

  00708	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR TargetCursor$6[rsp], 0

; 591  :                 DWORD BytesToWrite = 0;

  00713	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR BytesToWrite$3[rsp], 0

; 592  :                 DWORD PlayCursor = 0;

  0071b	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR PlayCursor$15[rsp], 0

; 593  :                 DWORD WriteCursor = 0;

  00726	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR WriteCursor$19[rsp], 0

; 594  :                 bool32 SoundIsValid = false;

  00731	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR SoundIsValid$16[rsp], 0

; 595  :                 // TODO Tighten up sound logic so that we know where we should be 
; 596  :                 // writing to and can anticipate the time spent in the game update
; 597  :                 if(SUCCEEDED(GlobalSecondaryBuffer->GetCurrentPosition(&PlayCursor, &WriteCursor))) {

  0073c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00743	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00746	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR WriteCursor$19[rsp]
  0074e	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR PlayCursor$15[rsp]
  00756	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0075d	ff 50 20	 call	 QWORD PTR [rax+32]
  00760	85 c0		 test	 eax, eax
  00762	0f 8c c1 00 00
	00		 jl	 $LN21@WinMain

; 598  :                     ByteToLock = (SoundOutput.RunningSampleIndex*SoundOutput.BytesPerSample) % SoundOutput.SecondaryBufferSize;

  00768	8b 84 24 24 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$40[rsp+4]
  0076f	0f af 84 24 28
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$40[rsp+8]
  00777	33 d2		 xor	 edx, edx
  00779	f7 b4 24 2c 02
	00 00		 div	 DWORD PTR SoundOutput$40[rsp+12]
  00780	8b c2		 mov	 eax, edx
  00782	89 84 24 80 00
	00 00		 mov	 DWORD PTR ByteToLock$5[rsp], eax

; 599  :                     TargetCursor = (PlayCursor + (SoundOutput.LatencySampleCount*SoundOutput.BytesPerSample)) % SoundOutput.SecondaryBufferSize;

  00789	8b 84 24 34 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$40[rsp+20]
  00790	0f af 84 24 28
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$40[rsp+8]
  00798	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR PlayCursor$15[rsp]
  0079f	03 c8		 add	 ecx, eax
  007a1	8b c1		 mov	 eax, ecx
  007a3	33 d2		 xor	 edx, edx
  007a5	f7 b4 24 2c 02
	00 00		 div	 DWORD PTR SoundOutput$40[rsp+12]
  007ac	8b c2		 mov	 eax, edx
  007ae	89 84 24 84 00
	00 00		 mov	 DWORD PTR TargetCursor$6[rsp], eax

; 600  :                     if(ByteToLock == TargetCursor) {

  007b5	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR TargetCursor$6[rsp]
  007bc	39 84 24 80 00
	00 00		 cmp	 DWORD PTR ByteToLock$5[rsp], eax
  007c3	75 08		 jne	 SHORT $LN22@WinMain

; 601  :                         BytesToWrite = 0;

  007c5	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR BytesToWrite$3[rsp], 0
$LN22@WinMain:

; 602  :                     }
; 603  :                     if(ByteToLock > TargetCursor) {

  007cd	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR TargetCursor$6[rsp]
  007d4	39 84 24 80 00
	00 00		 cmp	 DWORD PTR ByteToLock$5[rsp], eax
  007db	76 2b		 jbe	 SHORT $LN23@WinMain

; 604  :                         BytesToWrite = (SoundOutput.SecondaryBufferSize - ByteToLock);

  007dd	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR ByteToLock$5[rsp]
  007e4	8b 8c 24 2c 02
	00 00		 mov	 ecx, DWORD PTR SoundOutput$40[rsp+12]
  007eb	2b c8		 sub	 ecx, eax
  007ed	8b c1		 mov	 eax, ecx
  007ef	89 44 24 78	 mov	 DWORD PTR BytesToWrite$3[rsp], eax

; 605  :                         BytesToWrite += TargetCursor;

  007f3	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR TargetCursor$6[rsp]
  007fa	8b 4c 24 78	 mov	 ecx, DWORD PTR BytesToWrite$3[rsp]
  007fe	03 c8		 add	 ecx, eax
  00800	8b c1		 mov	 eax, ecx
  00802	89 44 24 78	 mov	 DWORD PTR BytesToWrite$3[rsp], eax

; 606  :                     }
; 607  :                     else {

  00806	eb 16		 jmp	 SHORT $LN24@WinMain
$LN23@WinMain:

; 608  :                         BytesToWrite = TargetCursor - ByteToLock;

  00808	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR ByteToLock$5[rsp]
  0080f	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR TargetCursor$6[rsp]
  00816	2b c8		 sub	 ecx, eax
  00818	8b c1		 mov	 eax, ecx
  0081a	89 44 24 78	 mov	 DWORD PTR BytesToWrite$3[rsp], eax
$LN24@WinMain:

; 609  :                     }
; 610  : 
; 611  :                     SoundIsValid = true;

  0081e	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR SoundIsValid$16[rsp], 1
$LN21@WinMain:

; 612  :                 }
; 613  : 
; 614  :                 
; 615  :                 game_sound_output_buffer SoundBuffer = {};

  00829	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR SoundBuffer$23[rsp]
  00831	48 8b f8	 mov	 rdi, rax
  00834	33 c0		 xor	 eax, eax
  00836	b9 10 00 00 00	 mov	 ecx, 16
  0083b	f3 aa		 rep stosb

; 616  :                 SoundBuffer.SamplesPerSecond = SoundOutput.SamplesPerSecond;

  0083d	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$40[rsp]
  00844	89 84 24 f0 00
	00 00		 mov	 DWORD PTR SoundBuffer$23[rsp], eax

; 617  :                 SoundBuffer.SampleCount = BytesToWrite / SoundOutput.BytesPerSample;

  0084b	33 d2		 xor	 edx, edx
  0084d	8b 44 24 78	 mov	 eax, DWORD PTR BytesToWrite$3[rsp]
  00851	f7 b4 24 28 02
	00 00		 div	 DWORD PTR SoundOutput$40[rsp+8]
  00858	89 84 24 f4 00
	00 00		 mov	 DWORD PTR SoundBuffer$23[rsp+4], eax

; 618  :                 SoundBuffer.Samples = Samples;

  0085f	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR Samples$31[rsp]
  00867	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR SoundBuffer$23[rsp+8], rax

; 619  : 
; 620  :                 game_offscreen_buffer Buffer = {};

  0086f	48 8d 84 24 50
	01 00 00	 lea	 rax, QWORD PTR Buffer$33[rsp]
  00877	48 8b f8	 mov	 rdi, rax
  0087a	33 c0		 xor	 eax, eax
  0087c	b9 18 00 00 00	 mov	 ecx, 24
  00881	f3 aa		 rep stosb

; 621  :                 Buffer.Memory = GlobalBackbuffer.Memory;

  00883	48 8b 05 30 00
	00 00		 mov	 rax, QWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+48
  0088a	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR Buffer$33[rsp], rax

; 622  :                 Buffer.Width = GlobalBackbuffer.Width;

  00892	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+56
  00898	89 84 24 58 01
	00 00		 mov	 DWORD PTR Buffer$33[rsp+8], eax

; 623  :                 Buffer.Height = GlobalBackbuffer.Height;

  0089f	8b 05 3c 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+60
  008a5	89 84 24 5c 01
	00 00		 mov	 DWORD PTR Buffer$33[rsp+12], eax

; 624  :                 Buffer.Pitch = GlobalBackbuffer.Pitch;

  008ac	8b 05 40 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+64
  008b2	89 84 24 60 01
	00 00		 mov	 DWORD PTR Buffer$33[rsp+16], eax

; 625  :                 GameUpdateAndRender(NewInput, &Buffer, &SoundBuffer);

  008b9	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR SoundBuffer$23[rsp]
  008c1	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR Buffer$33[rsp]
  008c9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR NewInput$17[rsp]
  008d1	e8 00 00 00 00	 call	 ?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z ; GameUpdateAndRender

; 626  : 
; 627  :                 // directsound output test
; 628  :                 if(SoundIsValid) {

  008d6	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR SoundIsValid$16[rsp], 0
  008de	74 21		 je	 SHORT $LN25@WinMain

; 629  :                     
; 630  :                     win32FillSoundBuffer(&SoundOutput, ByteToLock, BytesToWrite, &SoundBuffer);

  008e0	4c 8d 8c 24 f0
	00 00 00	 lea	 r9, QWORD PTR SoundBuffer$23[rsp]
  008e8	44 8b 44 24 78	 mov	 r8d, DWORD PTR BytesToWrite$3[rsp]
  008ed	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR ByteToLock$5[rsp]
  008f4	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR SoundOutput$40[rsp]
  008fc	e8 00 00 00 00	 call	 ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z ; win32FillSoundBuffer
$LN25@WinMain:

; 631  : 
; 632  :                     // TODO More strenuous test
; 633  :                 }
; 634  : 
; 635  :                 win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  00901	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Window$18[rsp]
  00909	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  0090e	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR $T34[rsp], rax
  00916	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR $T34[rsp]
  0091e	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR Dimension$26[rsp], rax

; 636  :                 Win32DisplayBufferInWindow(

  00926	44 8b 8c 24 1c
	01 00 00	 mov	 r9d, DWORD PTR Dimension$26[rsp+4]
  0092e	44 8b 84 24 18
	01 00 00	 mov	 r8d, DWORD PTR Dimension$26[rsp]
  00936	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR DeviceContext$28[rsp]
  0093e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00945	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 637  :                     &GlobalBackbuffer, DeviceContext,
; 638  :                     Dimension.Width, Dimension.Height
; 639  :                 );
; 640  : 
; 641  :                 int64 EndCycleCount = __rdtsc();

  0094a	0f 31		 rdtsc
  0094c	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00950	48 0b c2	 or	 rax, rdx
  00953	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR EndCycleCount$21[rsp], rax

; 642  : 
; 643  :                 LARGE_INTEGER EndCounter;
; 644  :                 QueryPerformanceCounter(&EndCounter);

  0095b	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR EndCounter$24[rsp]
  00963	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 645  : 
; 646  :                 uint64 CyclesElapsed = EndCycleCount - LastCycleCount;

  00969	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR LastCycleCount$27[rsp]
  00971	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR EndCycleCount$21[rsp]
  00979	48 2b c8	 sub	 rcx, rax
  0097c	48 8b c1	 mov	 rax, rcx
  0097f	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR CyclesElapsed$30[rsp], rax

; 647  :                 int64 CounterElapsed = EndCounter.QuadPart - LastCounter.QuadPart;

  00987	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR LastCounter$25[rsp]
  0098f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR EndCounter$24[rsp]
  00997	48 2b c8	 sub	 rcx, rax
  0099a	48 8b c1	 mov	 rax, rcx
  0099d	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR CounterElapsed$22[rsp], rax

; 648  :                 real64 MSPerFrame = (((1000.0f*(real64)CounterElapsed) / (real64)PerfCountFrequency));

  009a5	f2 48 0f 2a 84
	24 e8 00 00 00	 cvtsi2sd xmm0, QWORD PTR CounterElapsed$22[rsp]
  009af	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  009b7	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  009bb	0f 28 c1	 movaps	 xmm0, xmm1
  009be	f2 48 0f 2a 8c
	24 08 01 00 00	 cvtsi2sd xmm1, QWORD PTR PerfCountFrequency$[rsp]
  009c8	f2 0f 5e c1	 divsd	 xmm0, xmm1
  009cc	f2 0f 11 84 24
	90 01 00 00	 movsd	 QWORD PTR MSPerFrame$38[rsp], xmm0

; 649  :                 real64 FPS = (real64)PerfCountFrequency / (real64)CounterElapsed;

  009d5	f2 48 0f 2a 84
	24 08 01 00 00	 cvtsi2sd xmm0, QWORD PTR PerfCountFrequency$[rsp]
  009df	f2 48 0f 2a 8c
	24 e8 00 00 00	 cvtsi2sd xmm1, QWORD PTR CounterElapsed$22[rsp]
  009e9	f2 0f 5e c1	 divsd	 xmm0, xmm1
  009ed	f2 0f 11 84 24
	80 01 00 00	 movsd	 QWORD PTR FPS$36[rsp], xmm0

; 650  :                 real64 MCPF = ((real64)CyclesElapsed / (1000.0f * 1000.0f));

  009f6	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR CyclesElapsed$30[rsp]
  009fe	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00a03	48 85 c0	 test	 rax, rax
  00a06	7d 08		 jge	 SHORT $LN33@WinMain
  00a08	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN33@WinMain:
  00a10	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@412e848000000000
  00a18	f2 0f 11 84 24
	88 01 00 00	 movsd	 QWORD PTR MCPF$37[rsp], xmm0

; 651  :                 
; 652  : 
; 653  :                 // char Buffer[256];
; 654  :                 // sprintf(Buffer, "%.02fms/f,  %.02ff/s,  %.02fmc/f\n", MSPerFrame, FPS, MCPF);
; 655  :                 // OutputDebugStringA(Buffer);
; 656  : 
; 657  :                 // TODO print it
; 658  :                 LastCounter = EndCounter;

  00a21	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR EndCounter$24[rsp]
  00a29	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR LastCounter$25[rsp], rax

; 659  :                 LastCycleCount = EndCycleCount;

  00a31	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR EndCycleCount$21[rsp]
  00a39	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR LastCycleCount$27[rsp], rax

; 660  : 
; 661  :                 game_input *Temp = NewInput;

  00a41	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR NewInput$17[rsp]
  00a49	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR Temp$32[rsp], rax

; 662  :                 NewInput = OldInput;

  00a51	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR OldInput$20[rsp]
  00a59	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR NewInput$17[rsp], rax

; 663  :                 OldInput = Temp;

  00a61	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR Temp$32[rsp]
  00a69	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR OldInput$20[rsp], rax

; 664  :                 // TODO Clear?
; 665  :             }

  00a71	e9 3c f8 ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN11@WinMain:
$LN9@WinMain:

; 666  :             //game loop end
; 667  :         }
; 668  :         else {
; 669  :             // TODO Logging
; 670  :         }
; 671  :     }
; 672  :     else{
; 673  :         // TODO Logging
; 674  :     }
; 675  :     return(0); 

  00a76	33 c0		 xor	 eax, eax

; 676  : }

  00a78	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00a80	48 33 cc	 xor	 rcx, rsp
  00a83	e8 00 00 00 00	 call	 __security_check_cookie
  00a88	48 81 c4 00 05
	00 00		 add	 rsp, 1280		; 00000500H
  00a8f	5f		 pop	 rdi
  00a90	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
Red$1 = 0
Green$2 = 1
Blue$3 = 2
X$4 = 4
Y$5 = 8
tv76 = 12
Pixel$6 = 16
Row$ = 24
Buffer$ = 48
XOffset$ = 56
YOffset$ = 64
?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z PROC ; RenderWeirdGradient

; 26   : RenderWeirdGradient(game_offscreen_buffer *Buffer, int XOffset, int YOffset) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 27   :     // TODO lets see which is better
; 28   :     uint8 *Row = (uint8 *)Buffer->Memory;

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 29   :     for( int Y = 0 ; Y < Buffer->Height ; ++Y ) {

  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$5[rsp], 0
  00027	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  00029	8b 44 24 08	 mov	 eax, DWORD PTR Y$5[rsp]
  0002d	ff c0		 inc	 eax
  0002f	89 44 24 08	 mov	 DWORD PTR Y$5[rsp], eax
$LN4@RenderWeir:
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00038	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0003b	39 44 24 08	 cmp	 DWORD PTR Y$5[rsp], eax
  0003f	0f 8d e3 00 00
	00		 jge	 $LN3@RenderWeir

; 30   :         uint32 *Pixel = (uint32 *)Row;

  00045	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  0004a	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 31   :         for( int X = 0 ; X < Buffer->Width ; ++X ) {

  0004f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$4[rsp], 0
  00057	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  00059	8b 44 24 04	 mov	 eax, DWORD PTR X$4[rsp]
  0005d	ff c0		 inc	 eax
  0005f	89 44 24 04	 mov	 DWORD PTR X$4[rsp], eax
$LN7@RenderWeir:
  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00068	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0006b	39 44 24 04	 cmp	 DWORD PTR X$4[rsp], eax
  0006f	0f 8d 95 00 00
	00		 jge	 $LN6@RenderWeir

; 32   :             uint8 Blue = (X - XOffset);

  00075	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  00079	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  0007d	2b c8		 sub	 ecx, eax
  0007f	8b c1		 mov	 eax, ecx
  00081	88 44 24 02	 mov	 BYTE PTR Blue$3[rsp], al

; 33   :             uint8 Green = (Y + YOffset);

  00085	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  00089	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  0008d	03 c8		 add	 ecx, eax
  0008f	8b c1		 mov	 eax, ecx
  00091	88 44 24 01	 mov	 BYTE PTR Green$2[rsp], al

; 34   :             uint8 Red = ((X - (XOffset/4))*(Y + (YOffset/4))/8);

  00095	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  00099	99		 cdq
  0009a	83 e2 03	 and	 edx, 3
  0009d	03 c2		 add	 eax, edx
  0009f	c1 f8 02	 sar	 eax, 2
  000a2	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  000a6	2b c8		 sub	 ecx, eax
  000a8	8b c1		 mov	 eax, ecx
  000aa	89 44 24 0c	 mov	 DWORD PTR tv76[rsp], eax
  000ae	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  000b2	99		 cdq
  000b3	83 e2 03	 and	 edx, 3
  000b6	03 c2		 add	 eax, edx
  000b8	c1 f8 02	 sar	 eax, 2
  000bb	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  000bf	03 c8		 add	 ecx, eax
  000c1	8b c1		 mov	 eax, ecx
  000c3	8b 4c 24 0c	 mov	 ecx, DWORD PTR tv76[rsp]
  000c7	0f af c8	 imul	 ecx, eax
  000ca	8b c1		 mov	 eax, ecx
  000cc	99		 cdq
  000cd	83 e2 07	 and	 edx, 7
  000d0	03 c2		 add	 eax, edx
  000d2	c1 f8 03	 sar	 eax, 3
  000d5	88 04 24	 mov	 BYTE PTR Red$1[rsp], al

; 35   :             *Pixel++ = ((Red << 16) | (Green << 8) | Blue);

  000d8	0f b6 04 24	 movzx	 eax, BYTE PTR Red$1[rsp]
  000dc	c1 e0 10	 shl	 eax, 16
  000df	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR Green$2[rsp]
  000e4	c1 e1 08	 shl	 ecx, 8
  000e7	0b c1		 or	 eax, ecx
  000e9	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR Blue$3[rsp]
  000ee	0b c1		 or	 eax, ecx
  000f0	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Pixel$6[rsp]
  000f5	89 01		 mov	 DWORD PTR [rcx], eax
  000f7	48 8b 44 24 10	 mov	 rax, QWORD PTR Pixel$6[rsp]
  000fc	48 83 c0 04	 add	 rax, 4
  00100	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 36   :         }

  00105	e9 4f ff ff ff	 jmp	 $LN5@RenderWeir
$LN6@RenderWeir:

; 37   :         Row += Buffer->Pitch;

  0010a	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  0010f	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  00113	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  00118	48 03 c8	 add	 rcx, rax
  0011b	48 8b c1	 mov	 rax, rcx
  0011e	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 38   :     }

  00123	e9 01 ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 39   : }

  00128	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012c	c3		 ret	 0
?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z ENDP ; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
SampleValue$1 = 32
ToneVolume$ = 36
SampleIndex$2 = 40
SineValue$3 = 44
WavePeriod$ = 48
SampleOut$ = 56
SoundBuffer$ = 80
ToneHz$ = 88
?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z PROC ; GameOutputSound

; 6    : GameOutputSound(game_sound_output_buffer *SoundBuffer, int ToneHz) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7    :     local_persist real32 tSine;
; 8    :     int16 ToneVolume = 3000;

  0000d	b8 b8 0b 00 00	 mov	 eax, 3000		; 00000bb8H
  00012	66 89 44 24 24	 mov	 WORD PTR ToneVolume$[rsp], ax

; 9    :     // int ToneHz = 256;
; 10   :     int WavePeriod = SoundBuffer->SamplesPerSecond/ToneHz;

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0001c	8b 00		 mov	 eax, DWORD PTR [rax]
  0001e	99		 cdq
  0001f	f7 7c 24 58	 idiv	 DWORD PTR ToneHz$[rsp]
  00023	89 44 24 30	 mov	 DWORD PTR WavePeriod$[rsp], eax

; 11   :     
; 12   :     int16 *SampleOut = SoundBuffer->Samples; 

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0002c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00030	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 13   :     for(int SampleIndex = 0; SampleIndex < SoundBuffer->SampleCount; ++SampleIndex) {

  00035	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR SampleIndex$2[rsp], 0
  0003d	eb 0a		 jmp	 SHORT $LN4@GameOutput
$LN2@GameOutput:
  0003f	8b 44 24 28	 mov	 eax, DWORD PTR SampleIndex$2[rsp]
  00043	ff c0		 inc	 eax
  00045	89 44 24 28	 mov	 DWORD PTR SampleIndex$2[rsp], eax
$LN4@GameOutput:
  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0004e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00051	39 44 24 28	 cmp	 DWORD PTR SampleIndex$2[rsp], eax
  00055	0f 8d 99 00 00
	00		 jge	 $LN3@GameOutput

; 14   :         real32 SineValue = sinf(tSine);

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
  00063	e8 00 00 00 00	 call	 sinf
  00068	f3 0f 11 44 24
	2c		 movss	 DWORD PTR SineValue$3[rsp], xmm0

; 15   :         int16 SampleValue = (int16)(SineValue * ToneVolume);

  0006e	0f bf 44 24 24	 movsx	 eax, WORD PTR ToneVolume$[rsp]
  00073	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00077	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR SineValue$3[rsp]
  0007d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00081	0f 28 c1	 movaps	 xmm0, xmm1
  00084	f3 0f 2c c0	 cvttss2si eax, xmm0
  00088	66 89 44 24 20	 mov	 WORD PTR SampleValue$1[rsp], ax

; 16   :         *SampleOut++ = SampleValue;

  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  00092	0f b7 4c 24 20	 movzx	 ecx, WORD PTR SampleValue$1[rsp]
  00097	66 89 08	 mov	 WORD PTR [rax], cx
  0009a	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  0009f	48 83 c0 02	 add	 rax, 2
  000a3	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 17   :         *SampleOut++ = SampleValue;

  000a8	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  000ad	0f b7 4c 24 20	 movzx	 ecx, WORD PTR SampleValue$1[rsp]
  000b2	66 89 08	 mov	 WORD PTR [rax], cx
  000b5	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  000ba	48 83 c0 02	 add	 rax, 2
  000be	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 18   : 
; 19   :         tSine += 2.0f*Pi32*1.0f/(real32)WavePeriod;

  000c3	f3 0f 2a 44 24
	30		 cvtsi2ss xmm0, DWORD PTR WavePeriod$[rsp]
  000c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  000d1	f3 0f 5e c8	 divss	 xmm1, xmm0
  000d5	0f 28 c1	 movaps	 xmm0, xmm1
  000d8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
  000e0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000e4	0f 28 c1	 movaps	 xmm0, xmm1
  000e7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA, xmm0

; 20   :     }

  000ef	e9 4b ff ff ff	 jmp	 $LN2@GameOutput
$LN3@GameOutput:

; 21   : }

  000f4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f8	c3		 ret	 0
?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z ENDP ; GameOutputSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
Input0$ = 32
Input$ = 64
Buffer$ = 72
SoundBuffer$ = 80
?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z PROC ; GameUpdateAndRender

; 46   : GameUpdateAndRender(game_input *Input, game_offscreen_buffer *Buffer, game_sound_output_buffer *SoundBuffer) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 47   :     local_persist int XOffset = 0;
; 48   :     local_persist int YOffset = 0;
; 49   :     local_persist int ToneHz = 256;
; 50   : 
; 51   :     game_controller_input *Input0 = &Input->Controllers[0];

  00013	b8 54 00 00 00	 mov	 eax, 84			; 00000054H
  00018	48 6b c0 00	 imul	 rax, rax, 0
  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Input$[rsp]
  00021	48 03 c8	 add	 rcx, rax
  00024	48 8b c1	 mov	 rax, rcx
  00027	48 89 44 24 20	 mov	 QWORD PTR Input0$[rsp], rax

; 52   :     if(Input0->IsAnalogue) {

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR Input0$[rsp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	74 47		 je	 SHORT $LN2@GameUpdate

; 53   :         // Use analogue movement tuning
; 54   :         XOffset += (int)(4.0f*(Input0->EndX));

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR Input0$[rsp]
  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00043	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [rax+28]
  00048	f3 0f 2c c0	 cvttss2si eax, xmm0
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?XOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
  00052	03 c8		 add	 ecx, eax
  00054	8b c1		 mov	 eax, ecx
  00056	89 05 00 00 00
	00		 mov	 DWORD PTR ?XOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA, eax

; 55   :         ToneHz = 256 + (int)(128.0f*(Input0->EndY));

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR Input0$[rsp]
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00069	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [rax+32]
  0006e	f3 0f 2c c0	 cvttss2si eax, xmm0
  00072	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00077	89 05 00 00 00
	00		 mov	 DWORD PTR ?ToneHz@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA, eax
$LN2@GameUpdate:

; 56   :     }
; 57   :     else {
; 58   :         // Use digital movement tuning
; 59   :     }
; 60   : 
; 61   :     if(Input0->Down.EndedDown) {

  0007d	48 8b 44 24 20	 mov	 rax, QWORD PTR Input0$[rsp]
  00082	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00086	74 0e		 je	 SHORT $LN4@GameUpdate

; 62   :         YOffset += 1;

  00088	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?YOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
  0008e	ff c0		 inc	 eax
  00090	89 05 00 00 00
	00		 mov	 DWORD PTR ?YOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA, eax
$LN4@GameUpdate:

; 63   :     }
; 64   : 
; 65   : 
; 66   : 
; 67   :     // TODO Allow sample offsets here for more robust platform
; 68   :     GameOutputSound(SoundBuffer, ToneHz);

  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ToneHz@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
  0009c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR SoundBuffer$[rsp]
  000a1	e8 00 00 00 00	 call	 ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z ; GameOutputSound

; 69   :     RenderWeirdGradient(Buffer, XOffset, YOffset);

  000a6	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?YOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
  000ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?XOffset@?1??GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z@4HA
  000b3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z ; RenderWeirdGradient

; 70   : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
?GameUpdateAndRender@@YAXPEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z ENDP ; GameUpdateAndRender
_TEXT	ENDS
END
