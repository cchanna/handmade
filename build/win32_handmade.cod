; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z	; XInputGetStateStub
PUBLIC	?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
CONST	SEGMENT
$SG87766 DB	'xinput1_4.dll', 00H
	ORG $+2
$SG87768 DB	'xinput9_1_0.dll', 00H
$SG87770 DB	'xinput1_3.dll', 00H
	ORG $+2
$SG87773 DB	'XInputGetState', 00H
	ORG $+1
$SG87775 DB	'XInputSetState', 00H
	ORG $+1
$SG87797 DB	'dsound.dll', 00H
	ORG $+1
$SG87885 DB	0aH, 00H
	ORG $+2
$SG87799 DB	'DirectSoundCreate', 00H
	ORG $+2
$SG87880 DB	'Space ', 00H
	ORG $+5
$SG87808 DB	'Primary buffer format was set.', 0aH, 00H
$SG87810 DB	'Secondary buffer created successfuly', 0aH, 00H
	ORG $+2
$SG87853 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG87882 DB	'IsDown ', 00H
$SG87884 DB	'WasDown ', 00H
	ORG $+7
$SG87888 DB	'WM_PAINT', 0aH, 00H
	ORG $+6
$SG3960	DB	'p:\handmade\code\handmade.cpp', 00H
	ORG $+2
$SG3962	DB	'p:/handmade/data/test.out', 00H
	ORG $+6
$SG88020 DB	'HandmadeHeroWindowClass', 00H
$SG88023 DB	'Handmade Hero', 00H
CONST	ENDS
_DATA	SEGMENT
?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA DQ FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetState_
?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA DQ FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetState_
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	?SafeTruncateUInt64@@YAI_K@Z			; SafeTruncateUInt64
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@412e848000000000
PUBLIC	__real@43000000
PUBLIC	__real@43f0000000000000
PUBLIC	__real@46fffe00
PUBLIC	__real@47000000
EXTRN	sinf:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSizeEx:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
_BSS	SEGMENT
?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA DD 01H DUP (?) ; `GameOutputSound'::`2'::tSine
_BSS	ENDS
_BSS	SEGMENT
?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
	ALIGN	8

?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA DQ 01H DUP (?) ; GlobalSecondaryBuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z DD imagerel ?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z
	DD	imagerel ?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z+307
	DD	imagerel $unwind$?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z
$pdata$?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z DD imagerel ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z
	DD	imagerel ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z+41
	DD	imagerel $unwind$?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z
$pdata$?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z DD imagerel ?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z
	DD	imagerel ?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z+184
	DD	imagerel $unwind$?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z
$pdata$?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z DD imagerel ?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z
	DD	imagerel ?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z+414
	DD	imagerel $unwind$?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z
$pdata$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z DD imagerel ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z
	DD	imagerel ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z+249
	DD	imagerel $unwind$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z
$pdata$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z DD imagerel ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z+301
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z
$pdata$WinMain DD imagerel $LN36
	DD	imagerel $LN36+2943
	DD	imagerel $unwind$WinMain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SafeTruncateUInt64@@YAI_K@Z DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$?SafeTruncateUInt64@@YAI_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Wind32LoadXInput@@YAXXZ DD imagerel ?Wind32LoadXInput@@YAXXZ
	DD	imagerel ?Wind32LoadXInput@@YAXXZ+185
	DD	imagerel $unwind$?Wind32LoadXInput@@YAXXZ
$pdata$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
	DD	imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z+554
	DD	imagerel $unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
	DD	imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+269
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z+159
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z+819
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z DD imagerel ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z
	DD	imagerel ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z+271
	DD	imagerel $unwind$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z
$pdata$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z DD imagerel ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z
	DD	imagerel ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z+539
	DD	imagerel $unwind$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z
$pdata$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z DD imagerel ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z
	DD	imagerel ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z+120
	DD	imagerel $unwind$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z
pdata	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+19
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SafeTruncateUInt64@@YAI_K@Z DD 010901H
	DD	02209H
xdata	ENDS
xdata	SEGMENT
$unwind$?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z DD 010901H
	DD	04209H
$unwind$?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z DD 011201H
	DD	0c212H
$unwind$?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z DD 031a01H
	DD	07016e21aH
	DD	06015H
$unwind$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z DD 010d01H
	DD	0820dH
$unwind$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$WinMain DD 032e19H
	DD	0a6011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0520H
$unwind$?Wind32LoadXInput@@YAXXZ DD 010401H
	DD	06204H
$unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD 032819H
	DD	0180116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD 011801H
	DD	0e218H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01b011aH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z DD 010901H
	DD	0e209H
$unwind$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z DD 021a01H
	DD	011011aH
$unwind$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z DD 011701H
	DD	02217H
xdata	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv67 = 0
tv72 = 4
XInputButtonState$ = 32
OldState$ = 40
NewState$ = 48
ButtonBit$ = 56
?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z PROC ; Win32ProcessXInputDigitalButton

; 502  : Win32ProcessXInputDigitalButton(DWORD XInputButtonState, game_button_state *OldState, game_button_state *NewState, DWORD ButtonBit) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 18	 sub	 rsp, 24

; 503  :     NewState->EndedDown = (XInputButtonState & ButtonBit) == ButtonBit;

  00017	8b 44 24 38	 mov	 eax, DWORD PTR ButtonBit$[rsp]
  0001b	8b 4c 24 20	 mov	 ecx, DWORD PTR XInputButtonState$[rsp]
  0001f	23 c8		 and	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	3b 44 24 38	 cmp	 eax, DWORD PTR ButtonBit$[rsp]
  00027	75 09		 jne	 SHORT $LN3@Win32Proce
  00029	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  00030	eb 07		 jmp	 SHORT $LN4@Win32Proce
$LN3@Win32Proce:
  00032	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@Win32Proce:
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR NewState$[rsp]
  0003e	8b 0c 24	 mov	 ecx, DWORD PTR tv67[rsp]
  00041	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 504  :     NewState->HalfTransitionCount = (OldState->EndedDown != NewState->EndedDown) ? 1 : 0;  

  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR OldState$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR NewState$[rsp]
  0004e	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00051	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  00054	74 0a		 je	 SHORT $LN5@Win32Proce
  00056	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN6@Win32Proce
$LN5@Win32Proce:
  00060	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN6@Win32Proce:
  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR NewState$[rsp]
  0006d	8b 4c 24 04	 mov	 ecx, DWORD PTR tv72[rsp]
  00071	89 08		 mov	 DWORD PTR [rax], ecx

; 505  : }

  00073	48 83 c4 18	 add	 rsp, 24
  00077	c3		 ret	 0
?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ENDP ; Win32ProcessXInputDigitalButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DestSample$1 = 64
SourceSample$2 = 72
SampleIndex$3 = 80
SampleIndex$4 = 84
Region2Size$ = 88
Region1Size$ = 92
Region1SampleCount$5 = 96
Region2SampleCount$6 = 100
Region2$ = 104
Region1$ = 112
SoundOutput$ = 144
ByteToLock$ = 152
BytesToWrite$ = 160
SourceBuffer$ = 168
?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z PROC ; win32FillSoundBuffer

; 465  : win32FillSoundBuffer(win32_sound_output *SoundOutput, DWORD ByteToLock, DWORD BytesToWrite, game_sound_output_buffer *SourceBuffer) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 466  :     VOID *Region1;
; 467  :     DWORD Region1Size;
; 468  :     VOID *Region2;
; 469  :     DWORD Region2Size;
; 470  :     if(SUCCEEDED(GlobalSecondaryBuffer->Lock(

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00024	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0002c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Region2Size$[rsp]
  00031	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00036	48 8d 4c 24 68	 lea	 rcx, QWORD PTR Region2$[rsp]
  0003b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00040	48 8d 4c 24 5c	 lea	 rcx, QWORD PTR Region1Size$[rsp]
  00045	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004a	4c 8d 4c 24 70	 lea	 r9, QWORD PTR Region1$[rsp]
  0004f	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR BytesToWrite$[rsp]
  00057	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR ByteToLock$[rsp]
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00065	ff 50 58	 call	 QWORD PTR [rax+88]
  00068	85 c0		 test	 eax, eax
  0006a	0f 8c a3 01 00
	00		 jl	 $LN8@win32FillS

; 471  :         ByteToLock, BytesToWrite,
; 472  :         &Region1, &Region1Size,
; 473  :         &Region2, &Region2Size,
; 474  :         0
; 475  :     ))) {
; 476  :         //TODO Assert that Region1Size/Region2Size is valid
; 477  :         //TODO Collapse these to loops
; 478  :         DWORD Region1SampleCount = Region1Size/SoundOutput->BytesPerSample;

  00070	33 d2		 xor	 edx, edx
  00072	8b 44 24 5c	 mov	 eax, DWORD PTR Region1Size$[rsp]
  00076	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  0007e	f7 71 08	 div	 DWORD PTR [rcx+8]
  00081	89 44 24 60	 mov	 DWORD PTR Region1SampleCount$5[rsp], eax

; 479  :         int16 *DestSample = (int16 *)Region1;

  00085	48 8b 44 24 70	 mov	 rax, QWORD PTR Region1$[rsp]
  0008a	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax

; 480  :         int16 *SourceSample = SourceBuffer->Samples;

  0008f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR SourceBuffer$[rsp]
  00097	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0009b	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 481  :         for(DWORD SampleIndex = 0; SampleIndex < Region1SampleCount; ++SampleIndex) {

  000a0	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR SampleIndex$4[rsp], 0
  000a8	eb 0a		 jmp	 SHORT $LN4@win32FillS
$LN2@win32FillS:
  000aa	8b 44 24 54	 mov	 eax, DWORD PTR SampleIndex$4[rsp]
  000ae	ff c0		 inc	 eax
  000b0	89 44 24 54	 mov	 DWORD PTR SampleIndex$4[rsp], eax
$LN4@win32FillS:
  000b4	8b 44 24 60	 mov	 eax, DWORD PTR Region1SampleCount$5[rsp]
  000b8	39 44 24 54	 cmp	 DWORD PTR SampleIndex$4[rsp], eax
  000bc	73 75		 jae	 SHORT $LN3@win32FillS

; 482  :             *DestSample++ = *SourceSample++;

  000be	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  000c8	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  000cb	66 89 08	 mov	 WORD PTR [rax], cx
  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000d3	48 83 c0 02	 add	 rax, 2
  000d7	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  000dc	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  000e1	48 83 c0 02	 add	 rax, 2
  000e5	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 483  :             *DestSample++ = *SourceSample++;

  000ea	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000ef	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  000f4	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  000f7	66 89 08	 mov	 WORD PTR [rax], cx
  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000ff	48 83 c0 02	 add	 rax, 2
  00103	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  00108	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  0010d	48 83 c0 02	 add	 rax, 2
  00111	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 484  :             ++SoundOutput->RunningSampleIndex;

  00116	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR SoundOutput$[rsp]
  0011e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00121	ff c0		 inc	 eax
  00123	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  0012b	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 485  :         }

  0012e	e9 77 ff ff ff	 jmp	 $LN2@win32FillS
$LN3@win32FillS:

; 486  : 
; 487  :         DWORD Region2SampleCount = Region2Size/SoundOutput->BytesPerSample;

  00133	33 d2		 xor	 edx, edx
  00135	8b 44 24 58	 mov	 eax, DWORD PTR Region2Size$[rsp]
  00139	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  00141	f7 71 08	 div	 DWORD PTR [rcx+8]
  00144	89 44 24 64	 mov	 DWORD PTR Region2SampleCount$6[rsp], eax

; 488  :         DestSample = (int16 *)Region2;

  00148	48 8b 44 24 68	 mov	 rax, QWORD PTR Region2$[rsp]
  0014d	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax

; 489  :         for(DWORD SampleIndex = 0; SampleIndex < Region2SampleCount; ++SampleIndex) {

  00152	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR SampleIndex$3[rsp], 0
  0015a	eb 0a		 jmp	 SHORT $LN7@win32FillS
$LN5@win32FillS:
  0015c	8b 44 24 50	 mov	 eax, DWORD PTR SampleIndex$3[rsp]
  00160	ff c0		 inc	 eax
  00162	89 44 24 50	 mov	 DWORD PTR SampleIndex$3[rsp], eax
$LN7@win32FillS:
  00166	8b 44 24 64	 mov	 eax, DWORD PTR Region2SampleCount$6[rsp]
  0016a	39 44 24 50	 cmp	 DWORD PTR SampleIndex$3[rsp], eax
  0016e	73 75		 jae	 SHORT $LN6@win32FillS

; 490  :             *DestSample++ = *SourceSample++;

  00170	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  00175	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  0017a	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  0017d	66 89 08	 mov	 WORD PTR [rax], cx
  00180	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  00185	48 83 c0 02	 add	 rax, 2
  00189	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  0018e	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  00193	48 83 c0 02	 add	 rax, 2
  00197	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 491  :             *DestSample++ = *SourceSample++;

  0019c	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  001a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  001a6	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  001a9	66 89 08	 mov	 WORD PTR [rax], cx
  001ac	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  001b1	48 83 c0 02	 add	 rax, 2
  001b5	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  001bf	48 83 c0 02	 add	 rax, 2
  001c3	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 492  :             ++SoundOutput->RunningSampleIndex;

  001c8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR SoundOutput$[rsp]
  001d0	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001d3	ff c0		 inc	 eax
  001d5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  001dd	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 493  :         }

  001e0	e9 77 ff ff ff	 jmp	 $LN5@win32FillS
$LN6@win32FillS:

; 494  : 
; 495  :         GlobalSecondaryBuffer->Unlock(Region1, Region1Size, Region2, Region2Size);

  001e5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001ec	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ef	8b 4c 24 58	 mov	 ecx, DWORD PTR Region2Size$[rsp]
  001f3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001f7	4c 8b 4c 24 68	 mov	 r9, QWORD PTR Region2$[rsp]
  001fc	44 8b 44 24 5c	 mov	 r8d, DWORD PTR Region1Size$[rsp]
  00201	48 8b 54 24 70	 mov	 rdx, QWORD PTR Region1$[rsp]
  00206	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0020d	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
$LN8@win32FillS:

; 496  :     }
; 497  : }

  00213	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0021a	c3		 ret	 0
?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z ENDP ; win32FillSoundBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
ByteIndex$1 = 64
ByteIndex$2 = 68
Region2Size$ = 72
Region1Size$ = 76
DestSample$3 = 80
Region2$ = 88
Region1$ = 96
SoundOutput$ = 128
?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z PROC	; win32ClearBuffer

; 438  : win32ClearBuffer(win32_sound_output *SoundOutput) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 439  :     VOID *Region1;
; 440  :     DWORD Region1Size;
; 441  :     VOID *Region2;
; 442  :     DWORD Region2Size;
; 443  :     if(SUCCEEDED(GlobalSecondaryBuffer->Lock(

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00010	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00013	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0001b	48 8d 4c 24 48	 lea	 rcx, QWORD PTR Region2Size$[rsp]
  00020	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00025	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Region2$[rsp]
  0002a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002f	48 8d 4c 24 4c	 lea	 rcx, QWORD PTR Region1Size$[rsp]
  00034	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00039	4c 8d 4c 24 60	 lea	 r9, QWORD PTR Region1$[rsp]
  0003e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  00046	44 8b 41 0c	 mov	 r8d, DWORD PTR [rcx+12]
  0004a	33 d2		 xor	 edx, edx
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00053	ff 50 58	 call	 QWORD PTR [rax+88]
  00056	85 c0		 test	 eax, eax
  00058	0f 8c ac 00 00
	00		 jl	 $LN8@win32Clear

; 444  :         0, SoundOutput->SecondaryBufferSize,
; 445  :         &Region1, &Region1Size,
; 446  :         &Region2, &Region2Size,
; 447  :         0
; 448  :     ))) {
; 449  :         // TODO Assert that Region1Size/Region2Sizse is valid
; 450  :         uint8 *DestSample = (uint8 *)Region1;

  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR Region1$[rsp]
  00063	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 451  :         for(DWORD ByteIndex = 0; ByteIndex < Region1Size; ++ByteIndex) {

  00068	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR ByteIndex$1[rsp], 0
  00070	eb 0a		 jmp	 SHORT $LN4@win32Clear
$LN2@win32Clear:
  00072	8b 44 24 40	 mov	 eax, DWORD PTR ByteIndex$1[rsp]
  00076	ff c0		 inc	 eax
  00078	89 44 24 40	 mov	 DWORD PTR ByteIndex$1[rsp], eax
$LN4@win32Clear:
  0007c	8b 44 24 4c	 mov	 eax, DWORD PTR Region1Size$[rsp]
  00080	39 44 24 40	 cmp	 DWORD PTR ByteIndex$1[rsp], eax
  00084	73 17		 jae	 SHORT $LN3@win32Clear

; 452  :             *DestSample++ = 0;

  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  0008b	c6 00 00	 mov	 BYTE PTR [rax], 0
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  00093	48 ff c0	 inc	 rax
  00096	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 453  :         }

  0009b	eb d5		 jmp	 SHORT $LN2@win32Clear
$LN3@win32Clear:

; 454  : 
; 455  :         DestSample = (uint8 *)Region2;

  0009d	48 8b 44 24 58	 mov	 rax, QWORD PTR Region2$[rsp]
  000a2	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 456  :         for(DWORD ByteIndex = 0; ByteIndex < Region2Size; ++ByteIndex) {

  000a7	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ByteIndex$2[rsp], 0
  000af	eb 0a		 jmp	 SHORT $LN7@win32Clear
$LN5@win32Clear:
  000b1	8b 44 24 44	 mov	 eax, DWORD PTR ByteIndex$2[rsp]
  000b5	ff c0		 inc	 eax
  000b7	89 44 24 44	 mov	 DWORD PTR ByteIndex$2[rsp], eax
$LN7@win32Clear:
  000bb	8b 44 24 48	 mov	 eax, DWORD PTR Region2Size$[rsp]
  000bf	39 44 24 44	 cmp	 DWORD PTR ByteIndex$2[rsp], eax
  000c3	73 17		 jae	 SHORT $LN6@win32Clear

; 457  :             *DestSample++ = 0;

  000c5	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  000ca	c6 00 00	 mov	 BYTE PTR [rax], 0
  000cd	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  000d2	48 ff c0	 inc	 rax
  000d5	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 458  :         }

  000da	eb d5		 jmp	 SHORT $LN5@win32Clear
$LN6@win32Clear:

; 459  : 
; 460  :         GlobalSecondaryBuffer->Unlock(Region1, Region1Size, Region2, Region2Size);

  000dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	8b 4c 24 48	 mov	 ecx, DWORD PTR Region2Size$[rsp]
  000ea	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ee	4c 8b 4c 24 58	 mov	 r9, QWORD PTR Region2$[rsp]
  000f3	44 8b 44 24 4c	 mov	 r8d, DWORD PTR Region1Size$[rsp]
  000f8	48 8b 54 24 60	 mov	 rdx, QWORD PTR Region1$[rsp]
  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00104	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
$LN8@win32Clear:

; 461  :     }
; 462  : }

  0010a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0010e	c3		 ret	 0
?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z ENDP	; win32ClearBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
VKCode$1 = 32
WasDown$2 = 36
IsDown$3 = 37
tv64 = 40
tv72 = 44
tv68 = 48
Result$ = 56
Dimension$4 = 64
Y$5 = 72
Width$6 = 76
$T7 = 80
X$8 = 88
DeviceContext$9 = 96
Height$10 = 104
Paint$11 = 112
__$ArrayPad$ = 192
Window$ = 224
Message$ = 232
WParam$ = 240
LParam$ = 248
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 341  : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 342  :     LRESULT Result = 0;

  0002c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 343  : 
; 344  :     switch(Message)

  00035	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 28 10	 cmp	 DWORD PTR tv64[rsp], 16
  00045	77 25		 ja	 SHORT $LN43@Win32MainW
  00047	83 7c 24 28 10	 cmp	 DWORD PTR tv64[rsp], 16
  0004c	74 5f		 je	 SHORT $LN5@Win32MainW
  0004e	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  00053	74 76		 je	 SHORT $LN7@Win32MainW
  00055	83 7c 24 28 05	 cmp	 DWORD PTR tv64[rsp], 5
  0005a	74 4c		 je	 SHORT $LN4@Win32MainW
  0005c	83 7c 24 28 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00061	0f 84 d8 01 00
	00		 je	 $LN36@Win32MainW
  00067	e9 80 02 00 00	 jmp	 $LN37@Win32MainW
$LN43@Win32MainW:
  0006c	83 7c 24 28 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00071	74 46		 je	 SHORT $LN6@Win32MainW
  00073	81 7c 24 28 ff
	00 00 00	 cmp	 DWORD PTR tv64[rsp], 255 ; 000000ffH
  0007b	0f 86 6b 02 00
	00		 jbe	 $LN37@Win32MainW
  00081	81 7c 24 28 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  00089	76 4c		 jbe	 SHORT $LN8@Win32MainW
  0008b	81 7c 24 28 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  00093	0f 86 53 02 00
	00		 jbe	 $LN37@Win32MainW
  00099	81 7c 24 28 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  000a1	76 34		 jbe	 SHORT $LN8@Win32MainW
  000a3	e9 44 02 00 00	 jmp	 $LN37@Win32MainW
$LN4@Win32MainW:

; 345  :     {
; 346  :         case WM_SIZE: {
; 347  :         } break;

  000a8	e9 69 02 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 348  : 
; 349  :         case WM_CLOSE: {
; 350  :             // TODO Handle this with a message to the user?
; 351  :             GlobalRunning = false;

  000ad	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 352  :         } break;

  000b4	e9 5d 02 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 353  : 
; 354  :         case WM_ACTIVATEAPP: {
; 355  :             OutputDebugStringA("WM_ACTIVATEAPP\n");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87853
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 356  :         } break;

  000c6	e9 4b 02 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 357  : 
; 358  :         case WM_DESTROY: {
; 359  :             // TODO Handle this as an error - recreate window?
; 360  :             GlobalRunning = false;

  000cb	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 361  :         } break;

  000d2	e9 3f 02 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 362  : 
; 363  :         case WM_SYSKEYDOWN: 
; 364  :         case WM_SYSKEYUP:
; 365  :         case WM_KEYDOWN:
; 366  :         case WM_KEYUP: {
; 367  :             uint32 VKCode = WParam;

  000d7	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR WParam$[rsp]
  000de	89 44 24 20	 mov	 DWORD PTR VKCode$1[rsp], eax

; 368  :             bool WasDown = ((LParam & (1 << 30)) != 0);

  000e2	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  000ea	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  000f0	48 85 c0	 test	 rax, rax
  000f3	74 0a		 je	 SHORT $LN39@Win32MainW
  000f5	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  000fd	eb 08		 jmp	 SHORT $LN40@Win32MainW
$LN39@Win32MainW:
  000ff	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN40@Win32MainW:
  00107	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv68[rsp]
  0010c	88 44 24 24	 mov	 BYTE PTR WasDown$2[rsp], al

; 369  :             bool IsDown = ((LParam & (1 << 31)) == 0);

  00110	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00118	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  0011e	48 85 c0	 test	 rax, rax
  00121	75 0a		 jne	 SHORT $LN41@Win32MainW
  00123	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0012b	eb 08		 jmp	 SHORT $LN42@Win32MainW
$LN41@Win32MainW:
  0012d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN42@Win32MainW:
  00135	0f b6 44 24 2c	 movzx	 eax, BYTE PTR tv72[rsp]
  0013a	88 44 24 25	 mov	 BYTE PTR IsDown$3[rsp], al

; 370  :             if(WasDown != IsDown) {

  0013e	0f b6 44 24 24	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  00143	0f b6 4c 24 25	 movzx	 ecx, BYTE PTR IsDown$3[rsp]
  00148	3b c1		 cmp	 eax, ecx
  0014a	0f 84 c9 00 00
	00		 je	 $LN9@Win32MainW

; 371  :                 if(VKCode == 'W') {

  00150	83 7c 24 20 57	 cmp	 DWORD PTR VKCode$1[rsp], 87 ; 00000057H
  00155	75 05		 jne	 SHORT $LN10@Win32MainW
  00157	e9 bd 00 00 00	 jmp	 $LN11@Win32MainW
$LN10@Win32MainW:

; 372  :                 }
; 373  :                 else if(VKCode == 'A') {

  0015c	83 7c 24 20 41	 cmp	 DWORD PTR VKCode$1[rsp], 65 ; 00000041H
  00161	75 05		 jne	 SHORT $LN12@Win32MainW
  00163	e9 b1 00 00 00	 jmp	 $LN13@Win32MainW
$LN12@Win32MainW:

; 374  :                 }
; 375  :                 else if(VKCode == 'S') {

  00168	83 7c 24 20 53	 cmp	 DWORD PTR VKCode$1[rsp], 83 ; 00000053H
  0016d	75 05		 jne	 SHORT $LN14@Win32MainW
  0016f	e9 a5 00 00 00	 jmp	 $LN15@Win32MainW
$LN14@Win32MainW:

; 376  :                 }
; 377  :                 else if(VKCode == 'D') {

  00174	83 7c 24 20 44	 cmp	 DWORD PTR VKCode$1[rsp], 68 ; 00000044H
  00179	75 05		 jne	 SHORT $LN16@Win32MainW
  0017b	e9 99 00 00 00	 jmp	 $LN17@Win32MainW
$LN16@Win32MainW:

; 378  :                 }
; 379  :                 else if(VKCode == 'Q') {

  00180	83 7c 24 20 51	 cmp	 DWORD PTR VKCode$1[rsp], 81 ; 00000051H
  00185	75 05		 jne	 SHORT $LN18@Win32MainW
  00187	e9 8d 00 00 00	 jmp	 $LN19@Win32MainW
$LN18@Win32MainW:

; 380  :                 }
; 381  :                 else if(VKCode == 'E') {

  0018c	83 7c 24 20 45	 cmp	 DWORD PTR VKCode$1[rsp], 69 ; 00000045H
  00191	75 05		 jne	 SHORT $LN20@Win32MainW
  00193	e9 81 00 00 00	 jmp	 $LN21@Win32MainW
$LN20@Win32MainW:

; 382  :                 }
; 383  :                 else if(VKCode == VK_UP) {

  00198	83 7c 24 20 26	 cmp	 DWORD PTR VKCode$1[rsp], 38 ; 00000026H
  0019d	75 02		 jne	 SHORT $LN22@Win32MainW
  0019f	eb 78		 jmp	 SHORT $LN23@Win32MainW
$LN22@Win32MainW:

; 384  :                 }
; 385  :                 else if(VKCode == VK_DOWN) {

  001a1	83 7c 24 20 28	 cmp	 DWORD PTR VKCode$1[rsp], 40 ; 00000028H
  001a6	75 02		 jne	 SHORT $LN24@Win32MainW
  001a8	eb 6f		 jmp	 SHORT $LN25@Win32MainW
$LN24@Win32MainW:

; 386  :                 }
; 387  :                 else if(VKCode == VK_LEFT) {

  001aa	83 7c 24 20 25	 cmp	 DWORD PTR VKCode$1[rsp], 37 ; 00000025H
  001af	75 02		 jne	 SHORT $LN26@Win32MainW
  001b1	eb 66		 jmp	 SHORT $LN27@Win32MainW
$LN26@Win32MainW:

; 388  :                 }
; 389  :                 else if(VKCode == VK_RIGHT) {

  001b3	83 7c 24 20 27	 cmp	 DWORD PTR VKCode$1[rsp], 39 ; 00000027H
  001b8	75 02		 jne	 SHORT $LN28@Win32MainW
  001ba	eb 5d		 jmp	 SHORT $LN29@Win32MainW
$LN28@Win32MainW:

; 390  :                 }
; 391  :                 else if(VKCode == VK_ESCAPE) {

  001bc	83 7c 24 20 1b	 cmp	 DWORD PTR VKCode$1[rsp], 27
  001c1	75 09		 jne	 SHORT $LN30@Win32MainW

; 392  :                     GlobalRunning = false;

  001c3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
  001ca	eb 4d		 jmp	 SHORT $LN31@Win32MainW
$LN30@Win32MainW:

; 393  :                 }
; 394  :                 else if(VKCode == VK_SPACE) {

  001cc	83 7c 24 20 20	 cmp	 DWORD PTR VKCode$1[rsp], 32 ; 00000020H
  001d1	75 46		 jne	 SHORT $LN32@Win32MainW

; 395  :                     OutputDebugStringA("Space ");

  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87880
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 396  :                     if(IsDown) {

  001e0	0f b6 44 24 25	 movzx	 eax, BYTE PTR IsDown$3[rsp]
  001e5	85 c0		 test	 eax, eax
  001e7	74 0d		 je	 SHORT $LN33@Win32MainW

; 397  :                         OutputDebugStringA("IsDown ");

  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87882
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN33@Win32MainW:

; 398  :                     }
; 399  :                     if(WasDown) {

  001f6	0f b6 44 24 24	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  001fb	85 c0		 test	 eax, eax
  001fd	74 0d		 je	 SHORT $LN34@Win32MainW

; 400  :                         OutputDebugStringA("WasDown ");

  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87884
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN34@Win32MainW:

; 401  :                     }
; 402  :                     OutputDebugStringA("\n");

  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87885
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN32@Win32MainW:
$LN31@Win32MainW:
$LN29@Win32MainW:
$LN27@Win32MainW:
$LN25@Win32MainW:
$LN23@Win32MainW:
$LN21@Win32MainW:
$LN19@Win32MainW:
$LN17@Win32MainW:
$LN15@Win32MainW:
$LN13@Win32MainW:
$LN11@Win32MainW:
$LN9@Win32MainW:

; 403  :                 }
; 404  : 
; 405  :             }
; 406  : 
; 407  :             if((LParam & (1 << 29)) && VKCode == VK_F4) { //Alt+F4

  00219	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00221	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00227	48 85 c0	 test	 rax, rax
  0022a	74 0e		 je	 SHORT $LN35@Win32MainW
  0022c	83 7c 24 20 73	 cmp	 DWORD PTR VKCode$1[rsp], 115 ; 00000073H
  00231	75 07		 jne	 SHORT $LN35@Win32MainW

; 408  :                 GlobalRunning = false;

  00233	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN35@Win32MainW:

; 409  :             }
; 410  : 
; 411  :         } break;

  0023a	e9 d7 00 00 00	 jmp	 $LN2@Win32MainW
$LN36@Win32MainW:

; 412  : 
; 413  :         case WM_PAINT: {
; 414  :             OutputDebugStringA("WM_PAINT\n");

  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87888
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 415  :             PAINTSTRUCT Paint;
; 416  :             HDC DeviceContext = BeginPaint(Window, &Paint);

  0024c	48 8d 54 24 70	 lea	 rdx, QWORD PTR Paint$11[rsp]
  00251	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  0025f	48 89 44 24 60	 mov	 QWORD PTR DeviceContext$9[rsp], rax

; 417  :             int X = Paint.rcPaint.left;

  00264	8b 44 24 7c	 mov	 eax, DWORD PTR Paint$11[rsp+12]
  00268	89 44 24 58	 mov	 DWORD PTR X$8[rsp], eax

; 418  :             int Y = Paint.rcPaint.top;

  0026c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  00273	89 44 24 48	 mov	 DWORD PTR Y$5[rsp], eax

; 419  :             int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  00277	8b 44 24 7c	 mov	 eax, DWORD PTR Paint$11[rsp+12]
  0027b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+20]
  00282	2b c8		 sub	 ecx, eax
  00284	8b c1		 mov	 eax, ecx
  00286	89 44 24 4c	 mov	 DWORD PTR Width$6[rsp], eax

; 420  :             int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  0028a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  00291	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+24]
  00298	2b c8		 sub	 ecx, eax
  0029a	8b c1		 mov	 eax, ecx
  0029c	89 44 24 68	 mov	 DWORD PTR Height$10[rsp], eax

; 421  : 
; 422  : 
; 423  :             win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  002a0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  002a8	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  002ad	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  002b2	48 8b 44 24 50	 mov	 rax, QWORD PTR $T7[rsp]
  002b7	48 89 44 24 40	 mov	 QWORD PTR Dimension$4[rsp], rax

; 424  :             Win32DisplayBufferInWindow(&GlobalBackbuffer, DeviceContext, Dimension.Width, Dimension.Height);

  002bc	44 8b 4c 24 44	 mov	 r9d, DWORD PTR Dimension$4[rsp+4]
  002c1	44 8b 44 24 40	 mov	 r8d, DWORD PTR Dimension$4[rsp]
  002c6	48 8b 54 24 60	 mov	 rdx, QWORD PTR DeviceContext$9[rsp]
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  002d2	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 425  :             EndPaint(Window, &Paint);

  002d7	48 8d 54 24 70	 lea	 rdx, QWORD PTR Paint$11[rsp]
  002dc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  002e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 426  :         } break;

  002ea	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN37@Win32MainW:

; 427  : 
; 428  :         default: {
; 429  :             Result = DefWindowProcA(Window, Message, WParam, LParam);

  002ec	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  002f4	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  002fc	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00303	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0030b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  00311	48 89 44 24 38	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 430  :         } break;
; 431  :     }
; 432  : 
; 433  :     return(Result);

  00316	48 8b 44 24 38	 mov	 rax, QWORD PTR Result$[rsp]

; 434  : } 

  0031b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00323	48 33 cc	 xor	 rcx, rsp
  00326	e8 00 00 00 00	 call	 __security_check_cookie
  0032b	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00332	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Buffer$ = 128
DeviceContext$ = 136
WindowWidth$ = 144
WindowHeight$ = 152
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z PROC ; Win32DisplayBufferInWindow

; 321  : ) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 322  :     // TODO aspect ration correction
; 323  :     StretchDIBits(

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  00020	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00028	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00030	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00035	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00041	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00046	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004e	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005d	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00060	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00064	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00074	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007f	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 324  :         DeviceContext,
; 325  :         0, 0, WindowWidth, WindowHeight,
; 326  :         0, 0, Buffer->Width, Buffer->Height,
; 327  :         Buffer->Memory,
; 328  :         &Buffer->Info,
; 329  :         DIB_RGB_COLORS, SRCCOPY
; 330  :     );
; 331  : }

  0009a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009e	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 286  : Win32ResizeDIBSection(win32_offscreen_buffer *Buffer, int Width, int Height) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 287  :     // TODO Bulletproof this
; 288  :     // Maybe don't free first, free after, then free first if that fails
; 289  : 
; 290  :     if(Buffer->Memory) {

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 291  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 292  :     }
; 293  : 
; 294  :     Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 295  :     Buffer->Height = Height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 296  :     Buffer->BytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 297  : 
; 298  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 299  :     Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 300  :     Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 301  :     Buffer->Info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 302  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 303  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 304  : 
; 305  :     // NOTE Thanks Chris Hecker for clarifying StretchDIBits/BitBlt
; 306  :     int BitmapMemorySize = (Buffer->Width*Buffer->Height)*Buffer->BytesPerPixel;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000bb	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000c4	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c8	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 307  :     Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000d1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d7	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000ed	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 308  : 
; 309  :     // TODO probably clear to black
; 310  : 
; 311  :     Buffer->Pitch = Width*Buffer->BytesPerPixel;

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f6	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  000fa	0f af 48 44	 imul	 ecx, DWORD PTR [rax+68]
  000fe	8b c1		 mov	 eax, ecx
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00105	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 312  : }

  00108	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010c	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 269  : internal win32_window_dimension Win32GetWindowDimension(HWND Window) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 270  :     win32_window_dimension Result;
; 271  : 
; 272  :     RECT ClientRect;
; 273  :     GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 274  :     Result.Width = ClientRect.right - ClientRect.left;

  00028	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 275  :     Result.Height = ClientRect.bottom - ClientRect.top;

  00038	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 276  : 
; 277  :     return(Result);

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 278  : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DirectSound$1 = 32
Error$2 = 40
Error$3 = 44
DirectSoundCreate$4 = 48
PrimaryBuffer$5 = 56
DSoundLibrary$ = 64
BufferDescription$6 = 72
WaveFormat$7 = 112
BufferDescription$8 = 136
__$ArrayPad$ = 176
Window$ = 208
SamplesPerSecond$ = 216
BufferSize$ = 224
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z PROC		; Win32InitDSound

; 208  : Win32InitDSound(HWND Window, int32 SamplesPerSecond, int32 BufferSize) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 209  :     HMODULE DSoundLibrary = LoadLibraryA("dsound.dll");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87797
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00035	48 89 44 24 40	 mov	 QWORD PTR DSoundLibrary$[rsp], rax

; 210  : 
; 211  :     if(DSoundLibrary) {

  0003a	48 83 7c 24 40
	00		 cmp	 QWORD PTR DSoundLibrary$[rsp], 0
  00040	0f 84 cb 01 00
	00		 je	 $LN2@Win32InitD

; 212  :         direct_sound_create *DirectSoundCreate = (direct_sound_create *)GetProcAddress(DSoundLibrary, "DirectSoundCreate");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87799
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR DSoundLibrary$[rsp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00058	48 89 44 24 30	 mov	 QWORD PTR DirectSoundCreate$4[rsp], rax

; 213  :         // TODO double-check that this works on XP -- 7 or 8?
; 214  :         LPDIRECTSOUND DirectSound;
; 215  :         if(DirectSoundCreate && SUCCEEDED(DirectSoundCreate(0, &DirectSound, 0))) {

  0005d	48 83 7c 24 30
	00		 cmp	 QWORD PTR DirectSoundCreate$4[rsp], 0
  00063	0f 84 a8 01 00
	00		 je	 $LN3@Win32InitD
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	48 8d 54 24 20	 lea	 rdx, QWORD PTR DirectSound$1[rsp]
  00071	33 c9		 xor	 ecx, ecx
  00073	ff 54 24 30	 call	 QWORD PTR DirectSoundCreate$4[rsp]
  00077	85 c0		 test	 eax, eax
  00079	0f 8c 92 01 00
	00		 jl	 $LN3@Win32InitD

; 216  :             WAVEFORMATEX WaveFormat = {};

  0007f	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  00084	48 8b f8	 mov	 rdi, rax
  00087	33 c0		 xor	 eax, eax
  00089	b9 12 00 00 00	 mov	 ecx, 18
  0008e	f3 aa		 rep stosb

; 217  :             WaveFormat.wFormatTag = WAVE_FORMAT_PCM;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	66 89 44 24 70	 mov	 WORD PTR WaveFormat$7[rsp], ax

; 218  :             WaveFormat.nChannels = 2;

  0009a	b8 02 00 00 00	 mov	 eax, 2
  0009f	66 89 44 24 72	 mov	 WORD PTR WaveFormat$7[rsp+2], ax

; 219  :             WaveFormat.nSamplesPerSec = SamplesPerSecond;

  000a4	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR SamplesPerSecond$[rsp]
  000ab	89 44 24 74	 mov	 DWORD PTR WaveFormat$7[rsp+4], eax

; 220  :             WaveFormat.wBitsPerSample = 16;

  000af	b8 10 00 00 00	 mov	 eax, 16
  000b4	66 89 44 24 7e	 mov	 WORD PTR WaveFormat$7[rsp+14], ax

; 221  :             WaveFormat.nBlockAlign = (WaveFormat.nChannels*WaveFormat.wBitsPerSample) / 8;

  000b9	0f b7 44 24 72	 movzx	 eax, WORD PTR WaveFormat$7[rsp+2]
  000be	0f b7 4c 24 7e	 movzx	 ecx, WORD PTR WaveFormat$7[rsp+14]
  000c3	0f af c1	 imul	 eax, ecx
  000c6	99		 cdq
  000c7	83 e2 07	 and	 edx, 7
  000ca	03 c2		 add	 eax, edx
  000cc	c1 f8 03	 sar	 eax, 3
  000cf	66 89 44 24 7c	 mov	 WORD PTR WaveFormat$7[rsp+12], ax

; 222  :             WaveFormat.nAvgBytesPerSec = WaveFormat.nSamplesPerSec*WaveFormat.nBlockAlign;

  000d4	0f b7 44 24 7c	 movzx	 eax, WORD PTR WaveFormat$7[rsp+12]
  000d9	8b 4c 24 74	 mov	 ecx, DWORD PTR WaveFormat$7[rsp+4]
  000dd	0f af c8	 imul	 ecx, eax
  000e0	8b c1		 mov	 eax, ecx
  000e2	89 44 24 78	 mov	 DWORD PTR WaveFormat$7[rsp+8], eax

; 223  :             WaveFormat.cbSize = 0;

  000e6	33 c0		 xor	 eax, eax
  000e8	66 89 84 24 80
	00 00 00	 mov	 WORD PTR WaveFormat$7[rsp+16], ax

; 224  : 
; 225  :             if(SUCCEEDED(DirectSound->SetCooperativeLevel(Window, DSSCL_PRIORITY))) {

  000f0	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	41 b8 02 00 00
	00		 mov	 r8d, 2
  000fe	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR Window$[rsp]
  00106	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  0010b	ff 50 30	 call	 QWORD PTR [rax+48]
  0010e	85 c0		 test	 eax, eax
  00110	0f 8c 86 00 00
	00		 jl	 $LN5@Win32InitD

; 226  :                 DSBUFFERDESC BufferDescription = {0};

  00116	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 0
  00121	48 8d 84 24 8c
	00 00 00	 lea	 rax, QWORD PTR BufferDescription$8[rsp+4]
  00129	48 8b f8	 mov	 rdi, rax
  0012c	33 c0		 xor	 eax, eax
  0012e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00133	f3 aa		 rep stosb

; 227  :                 BufferDescription.dwSize = sizeof(BufferDescription);

  00135	c7 84 24 88 00
	00 00 28 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 40 ; 00000028H

; 228  :                 BufferDescription.dwFlags = DSBCAPS_PRIMARYBUFFER;

  00140	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp+4], 1

; 229  :                 // TODO DSBCAPS_GLOBALFOCUS?
; 230  : 
; 231  :                 LPDIRECTSOUNDBUFFER PrimaryBuffer;
; 232  : 
; 233  :                 if (SUCCEEDED(DirectSound->CreateSoundBuffer(&BufferDescription, &PrimaryBuffer, 0))) {

  0014b	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  00150	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00153	45 33 c9	 xor	 r9d, r9d
  00156	4c 8d 44 24 38	 lea	 r8, QWORD PTR PrimaryBuffer$5[rsp]
  0015b	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR BufferDescription$8[rsp]
  00163	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  00168	ff 50 18	 call	 QWORD PTR [rax+24]
  0016b	85 c0		 test	 eax, eax
  0016d	7c 2d		 jl	 SHORT $LN7@Win32InitD

; 234  :                     HRESULT Error = PrimaryBuffer->SetFormat(&WaveFormat);

  0016f	48 8b 44 24 38	 mov	 rax, QWORD PTR PrimaryBuffer$5[rsp]
  00174	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00177	48 8d 54 24 70	 lea	 rdx, QWORD PTR WaveFormat$7[rsp]
  0017c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR PrimaryBuffer$5[rsp]
  00181	ff 50 70	 call	 QWORD PTR [rax+112]
  00184	89 44 24 2c	 mov	 DWORD PTR Error$3[rsp], eax

; 235  :                     if(SUCCEEDED(Error)) {

  00188	83 7c 24 2c 00	 cmp	 DWORD PTR Error$3[rsp], 0
  0018d	7c 0d		 jl	 SHORT $LN9@Win32InitD

; 236  :                         OutputDebugStringA("Primary buffer format was set.\n");

  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87808
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN9@Win32InitD:
$LN7@Win32InitD:
$LN5@Win32InitD:

; 237  :                     }
; 238  :                     else {
; 239  :                         // TODO Diagnostic
; 240  :                     }
; 241  :                 }
; 242  :                 else {
; 243  :                     // TODO Diagnostic
; 244  :                 }
; 245  :             }
; 246  :             else {
; 247  :                 // TODO Diagnostic
; 248  :             }
; 249  :             // TODO DSBCAPS_GETCURENTPOSITION2?
; 250  :             DSBUFFERDESC BufferDescription = {0};

  0019c	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 0
  001a4	48 8d 44 24 4c	 lea	 rax, QWORD PTR BufferDescription$6[rsp+4]
  001a9	48 8b f8	 mov	 rdi, rax
  001ac	33 c0		 xor	 eax, eax
  001ae	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001b3	f3 aa		 rep stosb

; 251  :             BufferDescription.dwSize = sizeof(BufferDescription);

  001b5	c7 44 24 48 28
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 40 ; 00000028H

; 252  :             BufferDescription.dwFlags = 0;

  001bd	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp+4], 0

; 253  :             BufferDescription.dwBufferBytes = BufferSize;

  001c5	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR BufferSize$[rsp]
  001cc	89 44 24 50	 mov	 DWORD PTR BufferDescription$6[rsp+8], eax

; 254  :             BufferDescription.lpwfxFormat = &WaveFormat;

  001d0	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  001d5	48 89 44 24 58	 mov	 QWORD PTR BufferDescription$6[rsp+16], rax

; 255  :             HRESULT Error = DirectSound->CreateSoundBuffer(&BufferDescription, &GlobalSecondaryBuffer, 0);

  001da	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  001df	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e2	45 33 c9	 xor	 r9d, r9d
  001e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001ec	48 8d 54 24 48	 lea	 rdx, QWORD PTR BufferDescription$6[rsp]
  001f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  001f6	ff 50 18	 call	 QWORD PTR [rax+24]
  001f9	89 44 24 28	 mov	 DWORD PTR Error$2[rsp], eax

; 256  : 
; 257  :             if(SUCCEEDED(Error)) {

  001fd	83 7c 24 28 00	 cmp	 DWORD PTR Error$2[rsp], 0
  00202	7c 0d		 jl	 SHORT $LN11@Win32InitD

; 258  :                 OutputDebugStringA("Secondary buffer created successfuly\n");

  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87810
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN11@Win32InitD:
$LN3@Win32InitD:
$LN2@Win32InitD:

; 259  :             }
; 260  :         }
; 261  :         else {
; 262  :             // TODO Diagnositc
; 263  :         }
; 264  :     }
; 265  : }

  00211	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00219	48 33 cc	 xor	 rcx, rsp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00228	5f		 pop	 rdi
  00229	c3		 ret	 0
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ENDP		; Win32InitDSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
XInputLibrary$ = 32
?Wind32LoadXInput@@YAXXZ PROC				; Wind32LoadXInput

; 180  : Wind32LoadXInput(void) {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 181  :     // TODO Test on windows 8
; 182  :     HMODULE XInputLibrary = LoadLibraryA("xinput1_4.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87766
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 183  :     if(!XInputLibrary)

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	75 12		 jne	 SHORT $LN2@Wind32Load

; 184  :     {
; 185  :         // TODO(casey): Diagnostic
; 186  :         XInputLibrary = LoadLibraryA("xinput9_1_0.dll");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87768
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0002b	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN2@Wind32Load:

; 187  :     }
; 188  :     if(!XInputLibrary) {

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00036	75 12		 jne	 SHORT $LN3@Wind32Load

; 189  :         // TODO Diagnostic
; 190  :         XInputLibrary = LoadLibraryA("xinput1_3.dll");

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87770
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00045	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN3@Wind32Load:

; 191  :     }
; 192  :     if(XInputLibrary) {

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00050	74 62		 je	 SHORT $LN4@Wind32Load

; 193  :         XInputGetState = (x_input_get_state *)GetProcAddress(XInputLibrary, "XInputGetState" );

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87773
  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00064	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax

; 194  :         if(!XInputGetState) {XInputGetState = XInputGetStateStub;}

  0006b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, 0
  00073	75 0e		 jne	 SHORT $LN6@Wind32Load
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetStateStub
  0007c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax
$LN6@Wind32Load:

; 195  :         XInputSetState = (x_input_set_state *)GetProcAddress(XInputLibrary, "XInputSetState" );

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87775
  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00095	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax

; 196  :         if(!XInputSetState) {XInputSetState = XInputSetStateStub;}

  0009c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, 0
  000a4	75 0e		 jne	 SHORT $LN7@Wind32Load
  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
  000ad	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax
$LN7@Wind32Load:
$LN4@Wind32Load:

; 197  : 
; 198  :         // TODO Diagnostic
; 199  :     }
; 200  :     else {
; 201  :         // TODO Diagnostic
; 202  :     }
; 203  : }

  000b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b8	c3		 ret	 0
?Wind32LoadXInput@@YAXXZ ENDP				; Wind32LoadXInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
;	COMDAT ?SafeTruncateUInt64@@YAI_K@Z
_TEXT	SEGMENT
Result$ = 0
Value$ = 32
?SafeTruncateUInt64@@YAI_K@Z PROC			; SafeTruncateUInt64, COMDAT

; 88   : SafeTruncateUInt64(uint64 Value) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 89   :     Assert(Value <= 0xFFFFFFFF);

  00009	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0000e	48 39 44 24 20	 cmp	 QWORD PTR Value$[rsp], rax
  00013	76 0b		 jbe	 SHORT $LN2@SafeTrunca
  00015	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@SafeTrunca:

; 90   :     uint32 Result = (uint32)Value;

  00020	8b 44 24 20	 mov	 eax, DWORD PTR Value$[rsp]
  00024	89 04 24	 mov	 DWORD PTR Result$[rsp], eax

; 91   :     return(Result);

  00027	8b 04 24	 mov	 eax, DWORD PTR Result$[rsp]

; 92   : }

  0002a	48 83 c4 18	 add	 rsp, 24
  0002e	c3		 ret	 0
?SafeTruncateUInt64@@YAI_K@Z ENDP			; SafeTruncateUInt64
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pVibration$ = 16
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z PROC	; XInputSetStateStub

; 77   : X_INPUT_SET_STATE(XInputSetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 78   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 79   : }

  0000e	c3		 ret	 0
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ENDP	; XInputSetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z PROC	; XInputGetStateStub

; 68   : X_INPUT_GET_STATE(XInputGetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 69   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 70   : }

  0000e	c3		 ret	 0
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ENDP	; XInputGetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv247 = 96
tv242 = 97
tv237 = 98
Pad$1 = 104
BytesToWrite$2 = 112
NewController$3 = 120
ByteToLock$4 = 128
ControllerIndex$5 = 132
TargetCursor$6 = 136
Y$7 = 140
X$8 = 144
OldController$9 = 152
MaxControllerCount$10 = 160
Down$11 = 164
Left$12 = 165
Up$13 = 166
Right$14 = 167
PlayCursor$15 = 168
SoundIsValid$16 = 172
Window$17 = 176
NewInput$18 = 184
tv295 = 192
tv303 = 196
WriteCursor$19 = 200
tv311 = 204
tv319 = 208
tv327 = 212
tv287 = 216
OldInput$20 = 224
LastCycleCount$21 = 232
CounterElapsed$22 = 240
Samples$23 = 248
SoundBuffer$24 = 256
EndCounter$25 = 272
PerfCountFrequency$ = 280
LastCounter$26 = 288
Dimension$27 = 296
EndCycleCount$28 = 304
GameMemory$29 = 312
DeviceContext$30 = 352
CyclesElapsed$31 = 360
PerfCountFrequencyResult$ = 368
Temp$32 = 376
$T33 = 384
TotalSize$34 = 392
BaseAddress$35 = 400
XOffset$36 = 408
YOffset$37 = 412
Buffer$38 = 416
MCPF$39 = 440
FPS$40 = 448
MSPerFrame$41 = 456
WindowClass$ = 464
Message$42 = 544
SoundOutput$43 = 592
ControllerState$44 = 616
Input$45 = 640
__$ArrayPad$ = 1312
Instance$ = 1344
PrevInstance$ = 1352
CmdLine$ = 1360
ShowCode$ = 1368
WinMain	PROC

; 515  : ) {

$LN36:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 30 05
	00 00		 sub	 rsp, 1328		; 00000530H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 20
	05 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 516  :     LARGE_INTEGER PerfCountFrequencyResult;
; 517  :     QueryPerformanceFrequency(&PerfCountFrequencyResult);

  0002e	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 518  :     int64 PerfCountFrequency = PerfCountFrequencyResult.QuadPart;

  0003c	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR PerfCountFrequencyResult$[rsp]
  00044	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR PerfCountFrequency$[rsp], rax

; 519  : 
; 520  :     Wind32LoadXInput();

  0004c	e8 00 00 00 00	 call	 ?Wind32LoadXInput@@YAXXZ ; Wind32LoadXInput

; 521  : 
; 522  :     WNDCLASSA WindowClass = {};

  00051	48 8d 84 24 d0
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00059	48 8b f8	 mov	 rdi, rax
  0005c	33 c0		 xor	 eax, eax
  0005e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00063	f3 aa		 rep stosb

; 523  : 
; 524  :     Win32ResizeDIBSection(&GlobalBackbuffer, 1280, 720);

  00065	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  0006b	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00077	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 525  :     
; 526  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0007c	c7 84 24 d0 01
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 527  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  0008e	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 528  :     WindowClass.hInstance = Instance;

  00096	48 8b 84 24 40
	05 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  0009e	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 529  : //    WindowClass.hIcon;
; 530  :     WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG88020
  000ad	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 531  : 
; 532  : 
; 533  :     if (RegisterClass(&WindowClass)) {

  000b5	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000c3	0f b7 c0	 movzx	 eax, ax
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 96 0a 00
	00		 je	 $LN9@WinMain

; 534  :         HWND Window = CreateWindowExA(

  000ce	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000d7	48 8b 84 24 40
	05 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000df	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000e4	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000ed	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000f6	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000fe	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  00106	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  0010e	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  00116	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  0011c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG88023
  00123	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0012b	33 c9		 xor	 ecx, ecx
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00133	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR Window$17[rsp], rax

; 535  :             0,
; 536  :             WindowClass.lpszClassName,
; 537  :             "Handmade Hero",
; 538  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 539  :             CW_USEDEFAULT,
; 540  :             CW_USEDEFAULT,
; 541  :             CW_USEDEFAULT,
; 542  :             CW_USEDEFAULT,
; 543  :             0,
; 544  :             0,
; 545  :             Instance,
; 546  :             0
; 547  :         );
; 548  :         if(Window){

  0013b	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR Window$17[rsp], 0
  00144	0f 84 1a 0a 00
	00		 je	 $LN11@WinMain

; 549  :             HDC DeviceContext = GetDC(Window);

  0014a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00158	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR DeviceContext$30[rsp], rax

; 550  : 
; 551  :             // Graphics test
; 552  :             int XOffset = 0;

  00160	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR XOffset$36[rsp], 0

; 553  :             int YOffset = 0;

  0016b	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR YOffset$37[rsp], 0

; 554  : 
; 555  :             // Sound Test
; 556  :             win32_sound_output SoundOutput = {};

  00176	48 8d 84 24 50
	02 00 00	 lea	 rax, QWORD PTR SoundOutput$43[rsp]
  0017e	48 8b f8	 mov	 rdi, rax
  00181	33 c0		 xor	 eax, eax
  00183	b9 18 00 00 00	 mov	 ecx, 24
  00188	f3 aa		 rep stosb

; 557  :             SoundOutput.SamplesPerSecond = 48000;

  0018a	c7 84 24 50 02
	00 00 80 bb 00
	00		 mov	 DWORD PTR SoundOutput$43[rsp], 48000 ; 0000bb80H

; 558  :             // SoundOutput.ToneHz = 256;
; 559  :             // SoundOutput.ToneVolume = 3000;
; 560  :             SoundOutput.RunningSampleIndex = 0;

  00195	c7 84 24 54 02
	00 00 00 00 00
	00		 mov	 DWORD PTR SoundOutput$43[rsp+4], 0

; 561  :             // SoundOutput.WavePeriod = SoundOutput.SamplesPerSecond/SoundOutput.ToneHz;
; 562  :             SoundOutput.BytesPerSample = sizeof(int16)*2;

  001a0	c7 84 24 58 02
	00 00 04 00 00
	00		 mov	 DWORD PTR SoundOutput$43[rsp+8], 4

; 563  :             SoundOutput.LatencySampleCount = SoundOutput.SamplesPerSecond / 15;

  001ab	8b 84 24 50 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$43[rsp]
  001b2	99		 cdq
  001b3	b9 0f 00 00 00	 mov	 ecx, 15
  001b8	f7 f9		 idiv	 ecx
  001ba	89 84 24 64 02
	00 00		 mov	 DWORD PTR SoundOutput$43[rsp+20], eax

; 564  :             SoundOutput.SecondaryBufferSize = SoundOutput.SamplesPerSecond*SoundOutput.BytesPerSample;

  001c1	8b 84 24 50 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$43[rsp]
  001c8	0f af 84 24 58
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$43[rsp+8]
  001d0	89 84 24 5c 02
	00 00		 mov	 DWORD PTR SoundOutput$43[rsp+12], eax

; 565  :             Win32InitDSound(Window, SoundOutput.SamplesPerSecond, SoundOutput.SecondaryBufferSize);

  001d7	44 8b 84 24 5c
	02 00 00	 mov	 r8d, DWORD PTR SoundOutput$43[rsp+12]
  001df	8b 94 24 50 02
	00 00		 mov	 edx, DWORD PTR SoundOutput$43[rsp]
  001e6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  001ee	e8 00 00 00 00	 call	 ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ; Win32InitDSound

; 566  :             win32ClearBuffer(&SoundOutput);

  001f3	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR SoundOutput$43[rsp]
  001fb	e8 00 00 00 00	 call	 ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z ; win32ClearBuffer

; 567  :             GlobalSecondaryBuffer->Play(0, 0, DSBPLAY_LOOPING);

  00200	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00207	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0020a	41 b9 01 00 00
	00		 mov	 r9d, 1
  00210	45 33 c0	 xor	 r8d, r8d
  00213	33 d2		 xor	 edx, edx
  00215	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0021c	ff 50 60	 call	 QWORD PTR [rax+96]

; 568  :             // bool SoundIsPlaying = true;
; 569  : 
; 570  :             GlobalRunning = true;

  0021f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1

; 571  : 
; 572  :             // TODO Pool with bitmap VirtualAlloc
; 573  :             int16 *Samples = (int16 *)VirtualAlloc(0, SoundOutput.SecondaryBufferSize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  00226	48 63 84 24 5c
	02 00 00	 movsxd	 rax, DWORD PTR SoundOutput$43[rsp+12]
  0022e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00234	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0023a	48 8b d0	 mov	 rdx, rax
  0023d	33 c9		 xor	 ecx, ecx
  0023f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00245	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR Samples$23[rsp], rax

; 574  : 
; 575  : #if HANDMADE_INTERNAL
; 576  :             LPVOID BaseAddress = 0;

  0024d	48 c7 84 24 90
	01 00 00 00 00
	00 00		 mov	 QWORD PTR BaseAddress$35[rsp], 0

; 577  : #else
; 578  :             LPVOID BaseAddress = Terabytes(2);
; 579  : #endif
; 580  : 
; 581  :             game_memory GameMemory = {};

  00259	48 8d 84 24 38
	01 00 00	 lea	 rax, QWORD PTR GameMemory$29[rsp]
  00261	48 8b f8	 mov	 rdi, rax
  00264	33 c0		 xor	 eax, eax
  00266	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0026b	f3 aa		 rep stosb

; 582  :             GameMemory.PermanentStorageSize = Megabytes(64);

  0026d	48 c7 84 24 40
	01 00 00 00 00
	00 04		 mov	 QWORD PTR GameMemory$29[rsp+8], 67108864 ; 04000000H

; 583  :             GameMemory.TransientStorageSize = Gigabytes(4);

  00279	48 b8 00 00 00
	00 01 00 00 00	 mov	 rax, 4294967296		; 0000000100000000H
  00283	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR GameMemory$29[rsp+24], rax

; 584  :             uint64 TotalSize = GameMemory.PermanentStorageSize + GameMemory.TransientStorageSize;

  0028b	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR GameMemory$29[rsp+24]
  00293	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR GameMemory$29[rsp+8]
  0029b	48 03 c8	 add	 rcx, rax
  0029e	48 8b c1	 mov	 rax, rcx
  002a1	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR TotalSize$34[rsp], rax

; 585  :             GameMemory.PermanentStorage = VirtualAlloc(BaseAddress, TotalSize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  002a9	41 b9 04 00 00
	00		 mov	 r9d, 4
  002af	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  002b5	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR TotalSize$34[rsp]
  002bd	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR BaseAddress$35[rsp]
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  002cb	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR GameMemory$29[rsp+16], rax

; 586  :             GameMemory.TransientStorage = ((uint8 *)GameMemory.PermanentStorage + GameMemory.PermanentStorageSize);

  002d3	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR GameMemory$29[rsp+8]
  002db	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR GameMemory$29[rsp+16]
  002e3	48 03 c8	 add	 rcx, rax
  002e6	48 8b c1	 mov	 rax, rcx
  002e9	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR GameMemory$29[rsp+32], rax

; 587  :             
; 588  : 
; 589  : 
; 590  :             if(Samples && GameMemory.PermanentStorage && GameMemory.TransientStorage) {

  002f1	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR Samples$23[rsp], 0
  002fa	0f 84 64 08 00
	00		 je	 $LN13@WinMain
  00300	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR GameMemory$29[rsp+16], 0
  00309	0f 84 55 08 00
	00		 je	 $LN13@WinMain
  0030f	48 83 bc 24 58
	01 00 00 00	 cmp	 QWORD PTR GameMemory$29[rsp+32], 0
  00318	0f 84 46 08 00
	00		 je	 $LN13@WinMain

; 591  : 
; 592  : 
; 593  :                 game_input Input[2] = {};

  0031e	48 8d 84 24 80
	02 00 00	 lea	 rax, QWORD PTR Input$45[rsp]
  00326	48 8b f8	 mov	 rdi, rax
  00329	33 c0		 xor	 eax, eax
  0032b	b9 a0 02 00 00	 mov	 ecx, 672		; 000002a0H
  00330	f3 aa		 rep stosb

; 594  :                 game_input *NewInput = &Input[0];

  00332	b8 50 01 00 00	 mov	 eax, 336		; 00000150H
  00337	48 6b c0 00	 imul	 rax, rax, 0
  0033b	48 8d 84 04 80
	02 00 00	 lea	 rax, QWORD PTR Input$45[rsp+rax]
  00343	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR NewInput$18[rsp], rax

; 595  :                 game_input *OldInput = &Input[1];

  0034b	b8 50 01 00 00	 mov	 eax, 336		; 00000150H
  00350	48 6b c0 01	 imul	 rax, rax, 1
  00354	48 8d 84 04 80
	02 00 00	 lea	 rax, QWORD PTR Input$45[rsp+rax]
  0035c	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR OldInput$20[rsp], rax

; 596  : 
; 597  :                 LARGE_INTEGER LastCounter;
; 598  :                 QueryPerformanceCounter(&LastCounter);

  00364	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR LastCounter$26[rsp]
  0036c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 599  :                 int64 LastCycleCount = __rdtsc();

  00372	0f 31		 rdtsc
  00374	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00378	48 0b c2	 or	 rax, rdx
  0037b	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR LastCycleCount$21[rsp], rax
$LN2@WinMain:

; 600  : 
; 601  :                 // game loop begin
; 602  :                 while (GlobalRunning) {

  00383	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA
  0038a	85 c0		 test	 eax, eax
  0038c	0f 84 d2 07 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 603  : 
; 604  :                     MSG Message;
; 605  : 
; 606  :                     while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  00392	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0039a	45 33 c9	 xor	 r9d, r9d
  0039d	45 33 c0	 xor	 r8d, r8d
  003a0	33 d2		 xor	 edx, edx
  003a2	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR Message$42[rsp]
  003aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  003b0	85 c0		 test	 eax, eax
  003b2	74 2f		 je	 SHORT $LN5@WinMain

; 607  :                         if(Message.message == WM_QUIT) {

  003b4	83 bc 24 28 02
	00 00 12	 cmp	 DWORD PTR Message$42[rsp+8], 18
  003bc	75 07		 jne	 SHORT $LN15@WinMain

; 608  :                             GlobalRunning = false;

  003be	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN15@WinMain:

; 609  :                         }
; 610  : 
; 611  :                         // TODO Should we poll this more frequently
; 612  : 
; 613  :                         TranslateMessage(&Message);

  003c5	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR Message$42[rsp]
  003cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 614  :                         DispatchMessageA(&Message);

  003d3	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR Message$42[rsp]
  003db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 615  :                     }

  003e1	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 616  : 
; 617  :                     int MaxControllerCount = XUSER_MAX_COUNT;

  003e3	c7 84 24 a0 00
	00 00 04 00 00
	00		 mov	 DWORD PTR MaxControllerCount$10[rsp], 4

; 618  :                     if(MaxControllerCount = ArrayCount(NewInput->Controllers)) {

  003ee	c7 84 24 a0 00
	00 00 04 00 00
	00		 mov	 DWORD PTR MaxControllerCount$10[rsp], 4
  003f9	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR MaxControllerCount$10[rsp], 0
  00401	74 0b		 je	 SHORT $LN16@WinMain

; 619  :                         MaxControllerCount = ArrayCount(NewInput->Controllers);

  00403	c7 84 24 a0 00
	00 00 04 00 00
	00		 mov	 DWORD PTR MaxControllerCount$10[rsp], 4
$LN16@WinMain:

; 620  :                     }
; 621  :                     for(
; 622  :                         DWORD ControllerIndex = 0;

  0040e	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ControllerIndex$5[rsp], 0
  00419	eb 10		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:

; 624  :                         ++ControllerIndex

  0041b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR ControllerIndex$5[rsp]
  00422	ff c0		 inc	 eax
  00424	89 84 24 84 00
	00 00		 mov	 DWORD PTR ControllerIndex$5[rsp], eax
$LN8@WinMain:

; 623  :                         ControllerIndex < XUSER_MAX_COUNT;

  0042b	83 bc 24 84 00
	00 00 04	 cmp	 DWORD PTR ControllerIndex$5[rsp], 4
  00433	0f 83 aa 03 00
	00		 jae	 $LN7@WinMain

; 625  :                     ) {
; 626  :                         game_controller_input *OldController = &OldInput->Controllers[ControllerIndex];

  00439	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR ControllerIndex$5[rsp]
  00440	48 6b c0 54	 imul	 rax, rax, 84		; 00000054H
  00444	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR OldInput$20[rsp]
  0044c	48 03 c8	 add	 rcx, rax
  0044f	48 8b c1	 mov	 rax, rcx
  00452	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR OldController$9[rsp], rax

; 627  :                         game_controller_input *NewController = &NewInput->Controllers[ControllerIndex];

  0045a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR ControllerIndex$5[rsp]
  00461	48 6b c0 54	 imul	 rax, rax, 84		; 00000054H
  00465	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR NewInput$18[rsp]
  0046d	48 03 c8	 add	 rcx, rax
  00470	48 8b c1	 mov	 rax, rcx
  00473	48 89 44 24 78	 mov	 QWORD PTR NewController$3[rsp], rax

; 628  : 
; 629  : 
; 630  :                         XINPUT_STATE ControllerState;
; 631  :                         if(XInputGetState(ControllerIndex, &ControllerState) == ERROR_SUCCESS) {

  00478	48 8d 94 24 68
	02 00 00	 lea	 rdx, QWORD PTR ControllerState$44[rsp]
  00480	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR ControllerIndex$5[rsp]
  00487	ff 15 00 00 00
	00		 call	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA
  0048d	85 c0		 test	 eax, eax
  0048f	0f 85 49 03 00
	00		 jne	 $LN17@WinMain

; 632  :                             // NOTE Controller is plugged in
; 633  :                             // TODO See if ControllerState.dwPacketNumber increments
; 634  :                             XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  00495	48 8d 84 24 6c
	02 00 00	 lea	 rax, QWORD PTR ControllerState$44[rsp+4]
  0049d	48 89 44 24 68	 mov	 QWORD PTR Pad$1[rsp], rax

; 635  : 
; 636  :                             // TODO DPad
; 637  :                             bool Up = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);

  004a2	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  004a7	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004aa	83 e0 01	 and	 eax, 1
  004ad	88 84 24 a6 00
	00 00		 mov	 BYTE PTR Up$13[rsp], al

; 638  :                             bool Down = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);

  004b4	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  004b9	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004bc	83 e0 02	 and	 eax, 2
  004bf	85 c0		 test	 eax, eax
  004c1	74 07		 je	 SHORT $LN29@WinMain
  004c3	c6 44 24 62 01	 mov	 BYTE PTR tv237[rsp], 1
  004c8	eb 05		 jmp	 SHORT $LN30@WinMain
$LN29@WinMain:
  004ca	c6 44 24 62 00	 mov	 BYTE PTR tv237[rsp], 0
$LN30@WinMain:
  004cf	0f b6 44 24 62	 movzx	 eax, BYTE PTR tv237[rsp]
  004d4	88 84 24 a4 00
	00 00		 mov	 BYTE PTR Down$11[rsp], al

; 639  :                             bool Left = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);

  004db	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  004e0	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004e3	83 e0 04	 and	 eax, 4
  004e6	85 c0		 test	 eax, eax
  004e8	74 07		 je	 SHORT $LN31@WinMain
  004ea	c6 44 24 61 01	 mov	 BYTE PTR tv242[rsp], 1
  004ef	eb 05		 jmp	 SHORT $LN32@WinMain
$LN31@WinMain:
  004f1	c6 44 24 61 00	 mov	 BYTE PTR tv242[rsp], 0
$LN32@WinMain:
  004f6	0f b6 44 24 61	 movzx	 eax, BYTE PTR tv242[rsp]
  004fb	88 84 24 a5 00
	00 00		 mov	 BYTE PTR Left$12[rsp], al

; 640  :                             bool Right = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

  00502	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00507	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0050a	83 e0 08	 and	 eax, 8
  0050d	85 c0		 test	 eax, eax
  0050f	74 07		 je	 SHORT $LN33@WinMain
  00511	c6 44 24 60 01	 mov	 BYTE PTR tv247[rsp], 1
  00516	eb 05		 jmp	 SHORT $LN34@WinMain
$LN33@WinMain:
  00518	c6 44 24 60 00	 mov	 BYTE PTR tv247[rsp], 0
$LN34@WinMain:
  0051d	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv247[rsp]
  00522	88 84 24 a7 00
	00 00		 mov	 BYTE PTR Right$14[rsp], al

; 641  : 
; 642  :                             NewController->IsAnalogue = true;

  00529	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  0052e	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 643  :                             real32 X;
; 644  :                             if(Pad->sThumbLX < 0) {

  00534	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00539	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  0053d	85 c0		 test	 eax, eax
  0053f	7d 20		 jge	 SHORT $LN19@WinMain

; 645  :                                 X = (real32)Pad->sThumbLX / 32768.0f; 

  00541	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00546	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  0054a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0054e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47000000
  00556	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR X$8[rsp], xmm0

; 646  :                             }
; 647  :                             else {

  0055f	eb 1e		 jmp	 SHORT $LN20@WinMain
$LN19@WinMain:

; 648  :                                 X = (real32)Pad->sThumbLX / 32767.0f;

  00561	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00566	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  0056a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0056e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  00576	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR X$8[rsp], xmm0
$LN20@WinMain:

; 649  :                             }
; 650  : 
; 651  :                             real32 Y;
; 652  :                             if(Pad->sThumbLX < 0) {

  0057f	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00584	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00588	85 c0		 test	 eax, eax
  0058a	7d 20		 jge	 SHORT $LN21@WinMain

; 653  :                                 Y = (real32)Pad->sThumbLY / 32768.0f; 

  0058c	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  00591	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  00595	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00599	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47000000
  005a1	f3 0f 11 84 24
	8c 00 00 00	 movss	 DWORD PTR Y$7[rsp], xmm0

; 654  :                             }
; 655  :                             else {

  005aa	eb 1e		 jmp	 SHORT $LN22@WinMain
$LN21@WinMain:

; 656  :                                 Y = (real32)Pad->sThumbLY / 32767.0f;

  005ac	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$1[rsp]
  005b1	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  005b5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005b9	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  005c1	f3 0f 11 84 24
	8c 00 00 00	 movss	 DWORD PTR Y$7[rsp], xmm0
$LN22@WinMain:

; 657  :                             }
; 658  : 
; 659  :                             NewController->StartX = OldController->EndX;

  005ca	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  005cf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  005d7	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [rcx+28]
  005dc	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 660  :                             NewController->StartY = OldController->EndY;

  005e1	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  005e6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  005ee	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [rcx+32]
  005f3	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 661  : 
; 662  :                             // TODO Deadzones XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE
; 663  :                             // TODO Min/max macros
; 664  :                             NewController->MinX = NewController->MaxX = NewController->EndX = X;

  005f8	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  005fd	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR X$8[rsp]
  00606	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
  0060b	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  00610	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR X$8[rsp]
  00619	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
  0061e	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  00623	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR X$8[rsp]
  0062c	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 665  :                             NewController->MinY = NewController->MaxY = NewController->EndY = Y;

  00631	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  00636	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR Y$7[rsp]
  0063f	f3 0f 11 40 20	 movss	 DWORD PTR [rax+32], xmm0
  00644	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  00649	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR Y$7[rsp]
  00652	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0
  00657	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  0065c	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR Y$7[rsp]
  00665	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 666  : 
; 667  : 
; 668  : 
; 669  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Down, &NewController->Down, XINPUT_GAMEPAD_A);

  0066a	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  0066f	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00673	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  0067b	48 83 c1 2c	 add	 rcx, 44			; 0000002cH
  0067f	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  00684	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00687	89 94 24 d8 00
	00 00		 mov	 DWORD PTR tv287[rsp], edx
  0068e	41 b9 00 10 00
	00		 mov	 r9d, 4096		; 00001000H
  00694	4c 8b c0	 mov	 r8, rax
  00697	48 8b d1	 mov	 rdx, rcx
  0069a	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv287[rsp]
  006a1	8b c8		 mov	 ecx, eax
  006a3	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 670  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Right, &NewController->Right, XINPUT_GAMEPAD_B);

  006a8	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  006ad	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  006b1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  006b9	48 83 c1 3c	 add	 rcx, 60			; 0000003cH
  006bd	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  006c2	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  006c5	89 94 24 c0 00
	00 00		 mov	 DWORD PTR tv295[rsp], edx
  006cc	41 b9 00 20 00
	00		 mov	 r9d, 8192		; 00002000H
  006d2	4c 8b c0	 mov	 r8, rax
  006d5	48 8b d1	 mov	 rdx, rcx
  006d8	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv295[rsp]
  006df	8b c8		 mov	 ecx, eax
  006e1	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 671  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Left, &NewController->Left, XINPUT_GAMEPAD_X);

  006e6	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  006eb	48 83 c0 34	 add	 rax, 52			; 00000034H
  006ef	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  006f7	48 83 c1 34	 add	 rcx, 52			; 00000034H
  006fb	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  00700	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00703	89 94 24 c4 00
	00 00		 mov	 DWORD PTR tv303[rsp], edx
  0070a	41 b9 00 40 00
	00		 mov	 r9d, 16384		; 00004000H
  00710	4c 8b c0	 mov	 r8, rax
  00713	48 8b d1	 mov	 rdx, rcx
  00716	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv303[rsp]
  0071d	8b c8		 mov	 ecx, eax
  0071f	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 672  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Up, &NewController->Up, XINPUT_GAMEPAD_Y);

  00724	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  00729	48 83 c0 24	 add	 rax, 36			; 00000024H
  0072d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00735	48 83 c1 24	 add	 rcx, 36			; 00000024H
  00739	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  0073e	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00741	89 94 24 cc 00
	00 00		 mov	 DWORD PTR tv311[rsp], edx
  00748	41 b9 00 80 00
	00		 mov	 r9d, 32768		; 00008000H
  0074e	4c 8b c0	 mov	 r8, rax
  00751	48 8b d1	 mov	 rdx, rcx
  00754	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv311[rsp]
  0075b	8b c8		 mov	 ecx, eax
  0075d	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 673  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->LeftShoulder, &NewController->LeftShoulder, XINPUT_GAMEPAD_LEFT_SHOULDER);

  00762	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  00767	48 83 c0 44	 add	 rax, 68			; 00000044H
  0076b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00773	48 83 c1 44	 add	 rcx, 68			; 00000044H
  00777	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  0077c	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  0077f	89 94 24 d0 00
	00 00		 mov	 DWORD PTR tv319[rsp], edx
  00786	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  0078c	4c 8b c0	 mov	 r8, rax
  0078f	48 8b d1	 mov	 rdx, rcx
  00792	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv319[rsp]
  00799	8b c8		 mov	 ecx, eax
  0079b	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 674  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->RightShoulder, &NewController->RightShoulder, XINPUT_GAMEPAD_RIGHT_SHOULDER);

  007a0	48 8b 44 24 78	 mov	 rax, QWORD PTR NewController$3[rsp]
  007a5	48 83 c0 4c	 add	 rax, 76			; 0000004cH
  007a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  007b1	48 83 c1 4c	 add	 rcx, 76			; 0000004cH
  007b5	48 8b 54 24 68	 mov	 rdx, QWORD PTR Pad$1[rsp]
  007ba	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  007bd	89 94 24 d4 00
	00 00		 mov	 DWORD PTR tv327[rsp], edx
  007c4	41 b9 00 02 00
	00		 mov	 r9d, 512		; 00000200H
  007ca	4c 8b c0	 mov	 r8, rax
  007cd	48 8b d1	 mov	 rdx, rcx
  007d0	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv327[rsp]
  007d7	8b c8		 mov	 ecx, eax
  007d9	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton
$LN17@WinMain:

; 675  : 
; 676  :                             
; 677  : 
; 678  :                             // bool Start = (Pad->wButtons & XINPUT_GAMEPAD_START);
; 679  :                             // bool Back = (Pad->wButtons & XINPUT_GAMEPAD_BACK);
; 680  : 
; 681  :                             // if (AButton) {
; 682  :                             //     SoundOutput.ToneHz = 512 + (int32)256*(((real32)StickY / 30000.0f));
; 683  :                             //     SoundOutput.WavePeriod = SoundOutput.SamplesPerSecond/SoundOutput.ToneHz;
; 684  :                             // }
; 685  :                             // else {
; 686  :                             //     SoundOutput.ToneHz = 256;
; 687  :                             //     SoundOutput.WavePeriod = SoundOutput.SamplesPerSecond/SoundOutput.ToneHz;
; 688  :                             // }
; 689  :                         }
; 690  :                         else {
; 691  :                             // NOTE Controller is not available
; 692  :                         }
; 693  :                     }

  007de	e9 38 fc ff ff	 jmp	 $LN6@WinMain
$LN7@WinMain:

; 694  : 
; 695  :                     DWORD ByteToLock = 0;

  007e3	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ByteToLock$4[rsp], 0

; 696  :                     DWORD TargetCursor = 0;

  007ee	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR TargetCursor$6[rsp], 0

; 697  :                     DWORD BytesToWrite = 0;

  007f9	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR BytesToWrite$2[rsp], 0

; 698  :                     DWORD PlayCursor = 0;

  00801	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR PlayCursor$15[rsp], 0

; 699  :                     DWORD WriteCursor = 0;

  0080c	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR WriteCursor$19[rsp], 0

; 700  :                     bool32 SoundIsValid = false;

  00817	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR SoundIsValid$16[rsp], 0

; 701  :                     // TODO Tighten up sound logic so that we know where we should be 
; 702  :                     // writing to and can anticipate the time spent in the game update
; 703  :                     if(SUCCEEDED(GlobalSecondaryBuffer->GetCurrentPosition(&PlayCursor, &WriteCursor))) {

  00822	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00829	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0082c	4c 8d 84 24 c8
	00 00 00	 lea	 r8, QWORD PTR WriteCursor$19[rsp]
  00834	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR PlayCursor$15[rsp]
  0083c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00843	ff 50 20	 call	 QWORD PTR [rax+32]
  00846	85 c0		 test	 eax, eax
  00848	0f 8c c1 00 00
	00		 jl	 $LN23@WinMain

; 704  :                         ByteToLock = (SoundOutput.RunningSampleIndex*SoundOutput.BytesPerSample) % SoundOutput.SecondaryBufferSize;

  0084e	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$43[rsp+4]
  00855	0f af 84 24 58
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$43[rsp+8]
  0085d	33 d2		 xor	 edx, edx
  0085f	f7 b4 24 5c 02
	00 00		 div	 DWORD PTR SoundOutput$43[rsp+12]
  00866	8b c2		 mov	 eax, edx
  00868	89 84 24 80 00
	00 00		 mov	 DWORD PTR ByteToLock$4[rsp], eax

; 705  :                         TargetCursor = (PlayCursor + (SoundOutput.LatencySampleCount*SoundOutput.BytesPerSample)) % SoundOutput.SecondaryBufferSize;

  0086f	8b 84 24 64 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$43[rsp+20]
  00876	0f af 84 24 58
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$43[rsp+8]
  0087e	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR PlayCursor$15[rsp]
  00885	03 c8		 add	 ecx, eax
  00887	8b c1		 mov	 eax, ecx
  00889	33 d2		 xor	 edx, edx
  0088b	f7 b4 24 5c 02
	00 00		 div	 DWORD PTR SoundOutput$43[rsp+12]
  00892	8b c2		 mov	 eax, edx
  00894	89 84 24 88 00
	00 00		 mov	 DWORD PTR TargetCursor$6[rsp], eax

; 706  :                         if(ByteToLock == TargetCursor) {

  0089b	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR TargetCursor$6[rsp]
  008a2	39 84 24 80 00
	00 00		 cmp	 DWORD PTR ByteToLock$4[rsp], eax
  008a9	75 08		 jne	 SHORT $LN24@WinMain

; 707  :                             BytesToWrite = 0;

  008ab	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR BytesToWrite$2[rsp], 0
$LN24@WinMain:

; 708  :                         }
; 709  :                         if(ByteToLock > TargetCursor) {

  008b3	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR TargetCursor$6[rsp]
  008ba	39 84 24 80 00
	00 00		 cmp	 DWORD PTR ByteToLock$4[rsp], eax
  008c1	76 2b		 jbe	 SHORT $LN25@WinMain

; 710  :                             BytesToWrite = (SoundOutput.SecondaryBufferSize - ByteToLock);

  008c3	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR ByteToLock$4[rsp]
  008ca	8b 8c 24 5c 02
	00 00		 mov	 ecx, DWORD PTR SoundOutput$43[rsp+12]
  008d1	2b c8		 sub	 ecx, eax
  008d3	8b c1		 mov	 eax, ecx
  008d5	89 44 24 70	 mov	 DWORD PTR BytesToWrite$2[rsp], eax

; 711  :                             BytesToWrite += TargetCursor;

  008d9	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR TargetCursor$6[rsp]
  008e0	8b 4c 24 70	 mov	 ecx, DWORD PTR BytesToWrite$2[rsp]
  008e4	03 c8		 add	 ecx, eax
  008e6	8b c1		 mov	 eax, ecx
  008e8	89 44 24 70	 mov	 DWORD PTR BytesToWrite$2[rsp], eax

; 712  :                         }
; 713  :                         else {

  008ec	eb 16		 jmp	 SHORT $LN26@WinMain
$LN25@WinMain:

; 714  :                             BytesToWrite = TargetCursor - ByteToLock;

  008ee	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR ByteToLock$4[rsp]
  008f5	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR TargetCursor$6[rsp]
  008fc	2b c8		 sub	 ecx, eax
  008fe	8b c1		 mov	 eax, ecx
  00900	89 44 24 70	 mov	 DWORD PTR BytesToWrite$2[rsp], eax
$LN26@WinMain:

; 715  :                         }
; 716  : 
; 717  :                         SoundIsValid = true;

  00904	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR SoundIsValid$16[rsp], 1
$LN23@WinMain:

; 718  :                     }
; 719  : 
; 720  :                     
; 721  :                     game_sound_output_buffer SoundBuffer = {};

  0090f	48 8d 84 24 00
	01 00 00	 lea	 rax, QWORD PTR SoundBuffer$24[rsp]
  00917	48 8b f8	 mov	 rdi, rax
  0091a	33 c0		 xor	 eax, eax
  0091c	b9 10 00 00 00	 mov	 ecx, 16
  00921	f3 aa		 rep stosb

; 722  :                     SoundBuffer.SamplesPerSecond = SoundOutput.SamplesPerSecond;

  00923	8b 84 24 50 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$43[rsp]
  0092a	89 84 24 00 01
	00 00		 mov	 DWORD PTR SoundBuffer$24[rsp], eax

; 723  :                     SoundBuffer.SampleCount = BytesToWrite / SoundOutput.BytesPerSample;

  00931	33 d2		 xor	 edx, edx
  00933	8b 44 24 70	 mov	 eax, DWORD PTR BytesToWrite$2[rsp]
  00937	f7 b4 24 58 02
	00 00		 div	 DWORD PTR SoundOutput$43[rsp+8]
  0093e	89 84 24 04 01
	00 00		 mov	 DWORD PTR SoundBuffer$24[rsp+4], eax

; 724  :                     SoundBuffer.Samples = Samples;

  00945	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Samples$23[rsp]
  0094d	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR SoundBuffer$24[rsp+8], rax

; 725  : 
; 726  :                     game_offscreen_buffer Buffer = {};

  00955	48 8d 84 24 a0
	01 00 00	 lea	 rax, QWORD PTR Buffer$38[rsp]
  0095d	48 8b f8	 mov	 rdi, rax
  00960	33 c0		 xor	 eax, eax
  00962	b9 18 00 00 00	 mov	 ecx, 24
  00967	f3 aa		 rep stosb

; 727  :                     Buffer.Memory = GlobalBackbuffer.Memory;

  00969	48 8b 05 30 00
	00 00		 mov	 rax, QWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+48
  00970	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR Buffer$38[rsp], rax

; 728  :                     Buffer.Width = GlobalBackbuffer.Width;

  00978	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+56
  0097e	89 84 24 a8 01
	00 00		 mov	 DWORD PTR Buffer$38[rsp+8], eax

; 729  :                     Buffer.Height = GlobalBackbuffer.Height;

  00985	8b 05 3c 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+60
  0098b	89 84 24 ac 01
	00 00		 mov	 DWORD PTR Buffer$38[rsp+12], eax

; 730  :                     Buffer.Pitch = GlobalBackbuffer.Pitch;

  00992	8b 05 40 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+64
  00998	89 84 24 b0 01
	00 00		 mov	 DWORD PTR Buffer$38[rsp+16], eax

; 731  :                     GameUpdateAndRender(&GameMemory, NewInput, &Buffer, &SoundBuffer);

  0099f	4c 8d 8c 24 00
	01 00 00	 lea	 r9, QWORD PTR SoundBuffer$24[rsp]
  009a7	4c 8d 84 24 a0
	01 00 00	 lea	 r8, QWORD PTR Buffer$38[rsp]
  009af	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR NewInput$18[rsp]
  009b7	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR GameMemory$29[rsp]
  009bf	e8 00 00 00 00	 call	 ?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z ; GameUpdateAndRender

; 732  : 
; 733  :                     // directsound output test
; 734  :                     if(SoundIsValid) {

  009c4	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR SoundIsValid$16[rsp], 0
  009cc	74 21		 je	 SHORT $LN27@WinMain

; 735  :                         
; 736  :                         win32FillSoundBuffer(&SoundOutput, ByteToLock, BytesToWrite, &SoundBuffer);

  009ce	4c 8d 8c 24 00
	01 00 00	 lea	 r9, QWORD PTR SoundBuffer$24[rsp]
  009d6	44 8b 44 24 70	 mov	 r8d, DWORD PTR BytesToWrite$2[rsp]
  009db	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR ByteToLock$4[rsp]
  009e2	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR SoundOutput$43[rsp]
  009ea	e8 00 00 00 00	 call	 ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z ; win32FillSoundBuffer
$LN27@WinMain:

; 737  : 
; 738  :                         // TODO More strenuous test
; 739  :                     }
; 740  : 
; 741  :                     win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  009ef	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  009f7	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  009fc	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR $T33[rsp], rax
  00a04	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR $T33[rsp]
  00a0c	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR Dimension$27[rsp], rax

; 742  :                     Win32DisplayBufferInWindow(

  00a14	44 8b 8c 24 2c
	01 00 00	 mov	 r9d, DWORD PTR Dimension$27[rsp+4]
  00a1c	44 8b 84 24 28
	01 00 00	 mov	 r8d, DWORD PTR Dimension$27[rsp]
  00a24	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR DeviceContext$30[rsp]
  00a2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00a33	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 743  :                         &GlobalBackbuffer, DeviceContext,
; 744  :                         Dimension.Width, Dimension.Height
; 745  :                     );
; 746  : 
; 747  :                     int64 EndCycleCount = __rdtsc();

  00a38	0f 31		 rdtsc
  00a3a	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00a3e	48 0b c2	 or	 rax, rdx
  00a41	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR EndCycleCount$28[rsp], rax

; 748  : 
; 749  :                     LARGE_INTEGER EndCounter;
; 750  :                     QueryPerformanceCounter(&EndCounter);

  00a49	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR EndCounter$25[rsp]
  00a51	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 751  : 
; 752  :                     uint64 CyclesElapsed = EndCycleCount - LastCycleCount;

  00a57	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR LastCycleCount$21[rsp]
  00a5f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR EndCycleCount$28[rsp]
  00a67	48 2b c8	 sub	 rcx, rax
  00a6a	48 8b c1	 mov	 rax, rcx
  00a6d	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR CyclesElapsed$31[rsp], rax

; 753  :                     int64 CounterElapsed = EndCounter.QuadPart - LastCounter.QuadPart;

  00a75	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR LastCounter$26[rsp]
  00a7d	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR EndCounter$25[rsp]
  00a85	48 2b c8	 sub	 rcx, rax
  00a88	48 8b c1	 mov	 rax, rcx
  00a8b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR CounterElapsed$22[rsp], rax

; 754  :                     real64 MSPerFrame = (((1000.0f*(real64)CounterElapsed) / (real64)PerfCountFrequency));

  00a93	f2 48 0f 2a 84
	24 f0 00 00 00	 cvtsi2sd xmm0, QWORD PTR CounterElapsed$22[rsp]
  00a9d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00aa5	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00aa9	0f 28 c1	 movaps	 xmm0, xmm1
  00aac	f2 48 0f 2a 8c
	24 18 01 00 00	 cvtsi2sd xmm1, QWORD PTR PerfCountFrequency$[rsp]
  00ab6	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00aba	f2 0f 11 84 24
	c8 01 00 00	 movsd	 QWORD PTR MSPerFrame$41[rsp], xmm0

; 755  :                     real64 FPS = (real64)PerfCountFrequency / (real64)CounterElapsed;

  00ac3	f2 48 0f 2a 84
	24 18 01 00 00	 cvtsi2sd xmm0, QWORD PTR PerfCountFrequency$[rsp]
  00acd	f2 48 0f 2a 8c
	24 f0 00 00 00	 cvtsi2sd xmm1, QWORD PTR CounterElapsed$22[rsp]
  00ad7	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00adb	f2 0f 11 84 24
	c0 01 00 00	 movsd	 QWORD PTR FPS$40[rsp], xmm0

; 756  :                     real64 MCPF = ((real64)CyclesElapsed / (1000.0f * 1000.0f));

  00ae4	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR CyclesElapsed$31[rsp]
  00aec	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00af1	48 85 c0	 test	 rax, rax
  00af4	7d 08		 jge	 SHORT $LN35@WinMain
  00af6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN35@WinMain:
  00afe	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@412e848000000000
  00b06	f2 0f 11 84 24
	b8 01 00 00	 movsd	 QWORD PTR MCPF$39[rsp], xmm0

; 757  :                     
; 758  : 
; 759  :                     // char Buffer[256];
; 760  :                     // sprintf(Buffer, "%.02fms/f,  %.02ff/s,  %.02fmc/f\n", MSPerFrame, FPS, MCPF);
; 761  :                     // OutputDebugStringA(Buffer);
; 762  : 
; 763  :                     // TODO print it
; 764  :                     LastCounter = EndCounter;

  00b0f	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR EndCounter$25[rsp]
  00b17	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR LastCounter$26[rsp], rax

; 765  :                     LastCycleCount = EndCycleCount;

  00b1f	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR EndCycleCount$28[rsp]
  00b27	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR LastCycleCount$21[rsp], rax

; 766  : 
; 767  :                     game_input *Temp = NewInput;

  00b2f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR NewInput$18[rsp]
  00b37	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR Temp$32[rsp], rax

; 768  :                     NewInput = OldInput;

  00b3f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR OldInput$20[rsp]
  00b47	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR NewInput$18[rsp], rax

; 769  :                     OldInput = Temp;

  00b4f	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR Temp$32[rsp]
  00b57	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR OldInput$20[rsp], rax

; 770  :                     // TODO Clear?
; 771  :                 }

  00b5f	e9 1f f8 ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN13@WinMain:
$LN11@WinMain:
$LN9@WinMain:

; 772  :                 //game loop end
; 773  :             }
; 774  :             else {
; 775  :                 // TODO Logging
; 776  :             }
; 777  :         }
; 778  :         else {
; 779  :             // TODO Logging
; 780  :         }
; 781  :     }
; 782  :     else{
; 783  :         // TODO Logging
; 784  :     }
; 785  :     return(0); 

  00b64	33 c0		 xor	 eax, eax

; 786  : }

  00b66	48 8b 8c 24 20
	05 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00b6e	48 33 cc	 xor	 rcx, rsp
  00b71	e8 00 00 00 00	 call	 __security_check_cookie
  00b76	48 81 c4 30 05
	00 00		 add	 rsp, 1328		; 00000530H
  00b7d	5f		 pop	 rdi
  00b7e	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
Red$1 = 0
Green$2 = 1
Blue$3 = 2
X$4 = 4
Y$5 = 8
tv76 = 12
Pixel$6 = 16
Row$ = 24
Buffer$ = 48
XOffset$ = 56
YOffset$ = 64
?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z PROC ; RenderWeirdGradient

; 26   : RenderWeirdGradient(game_offscreen_buffer *Buffer, int XOffset, int YOffset) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 27   :     // TODO lets see which is better
; 28   :     uint8 *Row = (uint8 *)Buffer->Memory;

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 29   :     for( int Y = 0 ; Y < Buffer->Height ; ++Y ) {

  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$5[rsp], 0
  00027	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  00029	8b 44 24 08	 mov	 eax, DWORD PTR Y$5[rsp]
  0002d	ff c0		 inc	 eax
  0002f	89 44 24 08	 mov	 DWORD PTR Y$5[rsp], eax
$LN4@RenderWeir:
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00038	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0003b	39 44 24 08	 cmp	 DWORD PTR Y$5[rsp], eax
  0003f	0f 8d e3 00 00
	00		 jge	 $LN3@RenderWeir

; 30   :         uint32 *Pixel = (uint32 *)Row;

  00045	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  0004a	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 31   :         for( int X = 0 ; X < Buffer->Width ; ++X ) {

  0004f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$4[rsp], 0
  00057	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  00059	8b 44 24 04	 mov	 eax, DWORD PTR X$4[rsp]
  0005d	ff c0		 inc	 eax
  0005f	89 44 24 04	 mov	 DWORD PTR X$4[rsp], eax
$LN7@RenderWeir:
  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00068	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0006b	39 44 24 04	 cmp	 DWORD PTR X$4[rsp], eax
  0006f	0f 8d 95 00 00
	00		 jge	 $LN6@RenderWeir

; 32   :             uint8 Blue = (X - XOffset);

  00075	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  00079	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  0007d	2b c8		 sub	 ecx, eax
  0007f	8b c1		 mov	 eax, ecx
  00081	88 44 24 02	 mov	 BYTE PTR Blue$3[rsp], al

; 33   :             uint8 Green = (Y + YOffset);

  00085	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  00089	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  0008d	03 c8		 add	 ecx, eax
  0008f	8b c1		 mov	 eax, ecx
  00091	88 44 24 01	 mov	 BYTE PTR Green$2[rsp], al

; 34   :             uint8 Red = ((X - (XOffset/4))*(Y + (YOffset/4))/8);

  00095	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  00099	99		 cdq
  0009a	83 e2 03	 and	 edx, 3
  0009d	03 c2		 add	 eax, edx
  0009f	c1 f8 02	 sar	 eax, 2
  000a2	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  000a6	2b c8		 sub	 ecx, eax
  000a8	8b c1		 mov	 eax, ecx
  000aa	89 44 24 0c	 mov	 DWORD PTR tv76[rsp], eax
  000ae	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  000b2	99		 cdq
  000b3	83 e2 03	 and	 edx, 3
  000b6	03 c2		 add	 eax, edx
  000b8	c1 f8 02	 sar	 eax, 2
  000bb	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  000bf	03 c8		 add	 ecx, eax
  000c1	8b c1		 mov	 eax, ecx
  000c3	8b 4c 24 0c	 mov	 ecx, DWORD PTR tv76[rsp]
  000c7	0f af c8	 imul	 ecx, eax
  000ca	8b c1		 mov	 eax, ecx
  000cc	99		 cdq
  000cd	83 e2 07	 and	 edx, 7
  000d0	03 c2		 add	 eax, edx
  000d2	c1 f8 03	 sar	 eax, 3
  000d5	88 04 24	 mov	 BYTE PTR Red$1[rsp], al

; 35   :             *Pixel++ = ((Red << 16) | (Green << 8) | Blue);

  000d8	0f b6 04 24	 movzx	 eax, BYTE PTR Red$1[rsp]
  000dc	c1 e0 10	 shl	 eax, 16
  000df	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR Green$2[rsp]
  000e4	c1 e1 08	 shl	 ecx, 8
  000e7	0b c1		 or	 eax, ecx
  000e9	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR Blue$3[rsp]
  000ee	0b c1		 or	 eax, ecx
  000f0	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Pixel$6[rsp]
  000f5	89 01		 mov	 DWORD PTR [rcx], eax
  000f7	48 8b 44 24 10	 mov	 rax, QWORD PTR Pixel$6[rsp]
  000fc	48 83 c0 04	 add	 rax, 4
  00100	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 36   :         }

  00105	e9 4f ff ff ff	 jmp	 $LN5@RenderWeir
$LN6@RenderWeir:

; 37   :         Row += Buffer->Pitch;

  0010a	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  0010f	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  00113	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  00118	48 03 c8	 add	 rcx, rax
  0011b	48 8b c1	 mov	 rax, rcx
  0011e	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 38   :     }

  00123	e9 01 ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 39   : }

  00128	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012c	c3		 ret	 0
?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z ENDP ; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
SampleValue$1 = 32
ToneVolume$ = 36
SampleIndex$2 = 40
SineValue$3 = 44
WavePeriod$ = 48
SampleOut$ = 56
SoundBuffer$ = 80
ToneHz$ = 88
?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z PROC ; GameOutputSound

; 6    : GameOutputSound(game_sound_output_buffer *SoundBuffer, int ToneHz) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7    :     local_persist real32 tSine;
; 8    :     int16 ToneVolume = 3000;

  0000d	b8 b8 0b 00 00	 mov	 eax, 3000		; 00000bb8H
  00012	66 89 44 24 24	 mov	 WORD PTR ToneVolume$[rsp], ax

; 9    :     // int ToneHz = 256;
; 10   :     int WavePeriod = SoundBuffer->SamplesPerSecond/ToneHz;

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0001c	8b 00		 mov	 eax, DWORD PTR [rax]
  0001e	99		 cdq
  0001f	f7 7c 24 58	 idiv	 DWORD PTR ToneHz$[rsp]
  00023	89 44 24 30	 mov	 DWORD PTR WavePeriod$[rsp], eax

; 11   :     
; 12   :     int16 *SampleOut = SoundBuffer->Samples; 

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0002c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00030	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 13   :     for(int SampleIndex = 0; SampleIndex < SoundBuffer->SampleCount; ++SampleIndex) {

  00035	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR SampleIndex$2[rsp], 0
  0003d	eb 0a		 jmp	 SHORT $LN4@GameOutput
$LN2@GameOutput:
  0003f	8b 44 24 28	 mov	 eax, DWORD PTR SampleIndex$2[rsp]
  00043	ff c0		 inc	 eax
  00045	89 44 24 28	 mov	 DWORD PTR SampleIndex$2[rsp], eax
$LN4@GameOutput:
  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0004e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00051	39 44 24 28	 cmp	 DWORD PTR SampleIndex$2[rsp], eax
  00055	0f 8d 99 00 00
	00		 jge	 $LN3@GameOutput

; 14   :         real32 SineValue = sinf(tSine);

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
  00063	e8 00 00 00 00	 call	 sinf
  00068	f3 0f 11 44 24
	2c		 movss	 DWORD PTR SineValue$3[rsp], xmm0

; 15   :         int16 SampleValue = (int16)(SineValue * ToneVolume);

  0006e	0f bf 44 24 24	 movsx	 eax, WORD PTR ToneVolume$[rsp]
  00073	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00077	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR SineValue$3[rsp]
  0007d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00081	0f 28 c1	 movaps	 xmm0, xmm1
  00084	f3 0f 2c c0	 cvttss2si eax, xmm0
  00088	66 89 44 24 20	 mov	 WORD PTR SampleValue$1[rsp], ax

; 16   :         *SampleOut++ = SampleValue;

  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  00092	0f b7 4c 24 20	 movzx	 ecx, WORD PTR SampleValue$1[rsp]
  00097	66 89 08	 mov	 WORD PTR [rax], cx
  0009a	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  0009f	48 83 c0 02	 add	 rax, 2
  000a3	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 17   :         *SampleOut++ = SampleValue;

  000a8	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  000ad	0f b7 4c 24 20	 movzx	 ecx, WORD PTR SampleValue$1[rsp]
  000b2	66 89 08	 mov	 WORD PTR [rax], cx
  000b5	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  000ba	48 83 c0 02	 add	 rax, 2
  000be	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 18   : 
; 19   :         tSine += 2.0f*Pi32*1.0f/(real32)WavePeriod;

  000c3	f3 0f 2a 44 24
	30		 cvtsi2ss xmm0, DWORD PTR WavePeriod$[rsp]
  000c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  000d1	f3 0f 5e c8	 divss	 xmm1, xmm0
  000d5	0f 28 c1	 movaps	 xmm0, xmm1
  000d8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
  000e0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000e4	0f 28 c1	 movaps	 xmm0, xmm1
  000e7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA, xmm0

; 20   :     }

  000ef	e9 4b ff ff ff	 jmp	 $LN2@GameOutput
$LN3@GameOutput:

; 21   : }

  000f4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f8	c3		 ret	 0
?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z ENDP ; GameOutputSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
GameState$ = 32
Input0$ = 40
Filename$1 = 48
File$2 = 56
$T3 = 72
$T4 = 88
Memory$ = 144
Input$ = 152
Buffer$ = 160
SoundBuffer$ = 168
?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z PROC ; GameUpdateAndRender

; 49   : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 50   :     Assert(sizeof(game_state) <= Memory->PermanentStorageSize);

  0001a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  00022	48 83 78 08 0c	 cmp	 QWORD PTR [rax+8], 12
  00027	73 0b		 jae	 SHORT $LN2@GameUpdate
  00029	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@GameUpdate:

; 51   :     game_state *GameState = (game_state *)Memory->PermanentStorage;

  00034	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  0003c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00040	48 89 44 24 20	 mov	 QWORD PTR GameState$[rsp], rax

; 52   :     if (!Memory->IsInitialized) {

  00045	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  0004d	83 38 00	 cmp	 DWORD PTR [rax], 0
  00050	0f 85 84 00 00
	00		 jne	 $LN3@GameUpdate

; 53   :         char *Filename = __FILE__;

  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG3960
  0005d	48 89 44 24 30	 mov	 QWORD PTR Filename$1[rsp], rax

; 54   : 
; 55   :         debug_read_file_result File = DEBUGPlatformReadEntireFile(Filename);

  00062	48 8b 54 24 30	 mov	 rdx, QWORD PTR Filename$1[rsp]
  00067	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T4[rsp]
  0006c	e8 00 00 00 00	 call	 ?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z ; DEBUGPlatformReadEntireFile
  00071	48 8d 4c 24 48	 lea	 rcx, QWORD PTR $T3[rsp]
  00076	48 8b f9	 mov	 rdi, rcx
  00079	48 8b f0	 mov	 rsi, rax
  0007c	b9 10 00 00 00	 mov	 ecx, 16
  00081	f3 a4		 rep movsb
  00083	48 8d 44 24 38	 lea	 rax, QWORD PTR File$2[rsp]
  00088	48 8d 4c 24 48	 lea	 rcx, QWORD PTR $T3[rsp]
  0008d	48 8b f8	 mov	 rdi, rax
  00090	48 8b f1	 mov	 rsi, rcx
  00093	b9 10 00 00 00	 mov	 ecx, 16
  00098	f3 a4		 rep movsb

; 56   :         if(File.Contents) {

  0009a	48 83 7c 24 40
	00		 cmp	 QWORD PTR File$2[rsp+8], 0
  000a0	74 1f		 je	 SHORT $LN4@GameUpdate

; 57   :             DEBUGPlatformWriteEntireFile("p:/handmade/data/test.out", File.ContentsSize, File.Contents);

  000a2	4c 8b 44 24 40	 mov	 r8, QWORD PTR File$2[rsp+8]
  000a7	8b 54 24 38	 mov	 edx, DWORD PTR File$2[rsp]
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG3962
  000b2	e8 00 00 00 00	 call	 ?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z ; DEBUGPlatformWriteEntireFile

; 58   :             DEBUGPlatformFreeFileMemory(File.Contents);

  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR File$2[rsp+8]
  000bc	e8 00 00 00 00	 call	 ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z ; DEBUGPlatformFreeFileMemory
$LN4@GameUpdate:

; 59   :         }
; 60   :         GameState->ToneHz = 256;

  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  000c6	c7 00 00 01 00
	00		 mov	 DWORD PTR [rax], 256	; 00000100H

; 61   : 
; 62   :         // TODO This may be more appropriate to do in the platform layer
; 63   :         Memory->IsInitialized = true;

  000cc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  000d4	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
$LN3@GameUpdate:

; 64   :     }
; 65   : 
; 66   :     game_controller_input *Input0 = &Input->Controllers[0];

  000da	b8 54 00 00 00	 mov	 eax, 84			; 00000054H
  000df	48 6b c0 00	 imul	 rax, rax, 0
  000e3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Input$[rsp]
  000eb	48 03 c8	 add	 rcx, rax
  000ee	48 8b c1	 mov	 rax, rcx
  000f1	48 89 44 24 28	 mov	 QWORD PTR Input0$[rsp], rax

; 67   :     if(Input0->IsAnalogue) {

  000f6	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  000fb	83 38 00	 cmp	 DWORD PTR [rax], 0
  000fe	74 48		 je	 SHORT $LN5@GameUpdate

; 68   :         // Use analogue movement tuning
; 69   :         GameState->XOffset += (int)(4.0f*(Input0->EndX));

  00100	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  00105	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  0010d	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [rax+28]
  00112	f3 0f 2c c0	 cvttss2si eax, xmm0
  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  0011b	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  0011e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  00123	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 70   :         GameState->ToneHz = 256 + (int)(128.0f*(Input0->EndY));

  00126	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  0012b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00133	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [rax+32]
  00138	f3 0f 2c c0	 cvttss2si eax, xmm0
  0013c	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00141	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  00146	89 01		 mov	 DWORD PTR [rcx], eax
$LN5@GameUpdate:

; 71   :     }
; 72   :     else {
; 73   :         // Use digital movement tuning
; 74   :     }
; 75   : 
; 76   :     if(Input0->Down.EndedDown) {

  00148	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  0014d	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00151	74 12		 je	 SHORT $LN7@GameUpdate

; 77   :         GameState->YOffset += 1;

  00153	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  00158	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0015b	ff c0		 inc	 eax
  0015d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  00162	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN7@GameUpdate:

; 78   :     }
; 79   : 
; 80   : 
; 81   : 
; 82   :     // TODO Allow sample offsets here for more robust platform
; 83   :     GameOutputSound(SoundBuffer, GameState->ToneHz);

  00165	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  0016a	8b 10		 mov	 edx, DWORD PTR [rax]
  0016c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR SoundBuffer$[rsp]
  00174	e8 00 00 00 00	 call	 ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z ; GameOutputSound

; 84   :     RenderWeirdGradient(Buffer, GameState->XOffset, GameState->YOffset);

  00179	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  0017e	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00182	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  00187	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  0018a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00192	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z ; RenderWeirdGradient

; 85   : }

  00197	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0019b	5f		 pop	 rdi
  0019c	5e		 pop	 rsi
  0019d	c3		 ret	 0
?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z ENDP ; GameUpdateAndRender
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv81 = 64
Result$ = 68
BytesWritten$1 = 72
FileHandle$ = 80
Filename$ = 112
MemorySize$ = 120
Memory$ = 128
?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z PROC	; DEBUGPlatformWriteEntireFile

; 150  : DEBUGPlatformWriteEntireFile(char *Filename, uint32 MemorySize, void *Memory) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 151  :     bool32 Result = false;

  00012	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR Result$[rsp], 0

; 152  : 
; 153  :     HANDLE FileHandle = CreateFile(Filename, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0);

  0001a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00023	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0002b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00033	45 33 c9	 xor	 r9d, r9d
  00036	45 33 c0	 xor	 r8d, r8d
  00039	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  0003e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Filename$[rsp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00049	48 89 44 24 50	 mov	 QWORD PTR FileHandle$[rsp], rax

; 154  : 
; 155  :     if (FileHandle != INVALID_HANDLE_VALUE) {

  0004e	48 83 7c 24 50
	ff		 cmp	 QWORD PTR FileHandle$[rsp], -1
  00054	74 59		 je	 SHORT $LN2@DEBUGPlatf

; 156  :         DWORD BytesWritten;
; 157  :                 
; 158  :         if(WriteFile(FileHandle, Memory, MemorySize, &BytesWritten, 0)) {

  00056	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0005f	4c 8d 4c 24 48	 lea	 r9, QWORD PTR BytesWritten$1[rsp]
  00064	44 8b 44 24 78	 mov	 r8d, DWORD PTR MemorySize$[rsp]
  00069	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR Memory$[rsp]
  00071	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  0007c	85 c0		 test	 eax, eax
  0007e	74 24		 je	 SHORT $LN4@DEBUGPlatf

; 159  :             // NOTE File read successfully
; 160  :             Result = (BytesWritten == MemorySize);

  00080	8b 44 24 78	 mov	 eax, DWORD PTR MemorySize$[rsp]
  00084	39 44 24 48	 cmp	 DWORD PTR BytesWritten$1[rsp], eax
  00088	75 0a		 jne	 SHORT $LN7@DEBUGPlatf
  0008a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  00092	eb 08		 jmp	 SHORT $LN8@DEBUGPlatf
$LN7@DEBUGPlatf:
  00094	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN8@DEBUGPlatf:
  0009c	8b 44 24 40	 mov	 eax, DWORD PTR tv81[rsp]
  000a0	89 44 24 44	 mov	 DWORD PTR Result$[rsp], eax
$LN4@DEBUGPlatf:

; 161  :         }
; 162  :         else {
; 163  :             // TODO logging
; 164  :         }
; 165  : 
; 166  :         CloseHandle(FileHandle);

  000a4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN2@DEBUGPlatf:

; 167  :     }
; 168  :     else {
; 169  :         // TODO logging
; 170  :     }
; 171  : 
; 172  :     return(Result);

  000af	8b 44 24 44	 mov	 eax, DWORD PTR Result$[rsp]

; 173  : 
; 174  : 
; 175  : }

  000b3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000b7	c3		 ret	 0
?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z ENDP	; DEBUGPlatformWriteEntireFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Memory$ = 48
?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z PROC		; DEBUGPlatformFreeFileMemory

; 141  : DEBUGPlatformFreeFileMemory(void *Memory) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 142  :     if(Memory) {

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR Memory$[rsp], 0
  0000f	74 13		 je	 SHORT $LN2@DEBUGPlatf

; 143  :         VirtualFree(Memory, 0, MEM_RELEASE);

  00011	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00017	33 d2		 xor	 edx, edx
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Memory$[rsp]
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@DEBUGPlatf:

; 144  :     }
; 145  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z ENDP		; DEBUGPlatformFreeFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
FileSize32$1 = 64
BytesRead$2 = 68
FileHandle$ = 72
FileSize$3 = 80
Result$ = 88
$T4 = 144
Filename$ = 152
?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z PROC ; DEBUGPlatformReadEntireFile

; 95   : DEBUGPlatformReadEntireFile(char *Filename) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 96   :     debug_read_file_result Result = {};

  00010	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  00015	48 8b f8	 mov	 rdi, rax
  00018	33 c0		 xor	 eax, eax
  0001a	b9 10 00 00 00	 mov	 ecx, 16
  0001f	f3 aa		 rep stosb

; 97   : 
; 98   :     HANDLE FileHandle = CreateFile(Filename, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);

  00021	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0002a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00032	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  0003a	45 33 c9	 xor	 r9d, r9d
  0003d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00043	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00048	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Filename$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00056	48 89 44 24 48	 mov	 QWORD PTR FileHandle$[rsp], rax

; 99   : 
; 100  :     if (FileHandle != INVALID_HANDLE_VALUE) {

  0005b	48 83 7c 24 48
	ff		 cmp	 QWORD PTR FileHandle$[rsp], -1
  00061	0f 84 a6 00 00
	00		 je	 $LN2@DEBUGPlatf

; 101  :         LARGE_INTEGER FileSize;
; 102  : 
; 103  :         if(GetFileSizeEx(FileHandle, &FileSize)) {

  00067	48 8d 54 24 50	 lea	 rdx, QWORD PTR FileSize$3[rsp]
  0006c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  00077	85 c0		 test	 eax, eax
  00079	0f 84 83 00 00
	00		 je	 $LN4@DEBUGPlatf

; 104  :             // TODO Defines for maximum values
; 105  :             uint32 FileSize32 = SafeTruncateUInt64(FileSize.QuadPart);

  0007f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileSize$3[rsp]
  00084	e8 00 00 00 00	 call	 ?SafeTruncateUInt64@@YAI_K@Z ; SafeTruncateUInt64
  00089	89 44 24 40	 mov	 DWORD PTR FileSize32$1[rsp], eax

; 106  :             Result.Contents = VirtualAlloc(0, FileSize32, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  0008d	8b 44 24 40	 mov	 eax, DWORD PTR FileSize32$1[rsp]
  00091	41 b9 04 00 00
	00		 mov	 r9d, 4
  00097	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0009d	8b d0		 mov	 edx, eax
  0009f	33 c9		 xor	 ecx, ecx
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000a7	48 89 44 24 60	 mov	 QWORD PTR Result$[rsp+8], rax

; 107  : 
; 108  :             if(Result.Contents) {

  000ac	48 83 7c 24 60
	00		 cmp	 QWORD PTR Result$[rsp+8], 0
  000b2	74 4e		 je	 SHORT $LN6@DEBUGPlatf

; 109  :                 DWORD BytesRead;
; 110  :                 
; 111  :                 if(ReadFile(FileHandle, Result.Contents, FileSize.QuadPart, &BytesRead, 0) && (FileSize32 == BytesRead)) {

  000b4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000bd	4c 8d 4c 24 44	 lea	 r9, QWORD PTR BytesRead$2[rsp]
  000c2	44 8b 44 24 50	 mov	 r8d, DWORD PTR FileSize$3[rsp]
  000c7	48 8b 54 24 60	 mov	 rdx, QWORD PTR Result$[rsp+8]
  000cc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  000d7	85 c0		 test	 eax, eax
  000d9	74 14		 je	 SHORT $LN8@DEBUGPlatf
  000db	8b 44 24 44	 mov	 eax, DWORD PTR BytesRead$2[rsp]
  000df	39 44 24 40	 cmp	 DWORD PTR FileSize32$1[rsp], eax
  000e3	75 0a		 jne	 SHORT $LN8@DEBUGPlatf

; 112  :                     // NOTE File read successfully
; 113  :                     Result.ContentsSize = FileSize32;

  000e5	8b 44 24 40	 mov	 eax, DWORD PTR FileSize32$1[rsp]
  000e9	89 44 24 58	 mov	 DWORD PTR Result$[rsp], eax

; 114  :                 }
; 115  :                 else {

  000ed	eb 13		 jmp	 SHORT $LN9@DEBUGPlatf
$LN8@DEBUGPlatf:

; 116  :                     DEBUGPlatformFreeFileMemory(Result.Contents);

  000ef	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Result$[rsp+8]
  000f4	e8 00 00 00 00	 call	 ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z ; DEBUGPlatformFreeFileMemory

; 117  :                     Result.Contents = 0;

  000f9	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR Result$[rsp+8], 0
$LN9@DEBUGPlatf:
$LN6@DEBUGPlatf:
$LN4@DEBUGPlatf:

; 118  :                 }
; 119  :             }
; 120  :             else {
; 121  :                 // TODO logging
; 122  :             }
; 123  :         }
; 124  :         else {
; 125  :             // TODO logging
; 126  :         }
; 127  : 
; 128  :         CloseHandle(FileHandle);

  00102	48 8b 4c 24 48	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN2@DEBUGPlatf:

; 129  :     }
; 130  :     else {
; 131  :         // TODO logging
; 132  :     }
; 133  : 
; 134  :     return(Result);

  0010d	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  00112	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  0011a	48 8b f0	 mov	 rsi, rax
  0011d	b9 10 00 00 00	 mov	 ecx, 16
  00122	f3 a4		 rep movsb
  00124	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 135  : 
; 136  : }

  0012c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00130	5f		 pop	 rdi
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z ENDP ; DEBUGPlatformReadEntireFile
_TEXT	ENDS
END
