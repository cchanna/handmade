; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z	; XInputGetStateStub
PUBLIC	?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
CONST	SEGMENT
$SG84271 DB	'xinput1_4.dll', 00H
	ORG $+2
$SG84273 DB	'xinput1_3.dll', 00H
	ORG $+2
$SG84276 DB	'XInputGetState', 00H
	ORG $+1
$SG84278 DB	'XInputSetState', 00H
	ORG $+1
$SG84300 DB	'dsound.dll', 00H
	ORG $+1
$SG84408 DB	0aH, 00H
	ORG $+2
$SG84302 DB	'DirectSoundCreate', 00H
	ORG $+2
$SG84403 DB	'Space ', 00H
	ORG $+5
$SG84311 DB	'Primary buffer format was set.', 0aH, 00H
$SG84313 DB	'Secondary buffer created successfuly', 0aH, 00H
	ORG $+2
$SG84376 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG84405 DB	'IsDown ', 00H
$SG84407 DB	'WasDown ', 00H
	ORG $+7
$SG84411 DB	'WM_PAINT', 0aH, 00H
	ORG $+6
$SG84490 DB	'HandmadeHeroWindowClass', 00H
$SG84493 DB	'Handmade Hero', 00H
CONST	ENDS
_DATA	SEGMENT
?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA DQ FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetState_
?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA DQ FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetState_
_DATA	ENDS
PUBLIC	WinMain
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
	ALIGN	8

?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA DQ 01H DUP (?) ; GlobalSecondaryBuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN55
	DD	imagerel $LN55+2297
	DD	imagerel $unwind$WinMain
$pdata$?Wind32LoadXInput@@YAXXZ DD imagerel ?Wind32LoadXInput@@YAXXZ
	DD	imagerel ?Wind32LoadXInput@@YAXXZ+159
	DD	imagerel $unwind$?Wind32LoadXInput@@YAXXZ
$pdata$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
	DD	imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z+554
	DD	imagerel $unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
	DD	imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z+302
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+269
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z+159
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z+819
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	03c011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$?Wind32LoadXInput@@YAXXZ DD 010401H
	DD	06204H
$unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD 032819H
	DD	0180116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD 011801H
	DD	0e218H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01b011aH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
VKCode$1 = 32
WasDown$2 = 36
IsDown$3 = 37
tv64 = 40
tv72 = 44
tv68 = 48
Result$ = 56
Dimension$4 = 64
Y$5 = 72
Width$6 = 76
$T7 = 80
X$8 = 88
DeviceContext$9 = 96
Height$10 = 104
Paint$11 = 112
__$ArrayPad$ = 192
Window$ = 224
Message$ = 232
WParam$ = 240
LParam$ = 248
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 250  : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 251  :     LRESULT Result = 0;

  0002c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 252  : 
; 253  :     switch(Message)

  00035	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 28 10	 cmp	 DWORD PTR tv64[rsp], 16
  00045	77 25		 ja	 SHORT $LN43@Win32MainW
  00047	83 7c 24 28 10	 cmp	 DWORD PTR tv64[rsp], 16
  0004c	74 5f		 je	 SHORT $LN5@Win32MainW
  0004e	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  00053	74 76		 je	 SHORT $LN7@Win32MainW
  00055	83 7c 24 28 05	 cmp	 DWORD PTR tv64[rsp], 5
  0005a	74 4c		 je	 SHORT $LN4@Win32MainW
  0005c	83 7c 24 28 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00061	0f 84 d8 01 00
	00		 je	 $LN36@Win32MainW
  00067	e9 80 02 00 00	 jmp	 $LN37@Win32MainW
$LN43@Win32MainW:
  0006c	83 7c 24 28 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00071	74 46		 je	 SHORT $LN6@Win32MainW
  00073	81 7c 24 28 ff
	00 00 00	 cmp	 DWORD PTR tv64[rsp], 255 ; 000000ffH
  0007b	0f 86 6b 02 00
	00		 jbe	 $LN37@Win32MainW
  00081	81 7c 24 28 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  00089	76 4c		 jbe	 SHORT $LN8@Win32MainW
  0008b	81 7c 24 28 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  00093	0f 86 53 02 00
	00		 jbe	 $LN37@Win32MainW
  00099	81 7c 24 28 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  000a1	76 34		 jbe	 SHORT $LN8@Win32MainW
  000a3	e9 44 02 00 00	 jmp	 $LN37@Win32MainW
$LN4@Win32MainW:

; 254  :     {
; 255  :         case WM_SIZE: {
; 256  :         } break;

  000a8	e9 69 02 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 257  : 
; 258  :         case WM_CLOSE: {
; 259  :             // TODO Handle this with a message to the user?
; 260  :             GlobalRunning = false;

  000ad	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 261  :         } break;

  000b4	e9 5d 02 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 262  : 
; 263  :         case WM_ACTIVATEAPP: {
; 264  :             OutputDebugStringA("WM_ACTIVATEAPP\n");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84376
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 265  :         } break;

  000c6	e9 4b 02 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 266  : 
; 267  :         case WM_DESTROY: {
; 268  :             // TODO Handle this as an error - recreate window?
; 269  :             GlobalRunning = false;

  000cb	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 270  :         } break;

  000d2	e9 3f 02 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 271  : 
; 272  :         case WM_SYSKEYDOWN: 
; 273  :         case WM_SYSKEYUP:
; 274  :         case WM_KEYDOWN:
; 275  :         case WM_KEYUP: {
; 276  :             uint32 VKCode = WParam;

  000d7	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR WParam$[rsp]
  000de	89 44 24 20	 mov	 DWORD PTR VKCode$1[rsp], eax

; 277  :             bool WasDown = ((LParam & (1 << 30)) != 0);

  000e2	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  000ea	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  000f0	48 85 c0	 test	 rax, rax
  000f3	74 0a		 je	 SHORT $LN39@Win32MainW
  000f5	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  000fd	eb 08		 jmp	 SHORT $LN40@Win32MainW
$LN39@Win32MainW:
  000ff	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN40@Win32MainW:
  00107	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv68[rsp]
  0010c	88 44 24 24	 mov	 BYTE PTR WasDown$2[rsp], al

; 278  :             bool IsDown = ((LParam & (1 << 31)) == 0);

  00110	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00118	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  0011e	48 85 c0	 test	 rax, rax
  00121	75 0a		 jne	 SHORT $LN41@Win32MainW
  00123	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0012b	eb 08		 jmp	 SHORT $LN42@Win32MainW
$LN41@Win32MainW:
  0012d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN42@Win32MainW:
  00135	0f b6 44 24 2c	 movzx	 eax, BYTE PTR tv72[rsp]
  0013a	88 44 24 25	 mov	 BYTE PTR IsDown$3[rsp], al

; 279  :             if(WasDown != IsDown) {

  0013e	0f b6 44 24 24	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  00143	0f b6 4c 24 25	 movzx	 ecx, BYTE PTR IsDown$3[rsp]
  00148	3b c1		 cmp	 eax, ecx
  0014a	0f 84 c9 00 00
	00		 je	 $LN9@Win32MainW

; 280  :                 if(VKCode == 'W') {

  00150	83 7c 24 20 57	 cmp	 DWORD PTR VKCode$1[rsp], 87 ; 00000057H
  00155	75 05		 jne	 SHORT $LN10@Win32MainW
  00157	e9 bd 00 00 00	 jmp	 $LN11@Win32MainW
$LN10@Win32MainW:

; 281  :                 }
; 282  :                 else if(VKCode == 'A') {

  0015c	83 7c 24 20 41	 cmp	 DWORD PTR VKCode$1[rsp], 65 ; 00000041H
  00161	75 05		 jne	 SHORT $LN12@Win32MainW
  00163	e9 b1 00 00 00	 jmp	 $LN13@Win32MainW
$LN12@Win32MainW:

; 283  :                 }
; 284  :                 else if(VKCode == 'S') {

  00168	83 7c 24 20 53	 cmp	 DWORD PTR VKCode$1[rsp], 83 ; 00000053H
  0016d	75 05		 jne	 SHORT $LN14@Win32MainW
  0016f	e9 a5 00 00 00	 jmp	 $LN15@Win32MainW
$LN14@Win32MainW:

; 285  :                 }
; 286  :                 else if(VKCode == 'D') {

  00174	83 7c 24 20 44	 cmp	 DWORD PTR VKCode$1[rsp], 68 ; 00000044H
  00179	75 05		 jne	 SHORT $LN16@Win32MainW
  0017b	e9 99 00 00 00	 jmp	 $LN17@Win32MainW
$LN16@Win32MainW:

; 287  :                 }
; 288  :                 else if(VKCode == 'Q') {

  00180	83 7c 24 20 51	 cmp	 DWORD PTR VKCode$1[rsp], 81 ; 00000051H
  00185	75 05		 jne	 SHORT $LN18@Win32MainW
  00187	e9 8d 00 00 00	 jmp	 $LN19@Win32MainW
$LN18@Win32MainW:

; 289  :                 }
; 290  :                 else if(VKCode == 'E') {

  0018c	83 7c 24 20 45	 cmp	 DWORD PTR VKCode$1[rsp], 69 ; 00000045H
  00191	75 05		 jne	 SHORT $LN20@Win32MainW
  00193	e9 81 00 00 00	 jmp	 $LN21@Win32MainW
$LN20@Win32MainW:

; 291  :                 }
; 292  :                 else if(VKCode == VK_UP) {

  00198	83 7c 24 20 26	 cmp	 DWORD PTR VKCode$1[rsp], 38 ; 00000026H
  0019d	75 02		 jne	 SHORT $LN22@Win32MainW
  0019f	eb 78		 jmp	 SHORT $LN23@Win32MainW
$LN22@Win32MainW:

; 293  :                 }
; 294  :                 else if(VKCode == VK_DOWN) {

  001a1	83 7c 24 20 28	 cmp	 DWORD PTR VKCode$1[rsp], 40 ; 00000028H
  001a6	75 02		 jne	 SHORT $LN24@Win32MainW
  001a8	eb 6f		 jmp	 SHORT $LN25@Win32MainW
$LN24@Win32MainW:

; 295  :                 }
; 296  :                 else if(VKCode == VK_LEFT) {

  001aa	83 7c 24 20 25	 cmp	 DWORD PTR VKCode$1[rsp], 37 ; 00000025H
  001af	75 02		 jne	 SHORT $LN26@Win32MainW
  001b1	eb 66		 jmp	 SHORT $LN27@Win32MainW
$LN26@Win32MainW:

; 297  :                 }
; 298  :                 else if(VKCode == VK_RIGHT) {

  001b3	83 7c 24 20 27	 cmp	 DWORD PTR VKCode$1[rsp], 39 ; 00000027H
  001b8	75 02		 jne	 SHORT $LN28@Win32MainW
  001ba	eb 5d		 jmp	 SHORT $LN29@Win32MainW
$LN28@Win32MainW:

; 299  :                 }
; 300  :                 else if(VKCode == VK_ESCAPE) {

  001bc	83 7c 24 20 1b	 cmp	 DWORD PTR VKCode$1[rsp], 27
  001c1	75 09		 jne	 SHORT $LN30@Win32MainW

; 301  :                     GlobalRunning = false;

  001c3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
  001ca	eb 4d		 jmp	 SHORT $LN31@Win32MainW
$LN30@Win32MainW:

; 302  :                 }
; 303  :                 else if(VKCode == VK_SPACE) {

  001cc	83 7c 24 20 20	 cmp	 DWORD PTR VKCode$1[rsp], 32 ; 00000020H
  001d1	75 46		 jne	 SHORT $LN32@Win32MainW

; 304  :                     OutputDebugStringA("Space ");

  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84403
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 305  :                     if(IsDown) {

  001e0	0f b6 44 24 25	 movzx	 eax, BYTE PTR IsDown$3[rsp]
  001e5	85 c0		 test	 eax, eax
  001e7	74 0d		 je	 SHORT $LN33@Win32MainW

; 306  :                         OutputDebugStringA("IsDown ");

  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84405
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN33@Win32MainW:

; 307  :                     }
; 308  :                     if(WasDown) {

  001f6	0f b6 44 24 24	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  001fb	85 c0		 test	 eax, eax
  001fd	74 0d		 je	 SHORT $LN34@Win32MainW

; 309  :                         OutputDebugStringA("WasDown ");

  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84407
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN34@Win32MainW:

; 310  :                     }
; 311  :                     OutputDebugStringA("\n");

  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84408
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN32@Win32MainW:
$LN31@Win32MainW:
$LN29@Win32MainW:
$LN27@Win32MainW:
$LN25@Win32MainW:
$LN23@Win32MainW:
$LN21@Win32MainW:
$LN19@Win32MainW:
$LN17@Win32MainW:
$LN15@Win32MainW:
$LN13@Win32MainW:
$LN11@Win32MainW:
$LN9@Win32MainW:

; 312  :                 }
; 313  :             }
; 314  : 
; 315  :             if((LParam & (1 << 29)) && VKCode == VK_F4) { //Alt+F4

  00219	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00221	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00227	48 85 c0	 test	 rax, rax
  0022a	74 0e		 je	 SHORT $LN35@Win32MainW
  0022c	83 7c 24 20 73	 cmp	 DWORD PTR VKCode$1[rsp], 115 ; 00000073H
  00231	75 07		 jne	 SHORT $LN35@Win32MainW

; 316  :                 GlobalRunning = false;

  00233	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN35@Win32MainW:

; 317  :             }
; 318  : 
; 319  :         } break;

  0023a	e9 d7 00 00 00	 jmp	 $LN2@Win32MainW
$LN36@Win32MainW:

; 320  : 
; 321  :         case WM_PAINT: {
; 322  :             OutputDebugStringA("WM_PAINT\n");

  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84411
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 323  :             PAINTSTRUCT Paint;
; 324  :             HDC DeviceContext = BeginPaint(Window, &Paint);

  0024c	48 8d 54 24 70	 lea	 rdx, QWORD PTR Paint$11[rsp]
  00251	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  0025f	48 89 44 24 60	 mov	 QWORD PTR DeviceContext$9[rsp], rax

; 325  :             int X = Paint.rcPaint.left;

  00264	8b 44 24 7c	 mov	 eax, DWORD PTR Paint$11[rsp+12]
  00268	89 44 24 58	 mov	 DWORD PTR X$8[rsp], eax

; 326  :             int Y = Paint.rcPaint.top;

  0026c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  00273	89 44 24 48	 mov	 DWORD PTR Y$5[rsp], eax

; 327  :             int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  00277	8b 44 24 7c	 mov	 eax, DWORD PTR Paint$11[rsp+12]
  0027b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+20]
  00282	2b c8		 sub	 ecx, eax
  00284	8b c1		 mov	 eax, ecx
  00286	89 44 24 4c	 mov	 DWORD PTR Width$6[rsp], eax

; 328  :             int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  0028a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  00291	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+24]
  00298	2b c8		 sub	 ecx, eax
  0029a	8b c1		 mov	 eax, ecx
  0029c	89 44 24 68	 mov	 DWORD PTR Height$10[rsp], eax

; 329  : 
; 330  : 
; 331  :             win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  002a0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  002a8	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  002ad	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  002b2	48 8b 44 24 50	 mov	 rax, QWORD PTR $T7[rsp]
  002b7	48 89 44 24 40	 mov	 QWORD PTR Dimension$4[rsp], rax

; 332  :             Win32DisplayBufferInWindow(&GlobalBackbuffer, DeviceContext, Dimension.Width, Dimension.Height);

  002bc	44 8b 4c 24 44	 mov	 r9d, DWORD PTR Dimension$4[rsp+4]
  002c1	44 8b 44 24 40	 mov	 r8d, DWORD PTR Dimension$4[rsp]
  002c6	48 8b 54 24 60	 mov	 rdx, QWORD PTR DeviceContext$9[rsp]
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  002d2	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 333  :             EndPaint(Window, &Paint);

  002d7	48 8d 54 24 70	 lea	 rdx, QWORD PTR Paint$11[rsp]
  002dc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  002e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 334  :         } break;

  002ea	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN37@Win32MainW:

; 335  : 
; 336  :         default: {
; 337  :             // OutputDebugStringA("default\n");
; 338  :             Result = DefWindowProc(Window, Message, WParam, LParam);

  002ec	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  002f4	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  002fc	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00303	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0030b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  00311	48 89 44 24 38	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 339  :         } break;
; 340  :     }
; 341  : 
; 342  :     return(Result);

  00316	48 8b 44 24 38	 mov	 rax, QWORD PTR Result$[rsp]

; 343  : } 

  0031b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00323	48 33 cc	 xor	 rcx, rsp
  00326	e8 00 00 00 00	 call	 __security_check_cookie
  0032b	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00332	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Buffer$ = 128
DeviceContext$ = 136
WindowWidth$ = 144
WindowHeight$ = 152
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z PROC ; Win32DisplayBufferInWindow

; 230  : ) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 231  :     // TODO aspect ration correction
; 232  :     StretchDIBits(

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  00020	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00028	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00030	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00035	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00041	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00046	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004e	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005d	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00060	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00064	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00074	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007f	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 233  :         DeviceContext,
; 234  :         0, 0, WindowWidth, WindowHeight,
; 235  :         0, 0, Buffer->Width, Buffer->Height,
; 236  :         Buffer->Memory,
; 237  :         &Buffer->Info,
; 238  :         DIB_RGB_COLORS, SRCCOPY
; 239  :     );
; 240  : }

  0009a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009e	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 195  : Win32ResizeDIBSection(win32_offscreen_buffer *Buffer, int Width, int Height) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 196  :     // TODO Bulletproof this
; 197  :     // Maybe don't free first, free after, then free first if that fails
; 198  : 
; 199  :     if(Buffer->Memory) {

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 200  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 201  :     }
; 202  : 
; 203  :     Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 204  :     Buffer->Height = Height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 205  :     Buffer->BytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 206  : 
; 207  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 208  :     Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 209  :     Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 210  :     Buffer->Info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 211  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 212  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 213  : 
; 214  :     // NOTE: Thanks Chris Hecker for clarifying StretchDIBits/BitBlt
; 215  :     int BitmapMemorySize = (Buffer->Width*Buffer->Height)*Buffer->BytesPerPixel;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000bb	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000c4	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c8	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 216  :     Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000d1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d7	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000ed	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 217  : 
; 218  :     // TODO probably clear to black
; 219  : 
; 220  :     Buffer->Pitch = Width*Buffer->BytesPerPixel;

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f6	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  000fa	0f af 48 44	 imul	 ecx, DWORD PTR [rax+68]
  000fe	8b c1		 mov	 eax, ecx
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00105	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 221  : }

  00108	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010c	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Red$1 = 0
Green$2 = 1
Blue$3 = 2
X$4 = 4
Y$5 = 8
tv76 = 12
Pixel$6 = 16
Row$ = 24
Buffer$ = 48
XOffset$ = 56
YOffset$ = 64
?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; RenderWeirdGradient

; 176  : ) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 177  :     // TODO lets see which is better
; 178  :     uint8 *Row = (uint8 *)Buffer->Memory;

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0001b	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 179  :     for( int Y = 0 ; Y < Buffer->Height ; ++Y ) {

  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$5[rsp], 0
  00028	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  0002a	8b 44 24 08	 mov	 eax, DWORD PTR Y$5[rsp]
  0002e	ff c0		 inc	 eax
  00030	89 44 24 08	 mov	 DWORD PTR Y$5[rsp], eax
$LN4@RenderWeir:
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00039	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0003c	39 44 24 08	 cmp	 DWORD PTR Y$5[rsp], eax
  00040	0f 8d e3 00 00
	00		 jge	 $LN3@RenderWeir

; 180  :         uint32 *Pixel = (uint32 *)Row;

  00046	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  0004b	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 181  :         for( int X = 0 ; X < Buffer->Width ; ++X ) {

  00050	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$4[rsp], 0
  00058	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  0005a	8b 44 24 04	 mov	 eax, DWORD PTR X$4[rsp]
  0005e	ff c0		 inc	 eax
  00060	89 44 24 04	 mov	 DWORD PTR X$4[rsp], eax
$LN7@RenderWeir:
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0006c	39 44 24 04	 cmp	 DWORD PTR X$4[rsp], eax
  00070	0f 8d 95 00 00
	00		 jge	 $LN6@RenderWeir

; 182  :             uint8 Blue = (X - XOffset);

  00076	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  0007a	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  0007e	2b c8		 sub	 ecx, eax
  00080	8b c1		 mov	 eax, ecx
  00082	88 44 24 02	 mov	 BYTE PTR Blue$3[rsp], al

; 183  :             uint8 Green = (Y + YOffset);

  00086	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  0008a	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  0008e	03 c8		 add	 ecx, eax
  00090	8b c1		 mov	 eax, ecx
  00092	88 44 24 01	 mov	 BYTE PTR Green$2[rsp], al

; 184  : 			uint8 Red = ((X - (XOffset/4))*(Y + (YOffset/4))/8);

  00096	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  0009a	99		 cdq
  0009b	83 e2 03	 and	 edx, 3
  0009e	03 c2		 add	 eax, edx
  000a0	c1 f8 02	 sar	 eax, 2
  000a3	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  000a7	2b c8		 sub	 ecx, eax
  000a9	8b c1		 mov	 eax, ecx
  000ab	89 44 24 0c	 mov	 DWORD PTR tv76[rsp], eax
  000af	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  000b3	99		 cdq
  000b4	83 e2 03	 and	 edx, 3
  000b7	03 c2		 add	 eax, edx
  000b9	c1 f8 02	 sar	 eax, 2
  000bc	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  000c0	03 c8		 add	 ecx, eax
  000c2	8b c1		 mov	 eax, ecx
  000c4	8b 4c 24 0c	 mov	 ecx, DWORD PTR tv76[rsp]
  000c8	0f af c8	 imul	 ecx, eax
  000cb	8b c1		 mov	 eax, ecx
  000cd	99		 cdq
  000ce	83 e2 07	 and	 edx, 7
  000d1	03 c2		 add	 eax, edx
  000d3	c1 f8 03	 sar	 eax, 3
  000d6	88 04 24	 mov	 BYTE PTR Red$1[rsp], al

; 185  : 			*Pixel++ = ((Red << 16) | (Green << 8) | Blue);

  000d9	0f b6 04 24	 movzx	 eax, BYTE PTR Red$1[rsp]
  000dd	c1 e0 10	 shl	 eax, 16
  000e0	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR Green$2[rsp]
  000e5	c1 e1 08	 shl	 ecx, 8
  000e8	0b c1		 or	 eax, ecx
  000ea	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR Blue$3[rsp]
  000ef	0b c1		 or	 eax, ecx
  000f1	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Pixel$6[rsp]
  000f6	89 01		 mov	 DWORD PTR [rcx], eax
  000f8	48 8b 44 24 10	 mov	 rax, QWORD PTR Pixel$6[rsp]
  000fd	48 83 c0 04	 add	 rax, 4
  00101	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 186  : 		}

  00106	e9 4f ff ff ff	 jmp	 $LN5@RenderWeir
$LN6@RenderWeir:

; 187  : 
; 188  :         Row += Buffer->Pitch;

  0010b	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00110	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  00114	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  00119	48 03 c8	 add	 rcx, rax
  0011c	48 8b c1	 mov	 rax, rcx
  0011f	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 189  :     }

  00124	e9 01 ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 190  : }

  00129	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012d	c3		 ret	 0
?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 160  : internal win32_window_dimension Win32GetWindowDimension(HWND Window) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 161  :     win32_window_dimension Result;
; 162  : 
; 163  :     RECT ClientRect;
; 164  :     GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 165  :     Result.Width = ClientRect.right - ClientRect.left;

  00028	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 166  :     Result.Height = ClientRect.bottom - ClientRect.top;

  00038	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 167  : 
; 168  :     return(Result);

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 169  : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DirectSound$1 = 32
Error$2 = 40
Error$3 = 44
DirectSoundCreate$4 = 48
PrimaryBuffer$5 = 56
DSoundLibrary$ = 64
BufferDescription$6 = 72
WaveFormat$7 = 112
BufferDescription$8 = 136
__$ArrayPad$ = 176
Window$ = 208
SamplesPerSecond$ = 216
BufferSize$ = 224
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z PROC		; Win32InitDSound

; 96   : Win32InitDSound(HWND Window, int32 SamplesPerSecond, int32 BufferSize) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 97   :     // load the library
; 98   :     HMODULE DSoundLibrary = LoadLibraryA("dsound.dll");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84300
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00035	48 89 44 24 40	 mov	 QWORD PTR DSoundLibrary$[rsp], rax

; 99   : 
; 100  :     if(DSoundLibrary) {

  0003a	48 83 7c 24 40
	00		 cmp	 QWORD PTR DSoundLibrary$[rsp], 0
  00040	0f 84 cb 01 00
	00		 je	 $LN2@Win32InitD

; 101  :         // get a DirectSound object
; 102  :         direct_sound_create *DirectSoundCreate = (direct_sound_create *)GetProcAddress(DSoundLibrary, "DirectSoundCreate");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG84302
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR DSoundLibrary$[rsp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00058	48 89 44 24 30	 mov	 QWORD PTR DirectSoundCreate$4[rsp], rax

; 103  :         // TODO double-check that this works on XP -- 7 or 8?
; 104  :         LPDIRECTSOUND DirectSound;
; 105  :         if(DirectSoundCreate && SUCCEEDED(DirectSoundCreate(0, &DirectSound, 0))) {

  0005d	48 83 7c 24 30
	00		 cmp	 QWORD PTR DirectSoundCreate$4[rsp], 0
  00063	0f 84 a8 01 00
	00		 je	 $LN3@Win32InitD
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	48 8d 54 24 20	 lea	 rdx, QWORD PTR DirectSound$1[rsp]
  00071	33 c9		 xor	 ecx, ecx
  00073	ff 54 24 30	 call	 QWORD PTR DirectSoundCreate$4[rsp]
  00077	85 c0		 test	 eax, eax
  00079	0f 8c 92 01 00
	00		 jl	 $LN3@Win32InitD

; 106  :             WAVEFORMATEX WaveFormat = {};

  0007f	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  00084	48 8b f8	 mov	 rdi, rax
  00087	33 c0		 xor	 eax, eax
  00089	b9 12 00 00 00	 mov	 ecx, 18
  0008e	f3 aa		 rep stosb

; 107  :             WaveFormat.wFormatTag = WAVE_FORMAT_PCM;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	66 89 44 24 70	 mov	 WORD PTR WaveFormat$7[rsp], ax

; 108  :             WaveFormat.nChannels = 2;

  0009a	b8 02 00 00 00	 mov	 eax, 2
  0009f	66 89 44 24 72	 mov	 WORD PTR WaveFormat$7[rsp+2], ax

; 109  :             WaveFormat.nSamplesPerSec = SamplesPerSecond;

  000a4	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR SamplesPerSecond$[rsp]
  000ab	89 44 24 74	 mov	 DWORD PTR WaveFormat$7[rsp+4], eax

; 110  :             WaveFormat.wBitsPerSample = 16;

  000af	b8 10 00 00 00	 mov	 eax, 16
  000b4	66 89 44 24 7e	 mov	 WORD PTR WaveFormat$7[rsp+14], ax

; 111  :             WaveFormat.nBlockAlign = (WaveFormat.nChannels*WaveFormat.wBitsPerSample) / 8;

  000b9	0f b7 44 24 72	 movzx	 eax, WORD PTR WaveFormat$7[rsp+2]
  000be	0f b7 4c 24 7e	 movzx	 ecx, WORD PTR WaveFormat$7[rsp+14]
  000c3	0f af c1	 imul	 eax, ecx
  000c6	99		 cdq
  000c7	83 e2 07	 and	 edx, 7
  000ca	03 c2		 add	 eax, edx
  000cc	c1 f8 03	 sar	 eax, 3
  000cf	66 89 44 24 7c	 mov	 WORD PTR WaveFormat$7[rsp+12], ax

; 112  :             WaveFormat.nAvgBytesPerSec = WaveFormat.nSamplesPerSec*WaveFormat.nBlockAlign;

  000d4	0f b7 44 24 7c	 movzx	 eax, WORD PTR WaveFormat$7[rsp+12]
  000d9	8b 4c 24 74	 mov	 ecx, DWORD PTR WaveFormat$7[rsp+4]
  000dd	0f af c8	 imul	 ecx, eax
  000e0	8b c1		 mov	 eax, ecx
  000e2	89 44 24 78	 mov	 DWORD PTR WaveFormat$7[rsp+8], eax

; 113  :             WaveFormat.cbSize = 0;

  000e6	33 c0		 xor	 eax, eax
  000e8	66 89 84 24 80
	00 00 00	 mov	 WORD PTR WaveFormat$7[rsp+16], ax

; 114  : 
; 115  :             if(SUCCEEDED(DirectSound->SetCooperativeLevel(Window, DSSCL_PRIORITY))) {

  000f0	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	41 b8 02 00 00
	00		 mov	 r8d, 2
  000fe	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR Window$[rsp]
  00106	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  0010b	ff 50 30	 call	 QWORD PTR [rax+48]
  0010e	85 c0		 test	 eax, eax
  00110	0f 8c 86 00 00
	00		 jl	 $LN5@Win32InitD

; 116  :                 DSBUFFERDESC BufferDescription = {0};

  00116	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 0
  00121	48 8d 84 24 8c
	00 00 00	 lea	 rax, QWORD PTR BufferDescription$8[rsp+4]
  00129	48 8b f8	 mov	 rdi, rax
  0012c	33 c0		 xor	 eax, eax
  0012e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00133	f3 aa		 rep stosb

; 117  :                 BufferDescription.dwSize = sizeof(BufferDescription);

  00135	c7 84 24 88 00
	00 00 28 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 40 ; 00000028H

; 118  :                 BufferDescription.dwFlags = DSBCAPS_PRIMARYBUFFER;

  00140	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp+4], 1

; 119  :                 // TODO DSBCAPS_GLOBALFOCUS?
; 120  : 
; 121  :                 LPDIRECTSOUNDBUFFER PrimaryBuffer;
; 122  : 
; 123  :                 if (SUCCEEDED(DirectSound->CreateSoundBuffer(&BufferDescription, &PrimaryBuffer, 0))) {

  0014b	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  00150	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00153	45 33 c9	 xor	 r9d, r9d
  00156	4c 8d 44 24 38	 lea	 r8, QWORD PTR PrimaryBuffer$5[rsp]
  0015b	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR BufferDescription$8[rsp]
  00163	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  00168	ff 50 18	 call	 QWORD PTR [rax+24]
  0016b	85 c0		 test	 eax, eax
  0016d	7c 2d		 jl	 SHORT $LN7@Win32InitD

; 124  :                     HRESULT Error = PrimaryBuffer->SetFormat(&WaveFormat);

  0016f	48 8b 44 24 38	 mov	 rax, QWORD PTR PrimaryBuffer$5[rsp]
  00174	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00177	48 8d 54 24 70	 lea	 rdx, QWORD PTR WaveFormat$7[rsp]
  0017c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR PrimaryBuffer$5[rsp]
  00181	ff 50 70	 call	 QWORD PTR [rax+112]
  00184	89 44 24 2c	 mov	 DWORD PTR Error$3[rsp], eax

; 125  :                     if(SUCCEEDED(Error)) {

  00188	83 7c 24 2c 00	 cmp	 DWORD PTR Error$3[rsp], 0
  0018d	7c 0d		 jl	 SHORT $LN9@Win32InitD

; 126  :                         OutputDebugStringA("Primary buffer format was set.\n");

  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84311
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN9@Win32InitD:
$LN7@Win32InitD:
$LN5@Win32InitD:

; 127  :                     }
; 128  :                     else {
; 129  :                         // TODO Diagnostic
; 130  :                     }
; 131  :                 }
; 132  :                 else {
; 133  :                     // TODO Diagnostic
; 134  :                 }
; 135  :             }
; 136  :             else {
; 137  :                 // TODO Diagnostic
; 138  :             }
; 139  :             // create a secondary buffer
; 140  :             // TODO DSBCAPS_GETCURENTPOSITION2?
; 141  :             DSBUFFERDESC BufferDescription = {0};

  0019c	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 0
  001a4	48 8d 44 24 4c	 lea	 rax, QWORD PTR BufferDescription$6[rsp+4]
  001a9	48 8b f8	 mov	 rdi, rax
  001ac	33 c0		 xor	 eax, eax
  001ae	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001b3	f3 aa		 rep stosb

; 142  :             BufferDescription.dwSize = sizeof(BufferDescription);

  001b5	c7 44 24 48 28
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 40 ; 00000028H

; 143  :             BufferDescription.dwFlags = 0;

  001bd	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp+4], 0

; 144  :             BufferDescription.dwBufferBytes = BufferSize;

  001c5	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR BufferSize$[rsp]
  001cc	89 44 24 50	 mov	 DWORD PTR BufferDescription$6[rsp+8], eax

; 145  :             BufferDescription.lpwfxFormat = &WaveFormat;

  001d0	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  001d5	48 89 44 24 58	 mov	 QWORD PTR BufferDescription$6[rsp+16], rax

; 146  :             HRESULT Error = DirectSound->CreateSoundBuffer(&BufferDescription, &GlobalSecondaryBuffer, 0);

  001da	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  001df	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e2	45 33 c9	 xor	 r9d, r9d
  001e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001ec	48 8d 54 24 48	 lea	 rdx, QWORD PTR BufferDescription$6[rsp]
  001f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  001f6	ff 50 18	 call	 QWORD PTR [rax+24]
  001f9	89 44 24 28	 mov	 DWORD PTR Error$2[rsp], eax

; 147  : 
; 148  :             if(SUCCEEDED(Error)) {

  001fd	83 7c 24 28 00	 cmp	 DWORD PTR Error$2[rsp], 0
  00202	7c 0d		 jl	 SHORT $LN11@Win32InitD

; 149  :                 OutputDebugStringA("Secondary buffer created successfuly\n");

  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84313
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN11@Win32InitD:
$LN3@Win32InitD:
$LN2@Win32InitD:

; 150  :             }
; 151  :         }
; 152  :         else {
; 153  :             // TODO Diagnositc
; 154  :         }
; 155  :     }
; 156  : }

  00211	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00219	48 33 cc	 xor	 rcx, rsp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00228	5f		 pop	 rdi
  00229	c3		 ret	 0
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ENDP		; Win32InitDSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
XInputLibrary$ = 32
?Wind32LoadXInput@@YAXXZ PROC				; Wind32LoadXInput

; 73   : Wind32LoadXInput(void) {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 74   :     // TODO Test on windows 8
; 75   :     HMODULE XInputLibrary = LoadLibraryA("xinput1_4.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84271
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 76   :     if(!XInputLibrary) {

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	75 12		 jne	 SHORT $LN2@Wind32Load

; 77   :         // TODO Diagnostic
; 78   :         XInputLibrary = LoadLibraryA("xinput1_3.dll");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84273
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0002b	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN2@Wind32Load:

; 79   :     }
; 80   :     if(XInputLibrary) {

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00036	74 62		 je	 SHORT $LN3@Wind32Load

; 81   :         XInputGetState = (x_input_get_state *)GetProcAddress(XInputLibrary, "XInputGetState" );

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG84276
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0004a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax

; 82   :         if(!XInputGetState) {XInputGetState = XInputGetStateStub;}

  00051	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, 0
  00059	75 0e		 jne	 SHORT $LN5@Wind32Load
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetStateStub
  00062	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax
$LN5@Wind32Load:

; 83   :         XInputSetState = (x_input_set_state *)GetProcAddress(XInputLibrary, "XInputSetState" );

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG84278
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0007b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax

; 84   :         if(!XInputSetState) {XInputSetState = XInputSetStateStub;}

  00082	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, 0
  0008a	75 0e		 jne	 SHORT $LN6@Wind32Load
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
  00093	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax
$LN6@Wind32Load:
$LN3@Wind32Load:

; 85   : 
; 86   :         // TODO Diagnostic
; 87   :     }
; 88   :     else {
; 89   :         // TODO Diagnostic
; 90   :     }
; 91   : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
?Wind32LoadXInput@@YAXXZ ENDP				; Wind32LoadXInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pVibration$ = 16
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z PROC	; XInputSetStateStub

; 61   : X_INPUT_SET_STATE(XInputSetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 62   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 63   : }

  0000e	c3		 ret	 0
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ENDP	; XInputSetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z PROC	; XInputGetStateStub

; 52   : X_INPUT_GET_STATE(XInputGetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 53   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 54   : }

  0000e	c3		 ret	 0
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ENDP	; XInputGetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv222 = 96
tv227 = 97
tv192 = 98
tv232 = 99
tv202 = 100
tv237 = 101
tv212 = 102
SoundIsPlaying$1 = 103
tv197 = 104
tv207 = 105
tv155 = 106
tv217 = 107
ToneVolume$2 = 108
RunningSampleIndex$3 = 112
Pad$4 = 120
SampleOut$5 = 128
ByteToLock$6 = 136
BytesToWrite$7 = 140
SampleValue$8 = 144
SampleValue$9 = 148
BytesPerSample$10 = 152
SecondaryBufferSize$11 = 156
ControllerIndex$12 = 160
PlayCursor$13 = 164
SampleIndex$14 = 168
XButton$15 = 172
YButton$16 = 173
RightShoulder$17 = 174
Up$18 = 175
StickY$19 = 176
SamplesPerSecond$20 = 180
AButton$21 = 184
YOffset$22 = 188
BButton$23 = 192
XOffset$24 = 196
StickX$25 = 200
SampleIndex$26 = 204
Left$27 = 208
Back$28 = 209
Down$29 = 210
LeftShoulder$30 = 211
Start$31 = 212
Right$32 = 213
Region2Size$33 = 216
HalfSquareWavePeriod$34 = 220
tv301 = 224
Region1Size$35 = 228
tv286 = 232
Window$36 = 240
tv300 = 248
Region1SampleCount$37 = 252
Region2SampleCount$38 = 256
ToneHz$39 = 260
tv285 = 264
SquareWavePeriod$40 = 268
Region2$41 = 272
Dimension$42 = 280
Region1$43 = 288
$T44 = 296
DeviceContext$45 = 304
WriteCursor$46 = 312
WindowClass$ = 320
Message$47 = 400
ControllerState$48 = 448
__$ArrayPad$ = 464
Instance$ = 496
PrevInstance$ = 504
CmdLine$ = 512
ShowCode$ = 520
WinMain	PROC

; 353  : ) {

$LN55:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec e0 01
	00 00		 sub	 rsp, 480		; 000001e0H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 354  : 
; 355  :     Wind32LoadXInput();

  0002e	e8 00 00 00 00	 call	 ?Wind32LoadXInput@@YAXXZ ; Wind32LoadXInput

; 356  : 
; 357  :     WNDCLASSA WindowClass = {};

  00033	48 8d 84 24 40
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00045	f3 aa		 rep stosb

; 358  : 
; 359  :     Win32ResizeDIBSection(&GlobalBackbuffer, 1280, 720);

  00047	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  0004d	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00059	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 360  :     
; 361  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0005e	c7 84 24 40 01
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 362  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  00070	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 363  :     WindowClass.hInstance = Instance;

  00078	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00080	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 364  : //    WindowClass.hIcon;
; 365  :     WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG84490
  0008f	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 366  : 
; 367  :     if (RegisterClass(&WindowClass)) {

  00097	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000a5	0f b7 c0	 movzx	 eax, ax
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 2e 08 00
	00		 je	 $LN15@WinMain

; 368  :         HWND Window = CreateWindowExA(

  000b0	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000b9	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000c1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000c6	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000cf	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000d8	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000e0	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000e8	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000f0	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000f8	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG84493
  00105	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0010d	33 c9		 xor	 ecx, ecx
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00115	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR Window$36[rsp], rax

; 369  :             0,
; 370  :             WindowClass.lpszClassName,
; 371  :             "Handmade Hero",
; 372  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 373  :             CW_USEDEFAULT,
; 374  :             CW_USEDEFAULT,
; 375  :             CW_USEDEFAULT,
; 376  :             CW_USEDEFAULT,
; 377  :             0,
; 378  :             0,
; 379  :             Instance,
; 380  :             0
; 381  :         );
; 382  :         if(Window){

  0011d	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR Window$36[rsp], 0
  00126	0f 84 b2 07 00
	00		 je	 $LN17@WinMain

; 383  :             HDC DeviceContext = GetDC(Window);

  0012c	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$36[rsp]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  0013a	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR DeviceContext$45[rsp], rax

; 384  : 
; 385  :             // Graphics test
; 386  :             int XOffset = 0;

  00142	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR XOffset$24[rsp], 0

; 387  :             int YOffset = 0;

  0014d	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR YOffset$22[rsp], 0

; 388  : 
; 389  :             // Sound Test
; 390  :             int SamplesPerSecond = 48000;

  00158	c7 84 24 b4 00
	00 00 80 bb 00
	00		 mov	 DWORD PTR SamplesPerSecond$20[rsp], 48000 ; 0000bb80H

; 391  :             int ToneHz = 256;

  00163	c7 84 24 04 01
	00 00 00 01 00
	00		 mov	 DWORD PTR ToneHz$39[rsp], 256 ; 00000100H

; 392  :             int16 ToneVolume = 3000;

  0016e	b8 b8 0b 00 00	 mov	 eax, 3000		; 00000bb8H
  00173	66 89 44 24 6c	 mov	 WORD PTR ToneVolume$2[rsp], ax

; 393  :             uint32 RunningSampleIndex = 0;

  00178	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR RunningSampleIndex$3[rsp], 0

; 394  :             int SquareWavePeriod = SamplesPerSecond/ToneHz;

  00180	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR SamplesPerSecond$20[rsp]
  00187	99		 cdq
  00188	f7 bc 24 04 01
	00 00		 idiv	 DWORD PTR ToneHz$39[rsp]
  0018f	89 84 24 0c 01
	00 00		 mov	 DWORD PTR SquareWavePeriod$40[rsp], eax

; 395  :             int HalfSquareWavePeriod = SquareWavePeriod/2;

  00196	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR SquareWavePeriod$40[rsp]
  0019d	99		 cdq
  0019e	2b c2		 sub	 eax, edx
  001a0	d1 f8		 sar	 eax, 1
  001a2	89 84 24 dc 00
	00 00		 mov	 DWORD PTR HalfSquareWavePeriod$34[rsp], eax

; 396  :             int BytesPerSample = sizeof(int16)*2;

  001a9	c7 84 24 98 00
	00 00 04 00 00
	00		 mov	 DWORD PTR BytesPerSample$10[rsp], 4

; 397  :             int SecondaryBufferSize = SamplesPerSecond*BytesPerSample;

  001b4	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR SamplesPerSecond$20[rsp]
  001bb	0f af 84 24 98
	00 00 00	 imul	 eax, DWORD PTR BytesPerSample$10[rsp]
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR SecondaryBufferSize$11[rsp], eax

; 398  : 
; 399  :             Win32InitDSound(Window, SamplesPerSecond, SecondaryBufferSize);

  001ca	44 8b 84 24 9c
	00 00 00	 mov	 r8d, DWORD PTR SecondaryBufferSize$11[rsp]
  001d2	8b 94 24 b4 00
	00 00		 mov	 edx, DWORD PTR SamplesPerSecond$20[rsp]
  001d9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$36[rsp]
  001e1	e8 00 00 00 00	 call	 ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ; Win32InitDSound

; 400  :             bool SoundIsPlaying = false;

  001e6	c6 44 24 67 00	 mov	 BYTE PTR SoundIsPlaying$1[rsp], 0

; 401  : 
; 402  :             
; 403  :             GlobalRunning = true;

  001eb	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1
$LN2@WinMain:

; 404  :             while (GlobalRunning) {

  001f2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA
  001f9	85 c0		 test	 eax, eax
  001fb	0f 84 dd 06 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 405  :                 MSG Message;
; 406  :                 while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  00201	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00209	45 33 c9	 xor	 r9d, r9d
  0020c	45 33 c0	 xor	 r8d, r8d
  0020f	33 d2		 xor	 edx, edx
  00211	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR Message$47[rsp]
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  0021f	85 c0		 test	 eax, eax
  00221	74 2f		 je	 SHORT $LN5@WinMain

; 407  :                     if(Message.message == WM_QUIT) {

  00223	83 bc 24 98 01
	00 00 12	 cmp	 DWORD PTR Message$47[rsp+8], 18
  0022b	75 07		 jne	 SHORT $LN19@WinMain

; 408  :                         GlobalRunning = false;

  0022d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN19@WinMain:

; 409  :                     }
; 410  : 
; 411  :                     // TODO Should we poll this more frequently
; 412  : 
; 413  :                     TranslateMessage(&Message);

  00234	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR Message$47[rsp]
  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 414  :                     DispatchMessageA(&Message);

  00242	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR Message$47[rsp]
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 415  :                 }

  00250	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 416  : 
; 417  :                 for(
; 418  :                     DWORD ControllerIndex = 0;

  00252	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ControllerIndex$12[rsp], 0
  0025d	eb 10		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:

; 420  :                     ++ControllerIndex

  0025f	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR ControllerIndex$12[rsp]
  00266	ff c0		 inc	 eax
  00268	89 84 24 a0 00
	00 00		 mov	 DWORD PTR ControllerIndex$12[rsp], eax
$LN8@WinMain:

; 419  :                     ControllerIndex < XUSER_MAX_COUNT;

  0026f	83 bc 24 a0 00
	00 00 04	 cmp	 DWORD PTR ControllerIndex$12[rsp], 4
  00277	0f 83 56 02 00
	00		 jae	 $LN7@WinMain

; 421  :                 ) {
; 422  :                     XINPUT_STATE ControllerState;
; 423  :                     if(XInputGetState(ControllerIndex, &ControllerState) == ERROR_SUCCESS) {

  0027d	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR ControllerState$48[rsp]
  00285	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR ControllerIndex$12[rsp]
  0028c	ff 15 00 00 00
	00		 call	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA
  00292	85 c0		 test	 eax, eax
  00294	0f 85 34 02 00
	00		 jne	 $LN20@WinMain

; 424  :                         // NOTE Controller is plugged in
; 425  :                         // TODO See if ControllerState.dwPacketNumber increments
; 426  :                         XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  0029a	48 8d 84 24 c4
	01 00 00	 lea	 rax, QWORD PTR ControllerState$48[rsp+4]
  002a2	48 89 44 24 78	 mov	 QWORD PTR Pad$4[rsp], rax

; 427  : 
; 428  :                         bool Up = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);

  002a7	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  002ac	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002af	83 e0 01	 and	 eax, 1
  002b2	88 84 24 af 00
	00 00		 mov	 BYTE PTR Up$18[rsp], al

; 429  :                         bool Down = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);

  002b9	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  002be	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002c1	83 e0 02	 and	 eax, 2
  002c4	85 c0		 test	 eax, eax
  002c6	74 07		 je	 SHORT $LN29@WinMain
  002c8	c6 44 24 6a 01	 mov	 BYTE PTR tv155[rsp], 1
  002cd	eb 05		 jmp	 SHORT $LN30@WinMain
$LN29@WinMain:
  002cf	c6 44 24 6a 00	 mov	 BYTE PTR tv155[rsp], 0
$LN30@WinMain:
  002d4	0f b6 44 24 6a	 movzx	 eax, BYTE PTR tv155[rsp]
  002d9	88 84 24 d2 00
	00 00		 mov	 BYTE PTR Down$29[rsp], al

; 430  :                         bool Left = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);

  002e0	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  002e5	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002e8	83 e0 04	 and	 eax, 4
  002eb	85 c0		 test	 eax, eax
  002ed	74 07		 je	 SHORT $LN31@WinMain
  002ef	c6 44 24 62 01	 mov	 BYTE PTR tv192[rsp], 1
  002f4	eb 05		 jmp	 SHORT $LN32@WinMain
$LN31@WinMain:
  002f6	c6 44 24 62 00	 mov	 BYTE PTR tv192[rsp], 0
$LN32@WinMain:
  002fb	0f b6 44 24 62	 movzx	 eax, BYTE PTR tv192[rsp]
  00300	88 84 24 d0 00
	00 00		 mov	 BYTE PTR Left$27[rsp], al

; 431  :                         bool Right = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

  00307	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  0030c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0030f	83 e0 08	 and	 eax, 8
  00312	85 c0		 test	 eax, eax
  00314	74 07		 je	 SHORT $LN33@WinMain
  00316	c6 44 24 68 01	 mov	 BYTE PTR tv197[rsp], 1
  0031b	eb 05		 jmp	 SHORT $LN34@WinMain
$LN33@WinMain:
  0031d	c6 44 24 68 00	 mov	 BYTE PTR tv197[rsp], 0
$LN34@WinMain:
  00322	0f b6 44 24 68	 movzx	 eax, BYTE PTR tv197[rsp]
  00327	88 84 24 d5 00
	00 00		 mov	 BYTE PTR Right$32[rsp], al

; 432  :                         bool Start = (Pad->wButtons & XINPUT_GAMEPAD_START);

  0032e	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  00333	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00336	83 e0 10	 and	 eax, 16
  00339	85 c0		 test	 eax, eax
  0033b	74 07		 je	 SHORT $LN35@WinMain
  0033d	c6 44 24 64 01	 mov	 BYTE PTR tv202[rsp], 1
  00342	eb 05		 jmp	 SHORT $LN36@WinMain
$LN35@WinMain:
  00344	c6 44 24 64 00	 mov	 BYTE PTR tv202[rsp], 0
$LN36@WinMain:
  00349	0f b6 44 24 64	 movzx	 eax, BYTE PTR tv202[rsp]
  0034e	88 84 24 d4 00
	00 00		 mov	 BYTE PTR Start$31[rsp], al

; 433  :                         bool Back = (Pad->wButtons & XINPUT_GAMEPAD_BACK);

  00355	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  0035a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0035d	83 e0 20	 and	 eax, 32			; 00000020H
  00360	85 c0		 test	 eax, eax
  00362	74 07		 je	 SHORT $LN37@WinMain
  00364	c6 44 24 69 01	 mov	 BYTE PTR tv207[rsp], 1
  00369	eb 05		 jmp	 SHORT $LN38@WinMain
$LN37@WinMain:
  0036b	c6 44 24 69 00	 mov	 BYTE PTR tv207[rsp], 0
$LN38@WinMain:
  00370	0f b6 44 24 69	 movzx	 eax, BYTE PTR tv207[rsp]
  00375	88 84 24 d1 00
	00 00		 mov	 BYTE PTR Back$28[rsp], al

; 434  :                         bool LeftShoulder = (Pad->wButtons & XINPUT_GAMEPAD_LEFT_SHOULDER);

  0037c	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  00381	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00384	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00389	85 c0		 test	 eax, eax
  0038b	74 07		 je	 SHORT $LN39@WinMain
  0038d	c6 44 24 66 01	 mov	 BYTE PTR tv212[rsp], 1
  00392	eb 05		 jmp	 SHORT $LN40@WinMain
$LN39@WinMain:
  00394	c6 44 24 66 00	 mov	 BYTE PTR tv212[rsp], 0
$LN40@WinMain:
  00399	0f b6 44 24 66	 movzx	 eax, BYTE PTR tv212[rsp]
  0039e	88 84 24 d3 00
	00 00		 mov	 BYTE PTR LeftShoulder$30[rsp], al

; 435  :                         bool RightShoulder = (Pad->wButtons & XINPUT_GAMEPAD_RIGHT_SHOULDER);

  003a5	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  003aa	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003ad	25 00 02 00 00	 and	 eax, 512		; 00000200H
  003b2	85 c0		 test	 eax, eax
  003b4	74 07		 je	 SHORT $LN41@WinMain
  003b6	c6 44 24 6b 01	 mov	 BYTE PTR tv217[rsp], 1
  003bb	eb 05		 jmp	 SHORT $LN42@WinMain
$LN41@WinMain:
  003bd	c6 44 24 6b 00	 mov	 BYTE PTR tv217[rsp], 0
$LN42@WinMain:
  003c2	0f b6 44 24 6b	 movzx	 eax, BYTE PTR tv217[rsp]
  003c7	88 84 24 ae 00
	00 00		 mov	 BYTE PTR RightShoulder$17[rsp], al

; 436  :                         bool AButton = (Pad->wButtons & XINPUT_GAMEPAD_A);

  003ce	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  003d3	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003d6	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  003db	85 c0		 test	 eax, eax
  003dd	74 07		 je	 SHORT $LN43@WinMain
  003df	c6 44 24 60 01	 mov	 BYTE PTR tv222[rsp], 1
  003e4	eb 05		 jmp	 SHORT $LN44@WinMain
$LN43@WinMain:
  003e6	c6 44 24 60 00	 mov	 BYTE PTR tv222[rsp], 0
$LN44@WinMain:
  003eb	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv222[rsp]
  003f0	88 84 24 b8 00
	00 00		 mov	 BYTE PTR AButton$21[rsp], al

; 437  :                         bool BButton = (Pad->wButtons & XINPUT_GAMEPAD_B);

  003f7	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  003fc	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003ff	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00404	85 c0		 test	 eax, eax
  00406	74 07		 je	 SHORT $LN45@WinMain
  00408	c6 44 24 61 01	 mov	 BYTE PTR tv227[rsp], 1
  0040d	eb 05		 jmp	 SHORT $LN46@WinMain
$LN45@WinMain:
  0040f	c6 44 24 61 00	 mov	 BYTE PTR tv227[rsp], 0
$LN46@WinMain:
  00414	0f b6 44 24 61	 movzx	 eax, BYTE PTR tv227[rsp]
  00419	88 84 24 c0 00
	00 00		 mov	 BYTE PTR BButton$23[rsp], al

; 438  :                         bool XButton = (Pad->wButtons & XINPUT_GAMEPAD_X);

  00420	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  00425	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00428	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0042d	85 c0		 test	 eax, eax
  0042f	74 07		 je	 SHORT $LN47@WinMain
  00431	c6 44 24 63 01	 mov	 BYTE PTR tv232[rsp], 1
  00436	eb 05		 jmp	 SHORT $LN48@WinMain
$LN47@WinMain:
  00438	c6 44 24 63 00	 mov	 BYTE PTR tv232[rsp], 0
$LN48@WinMain:
  0043d	0f b6 44 24 63	 movzx	 eax, BYTE PTR tv232[rsp]
  00442	88 84 24 ac 00
	00 00		 mov	 BYTE PTR XButton$15[rsp], al

; 439  :                         bool YButton = (Pad->wButtons & XINPUT_GAMEPAD_Y);

  00449	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  0044e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00451	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00456	85 c0		 test	 eax, eax
  00458	74 07		 je	 SHORT $LN49@WinMain
  0045a	c6 44 24 65 01	 mov	 BYTE PTR tv237[rsp], 1
  0045f	eb 05		 jmp	 SHORT $LN50@WinMain
$LN49@WinMain:
  00461	c6 44 24 65 00	 mov	 BYTE PTR tv237[rsp], 0
$LN50@WinMain:
  00466	0f b6 44 24 65	 movzx	 eax, BYTE PTR tv237[rsp]
  0046b	88 84 24 ad 00
	00 00		 mov	 BYTE PTR YButton$16[rsp], al

; 440  :                         
; 441  :                         int16 StickX = Pad->sThumbLX;

  00472	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  00477	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0047b	66 89 84 24 c8
	00 00 00	 mov	 WORD PTR StickX$25[rsp], ax

; 442  :                         int16 StickY = Pad->sThumbLY;

  00483	48 8b 44 24 78	 mov	 rax, QWORD PTR Pad$4[rsp]
  00488	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0048c	66 89 84 24 b0
	00 00 00	 mov	 WORD PTR StickY$19[rsp], ax

; 443  : 
; 444  :                         XOffset += StickX >> 12;

  00494	0f bf 84 24 c8
	00 00 00	 movsx	 eax, WORD PTR StickX$25[rsp]
  0049c	c1 f8 0c	 sar	 eax, 12
  0049f	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR XOffset$24[rsp]
  004a6	03 c8		 add	 ecx, eax
  004a8	8b c1		 mov	 eax, ecx
  004aa	89 84 24 c4 00
	00 00		 mov	 DWORD PTR XOffset$24[rsp], eax

; 445  :                         YOffset += StickY >> 12;

  004b1	0f bf 84 24 b0
	00 00 00	 movsx	 eax, WORD PTR StickY$19[rsp]
  004b9	c1 f8 0c	 sar	 eax, 12
  004bc	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR YOffset$22[rsp]
  004c3	03 c8		 add	 ecx, eax
  004c5	8b c1		 mov	 eax, ecx
  004c7	89 84 24 bc 00
	00 00		 mov	 DWORD PTR YOffset$22[rsp], eax
$LN20@WinMain:

; 446  :                     }
; 447  :                     else {
; 448  :                         // NOTE Controller is not available
; 449  :                     }
; 450  :                 }

  004ce	e9 8c fd ff ff	 jmp	 $LN6@WinMain
$LN7@WinMain:

; 451  : 
; 452  :                 RenderWeirdGradient(&GlobalBackbuffer, XOffset, YOffset);

  004d3	44 8b 84 24 bc
	00 00 00	 mov	 r8d, DWORD PTR YOffset$22[rsp]
  004db	8b 94 24 c4 00
	00 00		 mov	 edx, DWORD PTR XOffset$24[rsp]
  004e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  004e9	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; RenderWeirdGradient

; 453  : 
; 454  :                 // directsound output test
; 455  :                 DWORD PlayCursor;
; 456  :                 DWORD WriteCursor;
; 457  :                 if(SUCCEEDED(GlobalSecondaryBuffer->GetCurrentPosition(&PlayCursor, &WriteCursor))) {

  004ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  004f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004f8	4c 8d 84 24 38
	01 00 00	 lea	 r8, QWORD PTR WriteCursor$46[rsp]
  00500	48 8d 94 24 a4
	00 00 00	 lea	 rdx, QWORD PTR PlayCursor$13[rsp]
  00508	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0050f	ff 50 20	 call	 QWORD PTR [rax+32]
  00512	85 c0		 test	 eax, eax
  00514	0f 8c 49 03 00
	00		 jl	 $LN22@WinMain

; 458  :                     DWORD ByteToLock = (RunningSampleIndex*BytesPerSample) % SecondaryBufferSize;;

  0051a	8b 44 24 70	 mov	 eax, DWORD PTR RunningSampleIndex$3[rsp]
  0051e	0f af 84 24 98
	00 00 00	 imul	 eax, DWORD PTR BytesPerSample$10[rsp]
  00526	33 d2		 xor	 edx, edx
  00528	f7 b4 24 9c 00
	00 00		 div	 DWORD PTR SecondaryBufferSize$11[rsp]
  0052f	8b c2		 mov	 eax, edx
  00531	89 84 24 88 00
	00 00		 mov	 DWORD PTR ByteToLock$6[rsp], eax

; 459  :                     DWORD BytesToWrite;
; 460  :                     if(ByteToLock == PlayCursor) {

  00538	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR PlayCursor$13[rsp]
  0053f	39 84 24 88 00
	00 00		 cmp	 DWORD PTR ByteToLock$6[rsp], eax
  00546	75 0e		 jne	 SHORT $LN23@WinMain

; 461  :                         BytesToWrite = SecondaryBufferSize;

  00548	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR SecondaryBufferSize$11[rsp]
  0054f	89 84 24 8c 00
	00 00		 mov	 DWORD PTR BytesToWrite$7[rsp], eax
$LN23@WinMain:

; 462  :                     }
; 463  :                     if(ByteToLock > PlayCursor) {

  00556	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR PlayCursor$13[rsp]
  0055d	39 84 24 88 00
	00 00		 cmp	 DWORD PTR ByteToLock$6[rsp], eax
  00564	76 34		 jbe	 SHORT $LN24@WinMain

; 464  :                         BytesToWrite = (SecondaryBufferSize - ByteToLock);

  00566	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ByteToLock$6[rsp]
  0056d	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR SecondaryBufferSize$11[rsp]
  00574	2b c8		 sub	 ecx, eax
  00576	8b c1		 mov	 eax, ecx
  00578	89 84 24 8c 00
	00 00		 mov	 DWORD PTR BytesToWrite$7[rsp], eax

; 465  :                         BytesToWrite += PlayCursor;

  0057f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR PlayCursor$13[rsp]
  00586	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR BytesToWrite$7[rsp]
  0058d	03 c8		 add	 ecx, eax
  0058f	8b c1		 mov	 eax, ecx
  00591	89 84 24 8c 00
	00 00		 mov	 DWORD PTR BytesToWrite$7[rsp], eax

; 466  :                     }
; 467  :                     else {

  00598	eb 19		 jmp	 SHORT $LN25@WinMain
$LN24@WinMain:

; 468  :                         BytesToWrite = PlayCursor - ByteToLock;

  0059a	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ByteToLock$6[rsp]
  005a1	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR PlayCursor$13[rsp]
  005a8	2b c8		 sub	 ecx, eax
  005aa	8b c1		 mov	 eax, ecx
  005ac	89 84 24 8c 00
	00 00		 mov	 DWORD PTR BytesToWrite$7[rsp], eax
$LN25@WinMain:

; 469  :                     }
; 470  : 
; 471  :                     // TODO More strenuous test
; 472  :                     VOID *Region1;
; 473  :                     DWORD Region1Size;
; 474  :                     VOID *Region2;
; 475  :                     DWORD Region2Size;
; 476  :                     if(SUCCEEDED(GlobalSecondaryBuffer->Lock(

  005b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  005ba	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005bd	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  005c5	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR Region2Size$33[rsp]
  005cd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005d2	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Region2$41[rsp]
  005da	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005df	48 8d 8c 24 e4
	00 00 00	 lea	 rcx, QWORD PTR Region1Size$35[rsp]
  005e7	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005ec	4c 8d 8c 24 20
	01 00 00	 lea	 r9, QWORD PTR Region1$43[rsp]
  005f4	44 8b 84 24 8c
	00 00 00	 mov	 r8d, DWORD PTR BytesToWrite$7[rsp]
  005fc	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR ByteToLock$6[rsp]
  00603	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0060a	ff 50 58	 call	 QWORD PTR [rax+88]
  0060d	85 c0		 test	 eax, eax
  0060f	0f 8c 4e 02 00
	00		 jl	 $LN26@WinMain

; 477  :                         ByteToLock, BytesToWrite,
; 478  :                         &Region1, &Region1Size,
; 479  :                         &Region2, &Region2Size,
; 480  :                         0
; 481  :                     ))) {
; 482  :                         //TODO Assert that Region1Size/Region2Size is valid
; 483  :                         //TODO Collapse these to loops
; 484  :                         DWORD Region1SampleCount = Region1Size/BytesPerSample;

  00615	33 d2		 xor	 edx, edx
  00617	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR Region1Size$35[rsp]
  0061e	f7 b4 24 98 00
	00 00		 div	 DWORD PTR BytesPerSample$10[rsp]
  00625	89 84 24 fc 00
	00 00		 mov	 DWORD PTR Region1SampleCount$37[rsp], eax

; 485  :                         int16 *SampleOut = (int16 *)Region1;

  0062c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR Region1$43[rsp]
  00634	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR SampleOut$5[rsp], rax

; 486  :                         for( DWORD SampleIndex = 0 ; SampleIndex < Region1SampleCount ; ++SampleIndex) {

  0063c	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR SampleIndex$26[rsp], 0
  00647	eb 10		 jmp	 SHORT $LN11@WinMain
$LN9@WinMain:
  00649	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR SampleIndex$26[rsp]
  00650	ff c0		 inc	 eax
  00652	89 84 24 cc 00
	00 00		 mov	 DWORD PTR SampleIndex$26[rsp], eax
$LN11@WinMain:
  00659	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR Region1SampleCount$37[rsp]
  00660	39 84 24 cc 00
	00 00		 cmp	 DWORD PTR SampleIndex$26[rsp], eax
  00667	0f 83 b2 00 00
	00		 jae	 $LN10@WinMain

; 487  :                             int16 SampleValue = ((RunningSampleIndex++ / HalfSquareWavePeriod) % 2) ? ToneVolume : -ToneVolume;

  0066d	33 d2		 xor	 edx, edx
  0066f	8b 44 24 70	 mov	 eax, DWORD PTR RunningSampleIndex$3[rsp]
  00673	f7 b4 24 dc 00
	00 00		 div	 DWORD PTR HalfSquareWavePeriod$34[rsp]
  0067a	33 d2		 xor	 edx, edx
  0067c	b9 02 00 00 00	 mov	 ecx, 2
  00681	f7 f1		 div	 ecx
  00683	8b c2		 mov	 eax, edx
  00685	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv285[rsp], eax
  0068c	8b 44 24 70	 mov	 eax, DWORD PTR RunningSampleIndex$3[rsp]
  00690	ff c0		 inc	 eax
  00692	89 44 24 70	 mov	 DWORD PTR RunningSampleIndex$3[rsp], eax
  00696	83 bc 24 08 01
	00 00 00	 cmp	 DWORD PTR tv285[rsp], 0
  0069e	74 0e		 je	 SHORT $LN51@WinMain
  006a0	0f bf 44 24 6c	 movsx	 eax, WORD PTR ToneVolume$2[rsp]
  006a5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv286[rsp], eax
  006ac	eb 0e		 jmp	 SHORT $LN52@WinMain
$LN51@WinMain:
  006ae	0f bf 44 24 6c	 movsx	 eax, WORD PTR ToneVolume$2[rsp]
  006b3	f7 d8		 neg	 eax
  006b5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv286[rsp], eax
$LN52@WinMain:
  006bc	0f b7 84 24 e8
	00 00 00	 movzx	 eax, WORD PTR tv286[rsp]
  006c4	66 89 84 24 90
	00 00 00	 mov	 WORD PTR SampleValue$8[rsp], ax

; 488  :                             *SampleOut++ = SampleValue;

  006cc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  006d4	0f b7 8c 24 90
	00 00 00	 movzx	 ecx, WORD PTR SampleValue$8[rsp]
  006dc	66 89 08	 mov	 WORD PTR [rax], cx
  006df	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  006e7	48 83 c0 02	 add	 rax, 2
  006eb	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR SampleOut$5[rsp], rax

; 489  :                             *SampleOut++ = SampleValue;

  006f3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  006fb	0f b7 8c 24 90
	00 00 00	 movzx	 ecx, WORD PTR SampleValue$8[rsp]
  00703	66 89 08	 mov	 WORD PTR [rax], cx
  00706	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  0070e	48 83 c0 02	 add	 rax, 2
  00712	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR SampleOut$5[rsp], rax

; 490  :                         }

  0071a	e9 2a ff ff ff	 jmp	 $LN9@WinMain
$LN10@WinMain:

; 491  :                         
; 492  :                         DWORD Region2SampleCount = Region2Size/BytesPerSample;

  0071f	33 d2		 xor	 edx, edx
  00721	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR Region2Size$33[rsp]
  00728	f7 b4 24 98 00
	00 00		 div	 DWORD PTR BytesPerSample$10[rsp]
  0072f	89 84 24 00 01
	00 00		 mov	 DWORD PTR Region2SampleCount$38[rsp], eax

; 493  :                         SampleOut = (int16 *)Region2;

  00736	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Region2$41[rsp]
  0073e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR SampleOut$5[rsp], rax

; 494  :                         for( DWORD SampleIndex = 0 ; SampleIndex < Region2SampleCount ; ++SampleIndex) {

  00746	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR SampleIndex$14[rsp], 0
  00751	eb 10		 jmp	 SHORT $LN14@WinMain
$LN12@WinMain:
  00753	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR SampleIndex$14[rsp]
  0075a	ff c0		 inc	 eax
  0075c	89 84 24 a8 00
	00 00		 mov	 DWORD PTR SampleIndex$14[rsp], eax
$LN14@WinMain:
  00763	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR Region2SampleCount$38[rsp]
  0076a	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR SampleIndex$14[rsp], eax
  00771	0f 83 b2 00 00
	00		 jae	 $LN13@WinMain

; 495  :                             int16 SampleValue = ((RunningSampleIndex++ / HalfSquareWavePeriod) % 2) ? ToneVolume : -ToneVolume;

  00777	33 d2		 xor	 edx, edx
  00779	8b 44 24 70	 mov	 eax, DWORD PTR RunningSampleIndex$3[rsp]
  0077d	f7 b4 24 dc 00
	00 00		 div	 DWORD PTR HalfSquareWavePeriod$34[rsp]
  00784	33 d2		 xor	 edx, edx
  00786	b9 02 00 00 00	 mov	 ecx, 2
  0078b	f7 f1		 div	 ecx
  0078d	8b c2		 mov	 eax, edx
  0078f	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv300[rsp], eax
  00796	8b 44 24 70	 mov	 eax, DWORD PTR RunningSampleIndex$3[rsp]
  0079a	ff c0		 inc	 eax
  0079c	89 44 24 70	 mov	 DWORD PTR RunningSampleIndex$3[rsp], eax
  007a0	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR tv300[rsp], 0
  007a8	74 0e		 je	 SHORT $LN53@WinMain
  007aa	0f bf 44 24 6c	 movsx	 eax, WORD PTR ToneVolume$2[rsp]
  007af	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv301[rsp], eax
  007b6	eb 0e		 jmp	 SHORT $LN54@WinMain
$LN53@WinMain:
  007b8	0f bf 44 24 6c	 movsx	 eax, WORD PTR ToneVolume$2[rsp]
  007bd	f7 d8		 neg	 eax
  007bf	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv301[rsp], eax
$LN54@WinMain:
  007c6	0f b7 84 24 e0
	00 00 00	 movzx	 eax, WORD PTR tv301[rsp]
  007ce	66 89 84 24 94
	00 00 00	 mov	 WORD PTR SampleValue$9[rsp], ax

; 496  :                             *SampleOut++ = SampleValue;

  007d6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  007de	0f b7 8c 24 94
	00 00 00	 movzx	 ecx, WORD PTR SampleValue$9[rsp]
  007e6	66 89 08	 mov	 WORD PTR [rax], cx
  007e9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  007f1	48 83 c0 02	 add	 rax, 2
  007f5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR SampleOut$5[rsp], rax

; 497  :                             *SampleOut++ = SampleValue;

  007fd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  00805	0f b7 8c 24 94
	00 00 00	 movzx	 ecx, WORD PTR SampleValue$9[rsp]
  0080d	66 89 08	 mov	 WORD PTR [rax], cx
  00810	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR SampleOut$5[rsp]
  00818	48 83 c0 02	 add	 rax, 2
  0081c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR SampleOut$5[rsp], rax

; 498  :                         }

  00824	e9 2a ff ff ff	 jmp	 $LN12@WinMain
$LN13@WinMain:

; 499  :                         GlobalSecondaryBuffer->Unlock(Region1, Region1Size, Region2, Region2Size);

  00829	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00830	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00833	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR Region2Size$33[rsp]
  0083a	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0083e	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR Region2$41[rsp]
  00846	44 8b 84 24 e4
	00 00 00	 mov	 r8d, DWORD PTR Region1Size$35[rsp]
  0084e	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR Region1$43[rsp]
  00856	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0085d	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
$LN26@WinMain:
$LN22@WinMain:

; 500  :                     }
; 501  :                 }
; 502  : 
; 503  :                 if(!SoundIsPlaying)

  00863	0f b6 44 24 67	 movzx	 eax, BYTE PTR SoundIsPlaying$1[rsp]
  00868	85 c0		 test	 eax, eax
  0086a	75 24		 jne	 SHORT $LN27@WinMain

; 504  :                 {
; 505  :                     GlobalSecondaryBuffer->Play(0, 0, DSBPLAY_LOOPING);

  0086c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00873	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00876	41 b9 01 00 00
	00		 mov	 r9d, 1
  0087c	45 33 c0	 xor	 r8d, r8d
  0087f	33 d2		 xor	 edx, edx
  00881	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00888	ff 50 60	 call	 QWORD PTR [rax+96]

; 506  :                     SoundIsPlaying = true;

  0088b	c6 44 24 67 01	 mov	 BYTE PTR SoundIsPlaying$1[rsp], 1
$LN27@WinMain:

; 507  :                 }
; 508  :                 
; 509  :                 win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  00890	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$36[rsp]
  00898	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  0089d	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR $T44[rsp], rax
  008a5	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR $T44[rsp]
  008ad	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR Dimension$42[rsp], rax

; 510  :                 Win32DisplayBufferInWindow(

  008b5	44 8b 8c 24 1c
	01 00 00	 mov	 r9d, DWORD PTR Dimension$42[rsp+4]
  008bd	44 8b 84 24 18
	01 00 00	 mov	 r8d, DWORD PTR Dimension$42[rsp]
  008c5	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR DeviceContext$45[rsp]
  008cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  008d4	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 511  :                     &GlobalBackbuffer, DeviceContext,
; 512  :                     Dimension.Width, Dimension.Height
; 513  :                 );
; 514  :             }

  008d9	e9 14 f9 ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN17@WinMain:
$LN15@WinMain:

; 515  :         }
; 516  :         else {
; 517  :             // TODO Logging
; 518  :         }
; 519  :     }
; 520  :     else{
; 521  :         // TODO Logging
; 522  :     }
; 523  :     return(0); 

  008de	33 c0		 xor	 eax, eax

; 524  : }

  008e0	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  008e8	48 33 cc	 xor	 rcx, rsp
  008eb	e8 00 00 00 00	 call	 __security_check_cookie
  008f0	48 81 c4 e0 01
	00 00		 add	 rsp, 480		; 000001e0H
  008f7	5f		 pop	 rdi
  008f8	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
