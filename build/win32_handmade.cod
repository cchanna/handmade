; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG82634 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG82637 DB	'WM_PAINT', 0aH, 00H
	ORG $+6
$SG82661 DB	'HandmadeHeroWindowClass', 00H
$SG82664 DB	'Handmade Hero', 00H
CONST	ENDS
PUBLIC	WinMain
PUBLIC	?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
PUBLIC	?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN12
	DD	imagerel $LN12+628
	DD	imagerel $unwind$WinMain
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z DD imagerel ?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z+272
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+269
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z+158
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN11
	DD	imagerel $LN11+471
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 041d01H
	DD	037011dH
	DD	060157016H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z DD 011701H
	DD	0e217H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 042e19H
	DD	027011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv64 = 64
Width$1 = 68
Y$2 = 72
Height$3 = 76
X$4 = 80
Dimension$5 = 88
Result$ = 96
DeviceContext$6 = 104
$T7 = 112
$T8 = 128
Paint$9 = 208
__$ArrayPad$ = 288
Window$ = 336
Message$ = 344
WParam$ = 352
LParam$ = 360
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 126  : ) {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 127  :     LRESULT Result = 0;

  0002e	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 128  : 
; 129  :     switch(Message)

  00037	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003e	89 44 24 40	 mov	 DWORD PTR tv64[rsp], eax
  00042	83 7c 24 40 02	 cmp	 DWORD PTR tv64[rsp], 2
  00047	74 44		 je	 SHORT $LN7@Win32MainW
  00049	83 7c 24 40 05	 cmp	 DWORD PTR tv64[rsp], 5
  0004e	74 1a		 je	 SHORT $LN4@Win32MainW
  00050	83 7c 24 40 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00055	74 42		 je	 SHORT $LN8@Win32MainW
  00057	83 7c 24 40 10	 cmp	 DWORD PTR tv64[rsp], 16
  0005c	74 11		 je	 SHORT $LN5@Win32MainW
  0005e	83 7c 24 40 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00063	74 16		 je	 SHORT $LN6@Win32MainW
  00065	e9 24 01 00 00	 jmp	 $LN9@Win32MainW
$LN4@Win32MainW:

; 130  :     {
; 131  :         case WM_SIZE: {
; 132  :         } break;

  0006a	e9 49 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 133  : 
; 134  :         case WM_CLOSE: {
; 135  :             // TODO Handle this with a message to the user?
; 136  :             GlobalRunning = false;

  0006f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 137  :         } break;

  00076	e9 3d 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 138  : 
; 139  :         case WM_ACTIVATEAPP: {
; 140  :             OutputDebugStringA("WM_ACTIVATEAPP\n");

  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82634
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 141  :         } break;

  00088	e9 2b 01 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 142  : 
; 143  :         case WM_DESTROY: {
; 144  :             // TODO Handle this as an error - recreate window?
; 145  :             GlobalRunning = false;

  0008d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 146  :         } break;

  00094	e9 1f 01 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 147  : 
; 148  :         case WM_PAINT: {
; 149  :             OutputDebugStringA("WM_PAINT\n");

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82637
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 150  :             PAINTSTRUCT Paint;
; 151  :             HDC DeviceContext = BeginPaint(Window, &Paint);

  000a6	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR Paint$9[rsp]
  000ae	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  000bc	48 89 44 24 68	 mov	 QWORD PTR DeviceContext$6[rsp], rax

; 152  :             int X = Paint.rcPaint.left;

  000c1	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+12]
  000c8	89 44 24 50	 mov	 DWORD PTR X$4[rsp], eax

; 153  :             int Y = Paint.rcPaint.top;

  000cc	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+16]
  000d3	89 44 24 48	 mov	 DWORD PTR Y$2[rsp], eax

; 154  :             int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  000d7	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+12]
  000de	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR Paint$9[rsp+20]
  000e5	2b c8		 sub	 ecx, eax
  000e7	8b c1		 mov	 eax, ecx
  000e9	89 44 24 44	 mov	 DWORD PTR Width$1[rsp], eax

; 155  :             int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  000ed	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+16]
  000f4	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR Paint$9[rsp+24]
  000fb	2b c8		 sub	 ecx, eax
  000fd	8b c1		 mov	 eax, ecx
  000ff	89 44 24 4c	 mov	 DWORD PTR Height$3[rsp], eax

; 156  : 
; 157  : 
; 158  :             win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  00103	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0010b	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  00110	48 89 44 24 70	 mov	 QWORD PTR $T7[rsp], rax
  00115	48 8b 44 24 70	 mov	 rax, QWORD PTR $T7[rsp]
  0011a	48 89 44 24 58	 mov	 QWORD PTR Dimension$5[rsp], rax

; 159  :             Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, GlobalBackbuffer, X, Y, Width, Height);

  0011f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  0012e	48 8b f8	 mov	 rdi, rax
  00131	48 8b f1	 mov	 rsi, rcx
  00134	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00139	f3 a4		 rep movsb
  0013b	8b 44 24 4c	 mov	 eax, DWORD PTR Height$3[rsp]
  0013f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00143	8b 44 24 44	 mov	 eax, DWORD PTR Width$1[rsp]
  00147	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0014b	8b 44 24 48	 mov	 eax, DWORD PTR Y$2[rsp]
  0014f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00153	8b 44 24 50	 mov	 eax, DWORD PTR X$4[rsp]
  00157	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0015b	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR $T8[rsp]
  00163	44 8b 44 24 5c	 mov	 r8d, DWORD PTR Dimension$5[rsp+4]
  00168	8b 54 24 58	 mov	 edx, DWORD PTR Dimension$5[rsp]
  0016c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR DeviceContext$6[rsp]
  00171	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow

; 160  :             EndPaint(Window, &Paint);

  00176	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR Paint$9[rsp]
  0017e	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 161  :         } break;

  0018c	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN9@Win32MainW:

; 162  : 
; 163  :         default: {
; 164  :             // OutputDebugStringA("default\n");
; 165  :             Result = DefWindowProc(Window, Message, WParam, LParam);

  0018e	4c 8b 8c 24 68
	01 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  00196	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  0019e	8b 94 24 58 01
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  001a5	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  001b3	48 89 44 24 60	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 166  :         } break;
; 167  :     }
; 168  : 
; 169  :     return(Result);

  001b8	48 8b 44 24 60	 mov	 rax, QWORD PTR Result$[rsp]

; 170  : }

  001bd	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001c5	48 33 cc	 xor	 rcx, rsp
  001c8	e8 00 00 00 00	 call	 __security_check_cookie
  001cd	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  001d4	5f		 pop	 rdi
  001d5	5e		 pop	 rsi
  001d6	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DeviceContext$ = 128
WindowWidth$ = 136
WindowHeight$ = 144
Buffer$ = 152
X$ = 160
Y$ = 168
Width$ = 176
Height$ = 184
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z PROC ; Win32DisplayBufferInWindow

; 108  : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 109  :     // TODO aspect ration correction
; 110  :     StretchDIBits(

  00017	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0001f	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00027	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  0002f	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00034	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003c	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00040	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00045	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004d	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00050	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00054	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005c	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0005f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00063	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00073	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007e	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00086	45 33 c0	 xor	 r8d, r8d
  00089	33 d2		 xor	 edx, edx
  0008b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 111  :         DeviceContext,
; 112  :         0, 0, WindowWidth, WindowHeight,
; 113  :         0, 0, Buffer.Width, Buffer.Height,
; 114  :         Buffer.Memory,
; 115  :         &Buffer.Info,
; 116  :         DIB_RGB_COLORS, SRCCOPY
; 117  :     );
; 118  : }

  00099	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009d	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 74   : Win32ResizeDIBSection(win32_offscreen_buffer *Buffer, int Width, int Height) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 75   :     // TODO Bulletproof this
; 76   :     // Maybe don't free first, free after, then free first if that fails
; 77   : 
; 78   :     if(Buffer->Memory) {

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 79   :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 80   :     }
; 81   : 
; 82   :     Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 83   :     Buffer->Height = Height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 84   :     Buffer->BytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 85   : 
; 86   :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 87   :     Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 88   :     Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 89   :     Buffer->Info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 90   :     Buffer->Info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 91   :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 92   : 
; 93   :     // NOTE: Thanks Chris Hecker for clarifying StretchDIBits/BitBlt
; 94   :     int BitmapMemorySize = (Buffer->Width*Buffer->Height)*Buffer->BytesPerPixel;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000bb	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000c4	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c8	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 95   :     Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT, PAGE_READWRITE);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000d1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d7	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000ed	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 96   : 
; 97   :     // TODO probably clear to black
; 98   : 
; 99   :     Buffer->Pitch = Width*Buffer->BytesPerPixel;

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f6	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  000fa	0f af 48 44	 imul	 ecx, DWORD PTR [rax+68]
  000fe	8b c1		 mov	 eax, ecx
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00105	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 100  : }

  00108	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010c	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Red$1 = 0
Green$2 = 1
Blue$3 = 2
X$4 = 4
Y$5 = 8
tv72 = 12
Pixel$6 = 16
Row$ = 24
Buffer$ = 48
BlueOffset$ = 56
GreenOffset$ = 64
?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z PROC ; RenderWeirdGradient

; 57   : ) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 58   :     // TODO lets see which is better
; 59   :     uint8 *Row = (uint8 *)Buffer.Memory;

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0001b	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 60   :     for( int Y = 0 ; Y < Buffer.Height ; ++Y ) {

  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$5[rsp], 0
  00028	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  0002a	8b 44 24 08	 mov	 eax, DWORD PTR Y$5[rsp]
  0002e	ff c0		 inc	 eax
  00030	89 44 24 08	 mov	 DWORD PTR Y$5[rsp], eax
$LN4@RenderWeir:
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00039	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0003c	39 44 24 08	 cmp	 DWORD PTR Y$5[rsp], eax
  00040	0f 8d c5 00 00
	00		 jge	 $LN3@RenderWeir

; 61   :         uint32 *Pixel = (uint32 *)Row;

  00046	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  0004b	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 62   :         for( int X = 0 ; X < Buffer.Width ; ++X ) {

  00050	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$4[rsp], 0
  00058	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  0005a	8b 44 24 04	 mov	 eax, DWORD PTR X$4[rsp]
  0005e	ff c0		 inc	 eax
  00060	89 44 24 04	 mov	 DWORD PTR X$4[rsp], eax
$LN7@RenderWeir:
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0006c	39 44 24 04	 cmp	 DWORD PTR X$4[rsp], eax
  00070	7d 7b		 jge	 SHORT $LN6@RenderWeir

; 63   :             uint8 Blue = 0; //(X + BlueOffset);

  00072	c6 44 24 02 00	 mov	 BYTE PTR Blue$3[rsp], 0

; 64   :             uint8 Green = 0; //(Y + GreenOffset);

  00077	c6 44 24 01 00	 mov	 BYTE PTR Green$2[rsp], 0

; 65   : 			uint8 Red = ((X - (GreenOffset/2))*(Y + (BlueOffset/4))/8);

  0007c	8b 44 24 40	 mov	 eax, DWORD PTR GreenOffset$[rsp]
  00080	99		 cdq
  00081	2b c2		 sub	 eax, edx
  00083	d1 f8		 sar	 eax, 1
  00085	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  00089	2b c8		 sub	 ecx, eax
  0008b	8b c1		 mov	 eax, ecx
  0008d	89 44 24 0c	 mov	 DWORD PTR tv72[rsp], eax
  00091	8b 44 24 38	 mov	 eax, DWORD PTR BlueOffset$[rsp]
  00095	99		 cdq
  00096	83 e2 03	 and	 edx, 3
  00099	03 c2		 add	 eax, edx
  0009b	c1 f8 02	 sar	 eax, 2
  0009e	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  000a2	03 c8		 add	 ecx, eax
  000a4	8b c1		 mov	 eax, ecx
  000a6	8b 4c 24 0c	 mov	 ecx, DWORD PTR tv72[rsp]
  000aa	0f af c8	 imul	 ecx, eax
  000ad	8b c1		 mov	 eax, ecx
  000af	99		 cdq
  000b0	83 e2 07	 and	 edx, 7
  000b3	03 c2		 add	 eax, edx
  000b5	c1 f8 03	 sar	 eax, 3
  000b8	88 04 24	 mov	 BYTE PTR Red$1[rsp], al

; 66   : 			*Pixel++ = ((Red << 16) | (Green << 8) | Blue);

  000bb	0f b6 04 24	 movzx	 eax, BYTE PTR Red$1[rsp]
  000bf	c1 e0 10	 shl	 eax, 16
  000c2	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR Green$2[rsp]
  000c7	c1 e1 08	 shl	 ecx, 8
  000ca	0b c1		 or	 eax, ecx
  000cc	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR Blue$3[rsp]
  000d1	0b c1		 or	 eax, ecx
  000d3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Pixel$6[rsp]
  000d8	89 01		 mov	 DWORD PTR [rcx], eax
  000da	48 8b 44 24 10	 mov	 rax, QWORD PTR Pixel$6[rsp]
  000df	48 83 c0 04	 add	 rax, 4
  000e3	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 67   : 		}

  000e8	e9 6d ff ff ff	 jmp	 $LN5@RenderWeir
$LN6@RenderWeir:

; 68   : 
; 69   :         Row += Buffer.Pitch;

  000ed	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f2	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  000f6	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  000fb	48 03 c8	 add	 rcx, rax
  000fe	48 8b c1	 mov	 rax, rcx
  00101	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 70   :     }

  00106	e9 1f ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 71   : }

  0010b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010f	c3		 ret	 0
?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z ENDP ; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 43   : win32_window_dimension Win32GetWindowDimension(HWND Window) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 44   :     win32_window_dimension Result;
; 45   : 
; 46   :     RECT ClientRect;
; 47   :     GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 48   :     Result.Width = ClientRect.right - ClientRect.left;

  00028	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 49   :     Result.Height = ClientRect.bottom - ClientRect.top;

  00038	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 50   : 
; 51   :     return(Result);

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 52   : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
GreenOffset$1 = 96
BlueOffset$2 = 100
Dimension$3 = 104
Window$4 = 112
DeviceContext$5 = 120
$T6 = 128
WindowClass$ = 144
Message$7 = 224
$T8 = 272
$T9 = 352
Instance$ = 464
PrevInstance$ = 472
CmdLine$ = 480
ShowCode$ = 488
WinMain	PROC

; 178  : ) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H

; 179  :     WNDCLASS WindowClass = {};

  0001d	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00025	48 8b f8	 mov	 rdi, rax
  00028	33 c0		 xor	 eax, eax
  0002a	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0002f	f3 aa		 rep stosb

; 180  : 
; 181  :     Win32ResizeDIBSection(&GlobalBackbuffer, 1280, 720);

  00031	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  00037	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00043	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 182  :     
; 183  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  00048	c7 84 24 90 00
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 184  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  0005a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 185  :     WindowClass.hInstance = Instance;

  00062	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  0006a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 186  : //    WindowClass.hIcon;
; 187  :     WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG82661
  00079	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 188  : 
; 189  :     if (RegisterClass(&WindowClass)) {

  00081	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  0008f	0f b7 c0	 movzx	 eax, ax
  00092	85 c0		 test	 eax, eax
  00094	0f 84 ce 01 00
	00		 je	 $LN6@WinMain

; 190  :         HWND Window = CreateWindowExA(

  0009a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000a3	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000ab	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000b0	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000b9	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000c2	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000ca	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000d2	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000da	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000e2	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG82664
  000ef	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  000f7	33 c9		 xor	 ecx, ecx
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  000ff	48 89 44 24 70	 mov	 QWORD PTR Window$4[rsp], rax

; 191  :             0,
; 192  :             WindowClass.lpszClassName,
; 193  :             "Handmade Hero",
; 194  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 195  :             CW_USEDEFAULT,
; 196  :             CW_USEDEFAULT,
; 197  :             CW_USEDEFAULT,
; 198  :             CW_USEDEFAULT,
; 199  :             0,
; 200  :             0,
; 201  :             Instance,
; 202  :             0
; 203  :         );
; 204  :         if(Window){

  00104	48 83 7c 24 70
	00		 cmp	 QWORD PTR Window$4[rsp], 0
  0010a	0f 84 58 01 00
	00		 je	 $LN8@WinMain

; 205  :             GlobalRunning = true;

  00110	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1

; 206  :             int BlueOffset = 0;

  00117	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR BlueOffset$2[rsp], 0

; 207  :             int GreenOffset = 0;

  0011f	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR GreenOffset$1[rsp], 0
$LN2@WinMain:

; 208  :             while (GlobalRunning) {

  00127	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA
  0012e	85 c0		 test	 eax, eax
  00130	0f 84 32 01 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 209  :                 MSG Message;
; 210  :                 while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  00136	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0013e	45 33 c9	 xor	 r9d, r9d
  00141	45 33 c0	 xor	 r8d, r8d
  00144	33 d2		 xor	 edx, edx
  00146	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00154	85 c0		 test	 eax, eax
  00156	74 2f		 je	 SHORT $LN5@WinMain

; 211  :                     if(Message.message == WM_QUIT) {

  00158	83 bc 24 e8 00
	00 00 12	 cmp	 DWORD PTR Message$7[rsp+8], 18
  00160	75 07		 jne	 SHORT $LN10@WinMain

; 212  :                         GlobalRunning = false;

  00162	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN10@WinMain:

; 213  :                     }
; 214  :                     TranslateMessage(&Message);

  00169	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 215  :                     DispatchMessageA(&Message);

  00177	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 216  :                 }

  00185	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 217  : 
; 218  :                 RenderWeirdGradient(GlobalBackbuffer, BlueOffset, GreenOffset);

  00187	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00196	48 8b f8	 mov	 rdi, rax
  00199	48 8b f1	 mov	 rsi, rcx
  0019c	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  001a1	f3 a4		 rep movsb
  001a3	44 8b 44 24 60	 mov	 r8d, DWORD PTR GreenOffset$1[rsp]
  001a8	8b 54 24 64	 mov	 edx, DWORD PTR BlueOffset$2[rsp]
  001ac	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  001b4	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z ; RenderWeirdGradient

; 219  :                 HDC DeviceContext = GetDC(Window);

  001b9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$4[rsp]
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  001c4	48 89 44 24 78	 mov	 QWORD PTR DeviceContext$5[rsp], rax

; 220  :                 win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  001c9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$4[rsp]
  001ce	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  001d3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T6[rsp], rax
  001db	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  001e3	48 89 44 24 68	 mov	 QWORD PTR Dimension$3[rsp], rax

; 221  :                 Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, GlobalBackbuffer, 0, 0, Dimension.Width, Dimension.Height);

  001e8	48 8d 84 24 60
	01 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  001f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  001f7	48 8b f8	 mov	 rdi, rax
  001fa	48 8b f1	 mov	 rsi, rcx
  001fd	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00202	f3 a4		 rep movsb
  00204	8b 44 24 6c	 mov	 eax, DWORD PTR Dimension$3[rsp+4]
  00208	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0020c	8b 44 24 68	 mov	 eax, DWORD PTR Dimension$3[rsp]
  00210	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00214	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0021c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00224	4c 8d 8c 24 60
	01 00 00	 lea	 r9, QWORD PTR $T9[rsp]
  0022c	44 8b 44 24 6c	 mov	 r8d, DWORD PTR Dimension$3[rsp+4]
  00231	8b 54 24 68	 mov	 edx, DWORD PTR Dimension$3[rsp]
  00235	48 8b 4c 24 78	 mov	 rcx, QWORD PTR DeviceContext$5[rsp]
  0023a	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow

; 222  :                 ReleaseDC(Window, DeviceContext);

  0023f	48 8b 54 24 78	 mov	 rdx, QWORD PTR DeviceContext$5[rsp]
  00244	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$4[rsp]
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 223  : 
; 224  :                 ++BlueOffset;

  0024f	8b 44 24 64	 mov	 eax, DWORD PTR BlueOffset$2[rsp]
  00253	ff c0		 inc	 eax
  00255	89 44 24 64	 mov	 DWORD PTR BlueOffset$2[rsp], eax

; 225  : 				++GreenOffset;

  00259	8b 44 24 60	 mov	 eax, DWORD PTR GreenOffset$1[rsp]
  0025d	ff c0		 inc	 eax
  0025f	89 44 24 60	 mov	 DWORD PTR GreenOffset$1[rsp], eax

; 226  :             }

  00263	e9 bf fe ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN8@WinMain:
$LN6@WinMain:

; 227  :         }
; 228  :         else {
; 229  :             // TODO Logging
; 230  :         }
; 231  :     }
; 232  :     else{
; 233  :         // TODO Logging
; 234  :     }
; 235  :     return(0); 

  00268	33 c0		 xor	 eax, eax

; 236  : }

  0026a	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  00271	5f		 pop	 rdi
  00272	5e		 pop	 rsi
  00273	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
