; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG82478 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG82481 DB	'WM_PAINT', 0aH, 00H
	ORG $+6
$SG82506 DB	'HandmadeHeroWindowClass', 00H
$SG82509 DB	'Handmade Hero', 00H
CONST	ENDS
_DATA	SEGMENT
?BytesPerPixel@@3HA DD 04H				; BytesPerPixel
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?Running@@3_NA DB 01H DUP (?)				; Running
	ALIGN	4

?BitmapInfo@@3UtagBITMAPINFO@@A DB 02cH DUP (?)		; BitmapInfo
?BitmapMemory@@3PEAXEA DQ 01H DUP (?)			; BitmapMemory
?BitmapWidth@@3HA DD 01H DUP (?)			; BitmapWidth
?BitmapHeight@@3HA DD 01H DUP (?)			; BitmapHeight
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN12
	DD	imagerel $LN12+574
	DD	imagerel $unwind$WinMain
$pdata$?RenderWeirdGradient@@YAXHH@Z DD imagerel ?RenderWeirdGradient@@YAXHH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXHH@Z+291
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXHH@Z
$pdata$?Win32ResizeDIBSection@@YAXHH@Z DD imagerel ?Win32ResizeDIBSection@@YAXHH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXHH@Z+197
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXHH@Z
$pdata$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z DD imagerel ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z
	DD	imagerel ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z+198
	DD	imagerel $unwind$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN11
	DD	imagerel $LN11+484
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	024011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$?RenderWeirdGradient@@YAXHH@Z DD 010c01H
	DD	0620cH
$unwind$?Win32ResizeDIBSection@@YAXHH@Z DD 010c01H
	DD	0620cH
$unwind$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z DD 021b01H
	DD	011011bH
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv64 = 48
Y$1 = 52
X$2 = 56
Width$3 = 60
Height$4 = 64
Height$5 = 68
Width$6 = 72
Result$ = 80
DeviceContext$7 = 88
ClientRect$8 = 96
ClientRect$9 = 112
Paint$10 = 128
__$ArrayPad$ = 208
Window$ = 240
Message$ = 248
WParam$ = 256
LParam$ = 264
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 103  : ) {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 104  :     LRESULT Result = 0;

  0002c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 105  : 
; 106  :     switch(Message)

  00035	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 30 02	 cmp	 DWORD PTR tv64[rsp], 2
  00045	0f 84 88 00 00
	00		 je	 $LN7@Win32MainW
  0004b	83 7c 24 30 05	 cmp	 DWORD PTR tv64[rsp], 5
  00050	74 1e		 je	 SHORT $LN4@Win32MainW
  00052	83 7c 24 30 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00057	0f 84 82 00 00
	00		 je	 $LN8@Win32MainW
  0005d	83 7c 24 30 10	 cmp	 DWORD PTR tv64[rsp], 16
  00062	74 51		 je	 SHORT $LN5@Win32MainW
  00064	83 7c 24 30 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00069	74 56		 je	 SHORT $LN6@Win32MainW
  0006b	e9 2d 01 00 00	 jmp	 $LN9@Win32MainW
$LN4@Win32MainW:

; 107  :     {
; 108  :         case WM_SIZE: {
; 109  :             RECT ClientRect;
; 110  :             GetClientRect(Window, &ClientRect);

  00070	48 8d 54 24 60	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  00075	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 111  :             int Width = ClientRect.right - ClientRect.left;

  00083	8b 44 24 60	 mov	 eax, DWORD PTR ClientRect$8[rsp]
  00087	8b 4c 24 68	 mov	 ecx, DWORD PTR ClientRect$8[rsp+8]
  0008b	2b c8		 sub	 ecx, eax
  0008d	8b c1		 mov	 eax, ecx
  0008f	89 44 24 48	 mov	 DWORD PTR Width$6[rsp], eax

; 112  :             int Height = ClientRect.bottom - ClientRect.top;

  00093	8b 44 24 64	 mov	 eax, DWORD PTR ClientRect$8[rsp+4]
  00097	8b 4c 24 6c	 mov	 ecx, DWORD PTR ClientRect$8[rsp+12]
  0009b	2b c8		 sub	 ecx, eax
  0009d	8b c1		 mov	 eax, ecx
  0009f	89 44 24 40	 mov	 DWORD PTR Height$4[rsp], eax

; 113  :             Win32ResizeDIBSection(Width, Height);

  000a3	8b 54 24 40	 mov	 edx, DWORD PTR Height$4[rsp]
  000a7	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$6[rsp]
  000ab	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXHH@Z ; Win32ResizeDIBSection

; 114  :         } break;

  000b0	e9 12 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 115  : 
; 116  :         case WM_CLOSE: {
; 117  :             // TODO Handle this with a message to the user?
; 118  :             Running = false;

  000b5	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 119  :         } break;

  000bc	e9 06 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 120  : 
; 121  :         case WM_ACTIVATEAPP: {
; 122  :             OutputDebugStringA("WM_ACTIVATEAPP\n");

  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82478
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 123  :         } break;

  000ce	e9 f4 00 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 124  : 
; 125  :         case WM_DESTROY: {
; 126  :             // TODO Handle this as an error - recreate window?
; 127  :             Running = false;

  000d3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 128  :         } break;

  000da	e9 e8 00 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 129  : 
; 130  :         case WM_PAINT: {
; 131  :             OutputDebugStringA("WM_PAINT\n");

  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82481
  000e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 132  :             PAINTSTRUCT Paint;
; 133  :             HDC DeviceContext = BeginPaint(Window, &Paint);

  000ec	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  000f4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  00102	48 89 44 24 58	 mov	 QWORD PTR DeviceContext$7[rsp], rax

; 134  :             int X = Paint.rcPaint.left;

  00107	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  0010e	89 44 24 38	 mov	 DWORD PTR X$2[rsp], eax

; 135  :             int Y = Paint.rcPaint.top;

  00112	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  00119	89 44 24 34	 mov	 DWORD PTR Y$1[rsp], eax

; 136  :             int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  0011d	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  00124	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+20]
  0012b	2b c8		 sub	 ecx, eax
  0012d	8b c1		 mov	 eax, ecx
  0012f	89 44 24 3c	 mov	 DWORD PTR Width$3[rsp], eax

; 137  :             int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  00133	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  0013a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+24]
  00141	2b c8		 sub	 ecx, eax
  00143	8b c1		 mov	 eax, ecx
  00145	89 44 24 44	 mov	 DWORD PTR Height$5[rsp], eax

; 138  : 
; 139  :             RECT ClientRect;
; 140  :             GetClientRect(Window, &ClientRect);

  00149	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  0014e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 141  : 
; 142  :             Win32UpdateWindow(DeviceContext, &ClientRect, X, Y, Width, Height);

  0015c	8b 44 24 44	 mov	 eax, DWORD PTR Height$5[rsp]
  00160	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00164	8b 44 24 3c	 mov	 eax, DWORD PTR Width$3[rsp]
  00168	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0016c	44 8b 4c 24 34	 mov	 r9d, DWORD PTR Y$1[rsp]
  00171	44 8b 44 24 38	 mov	 r8d, DWORD PTR X$2[rsp]
  00176	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  0017b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR DeviceContext$7[rsp]
  00180	e8 00 00 00 00	 call	 ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ; Win32UpdateWindow

; 143  :             EndPaint(Window, &Paint);

  00185	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  0018d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 144  :         } break;

  0019b	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN9@Win32MainW:

; 145  : 
; 146  :         default: {
; 147  :             // OutputDebugStringA("default\n");
; 148  :             Result = DefWindowProc(Window, Message, WParam, LParam);

  0019d	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  001a5	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  001ad	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  001b4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  001c2	48 89 44 24 50	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 149  :         } break;
; 150  :     }
; 151  : 
; 152  :     return(Result);

  001c7	48 8b 44 24 50	 mov	 rax, QWORD PTR Result$[rsp]

; 153  : }

  001cc	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001d4	48 33 cc	 xor	 rcx, rsp
  001d7	e8 00 00 00 00	 call	 __security_check_cookie
  001dc	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  001e3	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
WindowHeight$ = 112
WindowWidth$ = 116
DeviceContext$ = 144
ClientRect$ = 152
X$ = 160
Y$ = 168
Width$ = 176
Height$ = 184
?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z PROC ; Win32UpdateWindow

; 80   : ) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 81   :     int WindowWidth = ClientRect->right - ClientRect->left;

  0001b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ClientRect$[rsp]
  00023	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ClientRect$[rsp]
  0002b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00030	2b c1		 sub	 eax, ecx
  00032	89 44 24 74	 mov	 DWORD PTR WindowWidth$[rsp], eax

; 82   :     int WindowHeight = ClientRect->bottom - ClientRect->top;

  00036	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ClientRect$[rsp]
  0003e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ClientRect$[rsp]
  00046	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00049	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0004c	2b c1		 sub	 eax, ecx
  0004e	89 44 24 70	 mov	 DWORD PTR WindowHeight$[rsp], eax

; 83   :     StretchDIBits(

  00052	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  0005a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?BitmapInfo@@3UtagBITMAPINFO@@A
  00069	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0006e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?BitmapMemory@@3PEAXEA
  00075	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0007a	8b 44 24 70	 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007e	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00082	8b 44 24 74	 mov	 eax, DWORD PTR WindowWidth$[rsp]
  00086	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0008a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00092	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0009a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  000a0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a4	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?BitmapWidth@@3HA
  000ab	45 33 c0	 xor	 r8d, r8d
  000ae	33 d2		 xor	 edx, edx
  000b0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 84   :         DeviceContext,
; 85   :         /*
; 86   :         X, Y, Width, Height,
; 87   :         X, Y, Width, Height,
; 88   :         */
; 89   :         0, 0, BitmapWidth, BitmapHeight,
; 90   :         0, 0, WindowWidth, WindowHeight,
; 91   :         BitmapMemory,
; 92   :         &BitmapInfo,
; 93   :         DIB_RGB_COLORS, SRCCOPY
; 94   :     );
; 95   : }

  000be	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000c5	c3		 ret	 0
?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ENDP ; Win32UpdateWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Width$ = 64
Height$ = 72
?Win32ResizeDIBSection@@YAXHH@Z PROC			; Win32ResizeDIBSection

; 52   : Win32ResizeDIBSection(int Width, int Height) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 53   :     // TODO Bulletproof this
; 54   :     // Maybe don't free first, free after, then free first if that fails
; 55   : 
; 56   :     if(BitmapMemory) {

  0000c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?BitmapMemory@@3PEAXEA, 0
  00014	74 15		 je	 SHORT $LN2@Win32Resiz

; 57   :         VirtualFree(BitmapMemory, 0, MEM_RELEASE);

  00016	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?BitmapMemory@@3PEAXEA
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 58   :     }
; 59   : 
; 60   :     BitmapWidth = Width;

  0002b	8b 44 24 40	 mov	 eax, DWORD PTR Width$[rsp]
  0002f	89 05 00 00 00
	00		 mov	 DWORD PTR ?BitmapWidth@@3HA, eax

; 61   :     BitmapHeight = Height;

  00035	8b 44 24 48	 mov	 eax, DWORD PTR Height$[rsp]
  00039	89 05 00 00 00
	00		 mov	 DWORD PTR ?BitmapHeight@@3HA, eax

; 62   :     
; 63   :     BitmapInfo.bmiHeader.biSize = sizeof(BitmapInfo.bmiHeader);

  0003f	c7 05 00 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A, 40 ; 00000028H

; 64   :     BitmapInfo.bmiHeader.biWidth = BitmapWidth;

  00049	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  0004f	89 05 04 00 00
	00		 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+4, eax

; 65   :     BitmapInfo.bmiHeader.biHeight = -BitmapHeight;

  00055	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  0005b	f7 d8		 neg	 eax
  0005d	89 05 08 00 00
	00		 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+8, eax

; 66   :     BitmapInfo.bmiHeader.biPlanes = 1;

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	66 89 05 0c 00
	00 00		 mov	 WORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+12, ax

; 67   :     BitmapInfo.bmiHeader.biBitCount = 32;

  0006f	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00074	66 89 05 0e 00
	00 00		 mov	 WORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+14, ax

; 68   :     BitmapInfo.bmiHeader.biCompression = BI_RGB;

  0007b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+16, 0

; 69   : 
; 70   :     // NOTE: Thanks Chris Hecker for clarifying StretchDIBits/BitBlt
; 71   :     int BitmapMemorySize = (BitmapWidth*BitmapHeight)*BytesPerPixel;

  00085	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  0008b	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BitmapHeight@@3HA
  00092	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BytesPerPixel@@3HA
  00099	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 72   :     BitmapMemory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT, PAGE_READWRITE);

  0009d	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000a2	41 b9 04 00 00
	00		 mov	 r9d, 4
  000a8	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	33 c9		 xor	 ecx, ecx
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?BitmapMemory@@3PEAXEA, rax

; 73   : 
; 74   :     // TODO probably clear to black
; 75   : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
?Win32ResizeDIBSection@@YAXHH@Z ENDP			; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Blue$1 = 0
Red$2 = 1
Green$3 = 2
X$4 = 4
Y$5 = 8
Width$ = 12
Pitch$ = 16
tv70 = 20
Row$ = 24
Pixel$6 = 32
Height$ = 40
XOffset$ = 64
YOffset$ = 72
?RenderWeirdGradient@@YAXHH@Z PROC			; RenderWeirdGradient

; 33   : RenderWeirdGradient(int XOffset, int YOffset) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 34   :     int Width = BitmapWidth;

  0000c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  00012	89 44 24 0c	 mov	 DWORD PTR Width$[rsp], eax

; 35   :     int Height = BitmapHeight;

  00016	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  0001c	89 44 24 28	 mov	 DWORD PTR Height$[rsp], eax

; 36   :     int Pitch = Width*BytesPerPixel;

  00020	8b 44 24 0c	 mov	 eax, DWORD PTR Width$[rsp]
  00024	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BytesPerPixel@@3HA
  0002b	89 44 24 10	 mov	 DWORD PTR Pitch$[rsp], eax

; 37   :     uint8 *Row = (uint8 *)BitmapMemory;

  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?BitmapMemory@@3PEAXEA
  00036	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 38   :     for( int Y = 0 ; Y < BitmapHeight ; ++Y ) {

  0003b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$5[rsp], 0
  00043	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  00045	8b 44 24 08	 mov	 eax, DWORD PTR Y$5[rsp]
  00049	ff c0		 inc	 eax
  0004b	89 44 24 08	 mov	 DWORD PTR Y$5[rsp], eax
$LN4@RenderWeir:
  0004f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  00055	39 44 24 08	 cmp	 DWORD PTR Y$5[rsp], eax
  00059	0f 8d bf 00 00
	00		 jge	 $LN3@RenderWeir

; 39   :         uint32 *Pixel = (uint32 *)Row;

  0005f	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  00064	48 89 44 24 20	 mov	 QWORD PTR Pixel$6[rsp], rax

; 40   :         for( int X = 0 ; X < BitmapWidth ; ++X ) {

  00069	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$4[rsp], 0
  00071	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  00073	8b 44 24 04	 mov	 eax, DWORD PTR X$4[rsp]
  00077	ff c0		 inc	 eax
  00079	89 44 24 04	 mov	 DWORD PTR X$4[rsp], eax
$LN7@RenderWeir:
  0007d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  00083	39 44 24 04	 cmp	 DWORD PTR X$4[rsp], eax
  00087	7d 7b		 jge	 SHORT $LN6@RenderWeir

; 41   :             uint8 Blue = 0; //(X + XOffset);

  00089	c6 04 24 00	 mov	 BYTE PTR Blue$1[rsp], 0

; 42   :             uint8 Green = 0; //(Y + YOffset);

  0008d	c6 44 24 02 00	 mov	 BYTE PTR Green$3[rsp], 0

; 43   : 			uint8 Red = ((X - (YOffset/2))*(Y + (XOffset/4))/8);

  00092	8b 44 24 48	 mov	 eax, DWORD PTR YOffset$[rsp]
  00096	99		 cdq
  00097	2b c2		 sub	 eax, edx
  00099	d1 f8		 sar	 eax, 1
  0009b	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  0009f	2b c8		 sub	 ecx, eax
  000a1	8b c1		 mov	 eax, ecx
  000a3	89 44 24 14	 mov	 DWORD PTR tv70[rsp], eax
  000a7	8b 44 24 40	 mov	 eax, DWORD PTR XOffset$[rsp]
  000ab	99		 cdq
  000ac	83 e2 03	 and	 edx, 3
  000af	03 c2		 add	 eax, edx
  000b1	c1 f8 02	 sar	 eax, 2
  000b4	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  000b8	03 c8		 add	 ecx, eax
  000ba	8b c1		 mov	 eax, ecx
  000bc	8b 4c 24 14	 mov	 ecx, DWORD PTR tv70[rsp]
  000c0	0f af c8	 imul	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	99		 cdq
  000c6	83 e2 07	 and	 edx, 7
  000c9	03 c2		 add	 eax, edx
  000cb	c1 f8 03	 sar	 eax, 3
  000ce	88 44 24 01	 mov	 BYTE PTR Red$2[rsp], al

; 44   : 			*Pixel++ = ((Red << 16) | (Green << 8) | Blue);

  000d2	0f b6 44 24 01	 movzx	 eax, BYTE PTR Red$2[rsp]
  000d7	c1 e0 10	 shl	 eax, 16
  000da	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR Green$3[rsp]
  000df	c1 e1 08	 shl	 ecx, 8
  000e2	0b c1		 or	 eax, ecx
  000e4	0f b6 0c 24	 movzx	 ecx, BYTE PTR Blue$1[rsp]
  000e8	0b c1		 or	 eax, ecx
  000ea	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Pixel$6[rsp]
  000ef	89 01		 mov	 DWORD PTR [rcx], eax
  000f1	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$6[rsp]
  000f6	48 83 c0 04	 add	 rax, 4
  000fa	48 89 44 24 20	 mov	 QWORD PTR Pixel$6[rsp], rax

; 45   : 		}

  000ff	e9 6f ff ff ff	 jmp	 $LN5@RenderWeir
$LN6@RenderWeir:

; 46   : 
; 47   :         Row += Pitch;

  00104	48 63 44 24 10	 movsxd	 rax, DWORD PTR Pitch$[rsp]
  00109	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  0010e	48 03 c8	 add	 rcx, rax
  00111	48 8b c1	 mov	 rax, rcx
  00114	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 48   :     }

  00119	e9 27 ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 49   : }

  0011e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00122	c3		 ret	 0
?RenderWeirdGradient@@YAXHH@Z ENDP			; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
XOffset$1 = 96
YOffset$2 = 100
Window$3 = 104
WindowWidth$4 = 112
WindowHeight$5 = 116
DeviceContext$6 = 120
Message$7 = 128
WindowClass$ = 176
ClientRect$8 = 256
__$ArrayPad$ = 272
Instance$ = 304
PrevInstance$ = 312
CmdLine$ = 320
ShowCode$ = 328
WinMain	PROC

; 161  : ) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 162  :     WNDCLASS WindowClass = {};

  0002e	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00036	48 8b f8	 mov	 rdi, rax
  00039	33 c0		 xor	 eax, eax
  0003b	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00040	f3 aa		 rep stosb

; 163  :     
; 164  :     // TODO(casey): Check if HREDRAW/VREDRAW/OWNDC still matter
; 165  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  00049	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 166  :     WindowClass.hInstance = Instance;

  00051	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00059	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 167  : //    WindowClass.hIcon;
; 168  :     WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG82506
  00068	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 169  : 
; 170  :     if (RegisterClass(&WindowClass)) {

  00070	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  0007e	0f b7 c0	 movzx	 eax, ax
  00081	85 c0		 test	 eax, eax
  00083	0f 84 9a 01 00
	00		 je	 $LN6@WinMain

; 171  :         HWND Window = CreateWindowExA(

  00089	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  00092	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  0009a	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0009f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000a8	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000b1	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000b9	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000c1	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000c9	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000d1	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG82509
  000de	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  000e6	33 c9		 xor	 ecx, ecx
  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  000ee	48 89 44 24 68	 mov	 QWORD PTR Window$3[rsp], rax

; 172  :             0,
; 173  :             WindowClass.lpszClassName,
; 174  :             "Handmade Hero",
; 175  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 176  :             CW_USEDEFAULT,
; 177  :             CW_USEDEFAULT,
; 178  :             CW_USEDEFAULT,
; 179  :             CW_USEDEFAULT,
; 180  :             0,
; 181  :             0,
; 182  :             Instance,
; 183  :             0
; 184  :         );
; 185  :         if(Window){

  000f3	48 83 7c 24 68
	00		 cmp	 QWORD PTR Window$3[rsp], 0
  000f9	0f 84 24 01 00
	00		 je	 $LN8@WinMain

; 186  :             Running = true;

  000ff	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?Running@@3_NA, 1

; 187  :             int XOffset = 0;

  00106	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR XOffset$1[rsp], 0

; 188  :             int YOffset = 0;

  0010e	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR YOffset$2[rsp], 0
$LN2@WinMain:

; 189  :             while (Running) {

  00116	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Running@@3_NA
  0011d	85 c0		 test	 eax, eax
  0011f	0f 84 fe 00 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 190  :                 MSG Message;
; 191  :                 while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  00125	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0012d	45 33 c9	 xor	 r9d, r9d
  00130	45 33 c0	 xor	 r8d, r8d
  00133	33 d2		 xor	 edx, edx
  00135	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00143	85 c0		 test	 eax, eax
  00145	74 2f		 je	 SHORT $LN5@WinMain

; 192  :                     if(Message.message == WM_QUIT) {

  00147	83 bc 24 88 00
	00 00 12	 cmp	 DWORD PTR Message$7[rsp+8], 18
  0014f	75 07		 jne	 SHORT $LN10@WinMain

; 193  :                         Running = false;

  00151	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0
$LN10@WinMain:

; 194  :                     }
; 195  :                     TranslateMessage(&Message);

  00158	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 196  :                     DispatchMessageA(&Message);

  00166	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 197  :                 }

  00174	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 198  : 
; 199  :                 RenderWeirdGradient(XOffset, YOffset);

  00176	8b 54 24 64	 mov	 edx, DWORD PTR YOffset$2[rsp]
  0017a	8b 4c 24 60	 mov	 ecx, DWORD PTR XOffset$1[rsp]
  0017e	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXHH@Z ; RenderWeirdGradient

; 200  :                 HDC DeviceContext = GetDC(Window);

  00183	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$3[rsp]
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  0018e	48 89 44 24 78	 mov	 QWORD PTR DeviceContext$6[rsp], rax

; 201  :                 RECT ClientRect;
; 202  :                 GetClientRect(Window, &ClientRect);

  00193	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  0019b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$3[rsp]
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 203  :                 int WindowWidth = ClientRect.right - ClientRect.left;

  001a6	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR ClientRect$8[rsp]
  001ad	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR ClientRect$8[rsp+8]
  001b4	2b c8		 sub	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	89 44 24 70	 mov	 DWORD PTR WindowWidth$4[rsp], eax

; 204  :                 int WindowHeight = ClientRect.bottom - ClientRect.top;

  001bc	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR ClientRect$8[rsp+4]
  001c3	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR ClientRect$8[rsp+12]
  001ca	2b c8		 sub	 ecx, eax
  001cc	8b c1		 mov	 eax, ecx
  001ce	89 44 24 74	 mov	 DWORD PTR WindowHeight$5[rsp], eax

; 205  :                 Win32UpdateWindow(DeviceContext, &ClientRect, 0, 0, WindowWidth, WindowHeight);

  001d2	8b 44 24 74	 mov	 eax, DWORD PTR WindowHeight$5[rsp]
  001d6	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001da	8b 44 24 70	 mov	 eax, DWORD PTR WindowWidth$4[rsp]
  001de	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001e2	45 33 c9	 xor	 r9d, r9d
  001e5	45 33 c0	 xor	 r8d, r8d
  001e8	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  001f0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR DeviceContext$6[rsp]
  001f5	e8 00 00 00 00	 call	 ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ; Win32UpdateWindow

; 206  :                 ReleaseDC(Window, DeviceContext);

  001fa	48 8b 54 24 78	 mov	 rdx, QWORD PTR DeviceContext$6[rsp]
  001ff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$3[rsp]
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 207  : 
; 208  :                 ++XOffset;

  0020a	8b 44 24 60	 mov	 eax, DWORD PTR XOffset$1[rsp]
  0020e	ff c0		 inc	 eax
  00210	89 44 24 60	 mov	 DWORD PTR XOffset$1[rsp], eax

; 209  : 				++YOffset;

  00214	8b 44 24 64	 mov	 eax, DWORD PTR YOffset$2[rsp]
  00218	ff c0		 inc	 eax
  0021a	89 44 24 64	 mov	 DWORD PTR YOffset$2[rsp], eax

; 210  :             }

  0021e	e9 f3 fe ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN8@WinMain:
$LN6@WinMain:

; 211  :         }
; 212  :         else {
; 213  :             // TODO Logging
; 214  :         }
; 215  :     }
; 216  :     else{
; 217  :         // TODO Logging
; 218  :     }
; 219  :     return(0); 

  00223	33 c0		 xor	 eax, eax

; 220  : }

  00225	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0022d	48 33 cc	 xor	 rcx, rsp
  00230	e8 00 00 00 00	 call	 __security_check_cookie
  00235	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  0023c	5f		 pop	 rdi
  0023d	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
