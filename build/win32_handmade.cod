; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z	; XInputGetStateStub
PUBLIC	?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
CONST	SEGMENT
$SG84271 DB	'xinput1_4.dll', 00H
	ORG $+2
$SG84273 DB	'xinput1_3.dll', 00H
	ORG $+2
$SG84276 DB	'XInputGetState', 00H
	ORG $+1
$SG84278 DB	'XInputSetState', 00H
	ORG $+1
$SG84301 DB	'dsound.dll', 00H
	ORG $+1
$SG84413 DB	0aH, 00H
	ORG $+2
$SG84303 DB	'DirectSoundCreate', 00H
	ORG $+2
$SG84408 DB	'Space ', 00H
	ORG $+5
$SG84312 DB	'Primary buffer format was set.', 0aH, 00H
$SG84314 DB	'Secondary buffer created successfuly', 0aH, 00H
	ORG $+2
$SG84381 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG84410 DB	'IsDown ', 00H
$SG84412 DB	'WasDown ', 00H
	ORG $+7
$SG84416 DB	'WM_PAINT', 0aH, 00H
	ORG $+6
$SG84461 DB	'HandmadeHeroWindowClass', 00H
$SG84464 DB	'Handmade Hero', 00H
CONST	ENDS
_DATA	SEGMENT
?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA DQ FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetState_
?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA DQ FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetState_
_DATA	ENDS
PUBLIC	WinMain
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN40
	DD	imagerel $LN40+1259
	DD	imagerel $unwind$WinMain
$pdata$?Wind32LoadXInput@@YAXXZ DD imagerel ?Wind32LoadXInput@@YAXXZ
	DD	imagerel ?Wind32LoadXInput@@YAXXZ+159
	DD	imagerel $unwind$?Wind32LoadXInput@@YAXXZ
$pdata$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
	DD	imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z+567
	DD	imagerel $unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
	DD	imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z+272
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+269
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z+158
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z+868
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	02c011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$?Wind32LoadXInput@@YAXXZ DD 010401H
	DD	06204H
$unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD 032819H
	DD	0180116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z DD 011701H
	DD	0e217H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01f011aH
	DD	imagerel __GSHandlerCheck
	DD	0e0H
xdata	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
VKCode$1 = 64
WasDown$2 = 68
IsDown$3 = 69
tv64 = 72
tv68 = 76
tv72 = 80
Width$4 = 84
Y$5 = 88
Height$6 = 92
X$7 = 96
Dimension$8 = 104
Result$ = 112
$T9 = 120
DeviceContext$10 = 128
Paint$11 = 144
__$ArrayPad$ = 224
Window$ = 256
Message$ = 264
WParam$ = 272
LParam$ = 280
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 238  : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 239  :     LRESULT Result = 0;

  0002c	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 240  : 
; 241  :     switch(Message)

  00035	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 48	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 48 10	 cmp	 DWORD PTR tv64[rsp], 16
  00045	77 25		 ja	 SHORT $LN43@Win32MainW
  00047	83 7c 24 48 10	 cmp	 DWORD PTR tv64[rsp], 16
  0004c	74 5f		 je	 SHORT $LN5@Win32MainW
  0004e	83 7c 24 48 02	 cmp	 DWORD PTR tv64[rsp], 2
  00053	74 76		 je	 SHORT $LN7@Win32MainW
  00055	83 7c 24 48 05	 cmp	 DWORD PTR tv64[rsp], 5
  0005a	74 4c		 je	 SHORT $LN4@Win32MainW
  0005c	83 7c 24 48 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00061	0f 84 d8 01 00
	00		 je	 $LN36@Win32MainW
  00067	e9 b1 02 00 00	 jmp	 $LN37@Win32MainW
$LN43@Win32MainW:
  0006c	83 7c 24 48 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00071	74 46		 je	 SHORT $LN6@Win32MainW
  00073	81 7c 24 48 ff
	00 00 00	 cmp	 DWORD PTR tv64[rsp], 255 ; 000000ffH
  0007b	0f 86 9c 02 00
	00		 jbe	 $LN37@Win32MainW
  00081	81 7c 24 48 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  00089	76 4c		 jbe	 SHORT $LN8@Win32MainW
  0008b	81 7c 24 48 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  00093	0f 86 84 02 00
	00		 jbe	 $LN37@Win32MainW
  00099	81 7c 24 48 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  000a1	76 34		 jbe	 SHORT $LN8@Win32MainW
  000a3	e9 75 02 00 00	 jmp	 $LN37@Win32MainW
$LN4@Win32MainW:

; 242  :     {
; 243  :         case WM_SIZE: {
; 244  :         } break;

  000a8	e9 9a 02 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 245  : 
; 246  :         case WM_CLOSE: {
; 247  :             // TODO Handle this with a message to the user?
; 248  :             GlobalRunning = false;

  000ad	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 249  :         } break;

  000b4	e9 8e 02 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 250  : 
; 251  :         case WM_ACTIVATEAPP: {
; 252  :             OutputDebugStringA("WM_ACTIVATEAPP\n");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84381
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 253  :         } break;

  000c6	e9 7c 02 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 254  : 
; 255  :         case WM_DESTROY: {
; 256  :             // TODO Handle this as an error - recreate window?
; 257  :             GlobalRunning = false;

  000cb	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 258  :         } break;

  000d2	e9 70 02 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 259  : 
; 260  :         case WM_SYSKEYDOWN: 
; 261  :         case WM_SYSKEYUP:
; 262  :         case WM_KEYDOWN:
; 263  :         case WM_KEYUP: {
; 264  :             uint32 VKCode = WParam;

  000d7	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR WParam$[rsp]
  000de	89 44 24 40	 mov	 DWORD PTR VKCode$1[rsp], eax

; 265  :             bool WasDown = ((LParam & (1 << 30)) != 0);

  000e2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  000ea	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  000f0	48 85 c0	 test	 rax, rax
  000f3	74 0a		 je	 SHORT $LN39@Win32MainW
  000f5	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  000fd	eb 08		 jmp	 SHORT $LN40@Win32MainW
$LN39@Win32MainW:
  000ff	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN40@Win32MainW:
  00107	0f b6 44 24 4c	 movzx	 eax, BYTE PTR tv68[rsp]
  0010c	88 44 24 44	 mov	 BYTE PTR WasDown$2[rsp], al

; 266  :             bool IsDown = ((LParam & (1 << 31)) == 0);

  00110	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00118	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  0011e	48 85 c0	 test	 rax, rax
  00121	75 0a		 jne	 SHORT $LN41@Win32MainW
  00123	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0012b	eb 08		 jmp	 SHORT $LN42@Win32MainW
$LN41@Win32MainW:
  0012d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN42@Win32MainW:
  00135	0f b6 44 24 50	 movzx	 eax, BYTE PTR tv72[rsp]
  0013a	88 44 24 45	 mov	 BYTE PTR IsDown$3[rsp], al

; 267  :             if(WasDown != IsDown) {

  0013e	0f b6 44 24 44	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  00143	0f b6 4c 24 45	 movzx	 ecx, BYTE PTR IsDown$3[rsp]
  00148	3b c1		 cmp	 eax, ecx
  0014a	0f 84 c9 00 00
	00		 je	 $LN9@Win32MainW

; 268  :                 if(VKCode == 'W') {

  00150	83 7c 24 40 57	 cmp	 DWORD PTR VKCode$1[rsp], 87 ; 00000057H
  00155	75 05		 jne	 SHORT $LN10@Win32MainW
  00157	e9 bd 00 00 00	 jmp	 $LN11@Win32MainW
$LN10@Win32MainW:

; 269  :                 }
; 270  :                 else if(VKCode == 'A') {

  0015c	83 7c 24 40 41	 cmp	 DWORD PTR VKCode$1[rsp], 65 ; 00000041H
  00161	75 05		 jne	 SHORT $LN12@Win32MainW
  00163	e9 b1 00 00 00	 jmp	 $LN13@Win32MainW
$LN12@Win32MainW:

; 271  :                 }
; 272  :                 else if(VKCode == 'S') {

  00168	83 7c 24 40 53	 cmp	 DWORD PTR VKCode$1[rsp], 83 ; 00000053H
  0016d	75 05		 jne	 SHORT $LN14@Win32MainW
  0016f	e9 a5 00 00 00	 jmp	 $LN15@Win32MainW
$LN14@Win32MainW:

; 273  :                 }
; 274  :                 else if(VKCode == 'D') {

  00174	83 7c 24 40 44	 cmp	 DWORD PTR VKCode$1[rsp], 68 ; 00000044H
  00179	75 05		 jne	 SHORT $LN16@Win32MainW
  0017b	e9 99 00 00 00	 jmp	 $LN17@Win32MainW
$LN16@Win32MainW:

; 275  :                 }
; 276  :                 else if(VKCode == 'Q') {

  00180	83 7c 24 40 51	 cmp	 DWORD PTR VKCode$1[rsp], 81 ; 00000051H
  00185	75 05		 jne	 SHORT $LN18@Win32MainW
  00187	e9 8d 00 00 00	 jmp	 $LN19@Win32MainW
$LN18@Win32MainW:

; 277  :                 }
; 278  :                 else if(VKCode == 'E') {

  0018c	83 7c 24 40 45	 cmp	 DWORD PTR VKCode$1[rsp], 69 ; 00000045H
  00191	75 05		 jne	 SHORT $LN20@Win32MainW
  00193	e9 81 00 00 00	 jmp	 $LN21@Win32MainW
$LN20@Win32MainW:

; 279  :                 }
; 280  :                 else if(VKCode == VK_UP) {

  00198	83 7c 24 40 26	 cmp	 DWORD PTR VKCode$1[rsp], 38 ; 00000026H
  0019d	75 02		 jne	 SHORT $LN22@Win32MainW
  0019f	eb 78		 jmp	 SHORT $LN23@Win32MainW
$LN22@Win32MainW:

; 281  :                 }
; 282  :                 else if(VKCode == VK_DOWN) {

  001a1	83 7c 24 40 28	 cmp	 DWORD PTR VKCode$1[rsp], 40 ; 00000028H
  001a6	75 02		 jne	 SHORT $LN24@Win32MainW
  001a8	eb 6f		 jmp	 SHORT $LN25@Win32MainW
$LN24@Win32MainW:

; 283  :                 }
; 284  :                 else if(VKCode == VK_LEFT) {

  001aa	83 7c 24 40 25	 cmp	 DWORD PTR VKCode$1[rsp], 37 ; 00000025H
  001af	75 02		 jne	 SHORT $LN26@Win32MainW
  001b1	eb 66		 jmp	 SHORT $LN27@Win32MainW
$LN26@Win32MainW:

; 285  :                 }
; 286  :                 else if(VKCode == VK_RIGHT) {

  001b3	83 7c 24 40 27	 cmp	 DWORD PTR VKCode$1[rsp], 39 ; 00000027H
  001b8	75 02		 jne	 SHORT $LN28@Win32MainW
  001ba	eb 5d		 jmp	 SHORT $LN29@Win32MainW
$LN28@Win32MainW:

; 287  :                 }
; 288  :                 else if(VKCode == VK_ESCAPE) {

  001bc	83 7c 24 40 1b	 cmp	 DWORD PTR VKCode$1[rsp], 27
  001c1	75 09		 jne	 SHORT $LN30@Win32MainW

; 289  :                     GlobalRunning = false;

  001c3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
  001ca	eb 4d		 jmp	 SHORT $LN31@Win32MainW
$LN30@Win32MainW:

; 290  :                 }
; 291  :                 else if(VKCode == VK_SPACE) {

  001cc	83 7c 24 40 20	 cmp	 DWORD PTR VKCode$1[rsp], 32 ; 00000020H
  001d1	75 46		 jne	 SHORT $LN32@Win32MainW

; 292  :                     OutputDebugStringA("Space ");

  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84408
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 293  :                     if(IsDown) {

  001e0	0f b6 44 24 45	 movzx	 eax, BYTE PTR IsDown$3[rsp]
  001e5	85 c0		 test	 eax, eax
  001e7	74 0d		 je	 SHORT $LN33@Win32MainW

; 294  :                         OutputDebugStringA("IsDown ");

  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84410
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN33@Win32MainW:

; 295  :                     }
; 296  :                     if(WasDown) {

  001f6	0f b6 44 24 44	 movzx	 eax, BYTE PTR WasDown$2[rsp]
  001fb	85 c0		 test	 eax, eax
  001fd	74 0d		 je	 SHORT $LN34@Win32MainW

; 297  :                         OutputDebugStringA("WasDown ");

  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84412
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN34@Win32MainW:

; 298  :                     }
; 299  :                     OutputDebugStringA("\n");

  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84413
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN32@Win32MainW:
$LN31@Win32MainW:
$LN29@Win32MainW:
$LN27@Win32MainW:
$LN25@Win32MainW:
$LN23@Win32MainW:
$LN21@Win32MainW:
$LN19@Win32MainW:
$LN17@Win32MainW:
$LN15@Win32MainW:
$LN13@Win32MainW:
$LN11@Win32MainW:
$LN9@Win32MainW:

; 300  :                 }
; 301  :             }
; 302  : 
; 303  :             if((LParam & (1 << 29)) && VKCode == VK_F4) { //Alt+F4

  00219	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00221	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00227	48 85 c0	 test	 rax, rax
  0022a	74 0e		 je	 SHORT $LN35@Win32MainW
  0022c	83 7c 24 40 73	 cmp	 DWORD PTR VKCode$1[rsp], 115 ; 00000073H
  00231	75 07		 jne	 SHORT $LN35@Win32MainW

; 304  :                 GlobalRunning = false;

  00233	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN35@Win32MainW:

; 305  :             }
; 306  : 
; 307  :         } break;

  0023a	e9 08 01 00 00	 jmp	 $LN2@Win32MainW
$LN36@Win32MainW:

; 308  : 
; 309  :         case WM_PAINT: {
; 310  :             OutputDebugStringA("WM_PAINT\n");

  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84416
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 311  :             PAINTSTRUCT Paint;
; 312  :             HDC DeviceContext = BeginPaint(Window, &Paint);

  0024c	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR Paint$11[rsp]
  00254	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0025c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  00262	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR DeviceContext$10[rsp], rax

; 313  :             int X = Paint.rcPaint.left;

  0026a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+12]
  00271	89 44 24 60	 mov	 DWORD PTR X$7[rsp], eax

; 314  :             int Y = Paint.rcPaint.top;

  00275	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  0027c	89 44 24 58	 mov	 DWORD PTR Y$5[rsp], eax

; 315  :             int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  00280	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+12]
  00287	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+20]
  0028e	2b c8		 sub	 ecx, eax
  00290	8b c1		 mov	 eax, ecx
  00292	89 44 24 54	 mov	 DWORD PTR Width$4[rsp], eax

; 316  :             int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  00296	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR Paint$11[rsp+16]
  0029d	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR Paint$11[rsp+24]
  002a4	2b c8		 sub	 ecx, eax
  002a6	8b c1		 mov	 eax, ecx
  002a8	89 44 24 5c	 mov	 DWORD PTR Height$6[rsp], eax

; 317  : 
; 318  : 
; 319  :             win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  002ac	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  002b4	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  002b9	48 89 44 24 78	 mov	 QWORD PTR $T9[rsp], rax
  002be	48 8b 44 24 78	 mov	 rax, QWORD PTR $T9[rsp]
  002c3	48 89 44 24 68	 mov	 QWORD PTR Dimension$8[rsp], rax

; 320  :             Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, &GlobalBackbuffer, X, Y, Width, Height);

  002c8	8b 44 24 5c	 mov	 eax, DWORD PTR Height$6[rsp]
  002cc	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  002d0	8b 44 24 54	 mov	 eax, DWORD PTR Width$4[rsp]
  002d4	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  002d8	8b 44 24 58	 mov	 eax, DWORD PTR Y$5[rsp]
  002dc	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  002e0	8b 44 24 60	 mov	 eax, DWORD PTR X$7[rsp]
  002e4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002e8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  002ef	44 8b 44 24 6c	 mov	 r8d, DWORD PTR Dimension$8[rsp+4]
  002f4	8b 54 24 68	 mov	 edx, DWORD PTR Dimension$8[rsp]
  002f8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$10[rsp]
  00300	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow

; 321  :             EndPaint(Window, &Paint);

  00305	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR Paint$11[rsp]
  0030d	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00315	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 322  :         } break;

  0031b	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN37@Win32MainW:

; 323  : 
; 324  :         default: {
; 325  :             // OutputDebugStringA("default\n");
; 326  :             Result = DefWindowProc(Window, Message, WParam, LParam);

  0031d	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  00325	4c 8b 84 24 10
	01 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  0032d	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00334	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  00342	48 89 44 24 70	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 327  :         } break;
; 328  :     }
; 329  : 
; 330  :     return(Result);

  00347	48 8b 44 24 70	 mov	 rax, QWORD PTR Result$[rsp]

; 331  : }

  0034c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00354	48 33 cc	 xor	 rcx, rsp
  00357	e8 00 00 00 00	 call	 __security_check_cookie
  0035c	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  00363	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DeviceContext$ = 128
WindowWidth$ = 136
WindowHeight$ = 144
Buffer$ = 152
X$ = 160
Y$ = 168
Width$ = 176
Height$ = 184
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z PROC ; Win32DisplayBufferInWindow

; 220  : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 221  :     // TODO aspect ration correction
; 222  :     StretchDIBits(

  00017	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0001f	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00027	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  0002f	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00034	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003c	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00040	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00045	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004d	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00050	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00054	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005c	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0005f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00063	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00073	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007e	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00086	45 33 c0	 xor	 r8d, r8d
  00089	33 d2		 xor	 edx, edx
  0008b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 223  :         DeviceContext,
; 224  :         0, 0, WindowWidth, WindowHeight,
; 225  :         0, 0, Buffer->Width, Buffer->Height,
; 226  :         Buffer->Memory,
; 227  :         &Buffer->Info,
; 228  :         DIB_RGB_COLORS, SRCCOPY
; 229  :     );
; 230  : }

  00099	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009d	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 186  : Win32ResizeDIBSection(win32_offscreen_buffer *Buffer, int Width, int Height) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 187  :     // TODO Bulletproof this
; 188  :     // Maybe don't free first, free after, then free first if that fails
; 189  : 
; 190  :     if(Buffer->Memory) {

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 191  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 192  :     }
; 193  : 
; 194  :     Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 195  :     Buffer->Height = Height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 196  :     Buffer->BytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 197  : 
; 198  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 199  :     Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 200  :     Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 201  :     Buffer->Info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 202  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 203  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 204  : 
; 205  :     // NOTE: Thanks Chris Hecker for clarifying StretchDIBits/BitBlt
; 206  :     int BitmapMemorySize = (Buffer->Width*Buffer->Height)*Buffer->BytesPerPixel;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000bb	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000c4	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c8	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 207  :     Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000d1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d7	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000ed	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 208  : 
; 209  :     // TODO probably clear to black
; 210  : 
; 211  :     Buffer->Pitch = Width*Buffer->BytesPerPixel;

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f6	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  000fa	0f af 48 44	 imul	 ecx, DWORD PTR [rax+68]
  000fe	8b c1		 mov	 eax, ecx
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00105	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 212  : }

  00108	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010c	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Red$1 = 0
Green$2 = 1
Blue$3 = 2
X$4 = 4
Y$5 = 8
tv72 = 12
Pixel$6 = 16
Row$ = 24
Buffer$ = 48
BlueOffset$ = 56
GreenOffset$ = 64
?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; RenderWeirdGradient

; 169  : ) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 170  :     // TODO lets see which is better
; 171  :     uint8 *Row = (uint8 *)Buffer->Memory;

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0001b	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 172  :     for( int Y = 0 ; Y < Buffer->Height ; ++Y ) {

  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$5[rsp], 0
  00028	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  0002a	8b 44 24 08	 mov	 eax, DWORD PTR Y$5[rsp]
  0002e	ff c0		 inc	 eax
  00030	89 44 24 08	 mov	 DWORD PTR Y$5[rsp], eax
$LN4@RenderWeir:
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00039	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0003c	39 44 24 08	 cmp	 DWORD PTR Y$5[rsp], eax
  00040	0f 8d c5 00 00
	00		 jge	 $LN3@RenderWeir

; 173  :         uint32 *Pixel = (uint32 *)Row;

  00046	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  0004b	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 174  :         for( int X = 0 ; X < Buffer->Width ; ++X ) {

  00050	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$4[rsp], 0
  00058	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  0005a	8b 44 24 04	 mov	 eax, DWORD PTR X$4[rsp]
  0005e	ff c0		 inc	 eax
  00060	89 44 24 04	 mov	 DWORD PTR X$4[rsp], eax
$LN7@RenderWeir:
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0006c	39 44 24 04	 cmp	 DWORD PTR X$4[rsp], eax
  00070	7d 7b		 jge	 SHORT $LN6@RenderWeir

; 175  :             uint8 Blue = 0; //(X + BlueOffset);

  00072	c6 44 24 02 00	 mov	 BYTE PTR Blue$3[rsp], 0

; 176  :             uint8 Green = 0; //(Y + GreenOffset);

  00077	c6 44 24 01 00	 mov	 BYTE PTR Green$2[rsp], 0

; 177  : 			uint8 Red = ((X - (GreenOffset/2))*(Y + (BlueOffset/4))/8);

  0007c	8b 44 24 40	 mov	 eax, DWORD PTR GreenOffset$[rsp]
  00080	99		 cdq
  00081	2b c2		 sub	 eax, edx
  00083	d1 f8		 sar	 eax, 1
  00085	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  00089	2b c8		 sub	 ecx, eax
  0008b	8b c1		 mov	 eax, ecx
  0008d	89 44 24 0c	 mov	 DWORD PTR tv72[rsp], eax
  00091	8b 44 24 38	 mov	 eax, DWORD PTR BlueOffset$[rsp]
  00095	99		 cdq
  00096	83 e2 03	 and	 edx, 3
  00099	03 c2		 add	 eax, edx
  0009b	c1 f8 02	 sar	 eax, 2
  0009e	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  000a2	03 c8		 add	 ecx, eax
  000a4	8b c1		 mov	 eax, ecx
  000a6	8b 4c 24 0c	 mov	 ecx, DWORD PTR tv72[rsp]
  000aa	0f af c8	 imul	 ecx, eax
  000ad	8b c1		 mov	 eax, ecx
  000af	99		 cdq
  000b0	83 e2 07	 and	 edx, 7
  000b3	03 c2		 add	 eax, edx
  000b5	c1 f8 03	 sar	 eax, 3
  000b8	88 04 24	 mov	 BYTE PTR Red$1[rsp], al

; 178  : 			*Pixel++ = ((Red << 16) | (Green << 8) | Blue);

  000bb	0f b6 04 24	 movzx	 eax, BYTE PTR Red$1[rsp]
  000bf	c1 e0 10	 shl	 eax, 16
  000c2	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR Green$2[rsp]
  000c7	c1 e1 08	 shl	 ecx, 8
  000ca	0b c1		 or	 eax, ecx
  000cc	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR Blue$3[rsp]
  000d1	0b c1		 or	 eax, ecx
  000d3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Pixel$6[rsp]
  000d8	89 01		 mov	 DWORD PTR [rcx], eax
  000da	48 8b 44 24 10	 mov	 rax, QWORD PTR Pixel$6[rsp]
  000df	48 83 c0 04	 add	 rax, 4
  000e3	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 179  : 		}

  000e8	e9 6d ff ff ff	 jmp	 $LN5@RenderWeir
$LN6@RenderWeir:

; 180  : 
; 181  :         Row += Buffer->Pitch;

  000ed	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f2	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  000f6	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  000fb	48 03 c8	 add	 rcx, rax
  000fe	48 8b c1	 mov	 rax, rcx
  00101	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 182  :     }

  00106	e9 1f ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 183  : }

  0010b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010f	c3		 ret	 0
?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 155  : internal win32_window_dimension Win32GetWindowDimension(HWND Window) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 156  :     win32_window_dimension Result;
; 157  : 
; 158  :     RECT ClientRect;
; 159  :     GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 160  :     Result.Width = ClientRect.right - ClientRect.left;

  00028	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 161  :     Result.Height = ClientRect.bottom - ClientRect.top;

  00038	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 162  : 
; 163  :     return(Result);

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 164  : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DirectSound$1 = 32
Error$2 = 40
Error$3 = 44
DirectSoundCreate$4 = 48
DSoundLibrary$ = 56
PrimaryBuffer$5 = 64
SecondaryBuffer$6 = 72
BufferDescription$7 = 80
WaveFormat$8 = 120
BufferDescription$9 = 144
__$ArrayPad$ = 184
Window$ = 208
SamplesPerSecond$ = 216
BufferSize$ = 224
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z PROC		; Win32InitDSound

; 89   : Win32InitDSound(HWND Window, int32 SamplesPerSecond, int32 BufferSize) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 90   :     // load the library
; 91   :     HMODULE DSoundLibrary = LoadLibraryA("dsound.dll");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84301
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00035	48 89 44 24 38	 mov	 QWORD PTR DSoundLibrary$[rsp], rax

; 92   : 
; 93   :     if(DSoundLibrary) {

  0003a	48 83 7c 24 38
	00		 cmp	 QWORD PTR DSoundLibrary$[rsp], 0
  00040	0f 84 d8 01 00
	00		 je	 $LN2@Win32InitD

; 94   :         // get a DirectSound object
; 95   :         direct_sound_create *DirectSoundCreate = (direct_sound_create *)GetProcAddress(DSoundLibrary, "DirectSoundCreate");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG84303
  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR DSoundLibrary$[rsp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00058	48 89 44 24 30	 mov	 QWORD PTR DirectSoundCreate$4[rsp], rax

; 96   :         // TODO double-check that this works on XP -- 7 or 8?
; 97   :         LPDIRECTSOUND DirectSound;
; 98   :         if(DirectSoundCreate && SUCCEEDED(DirectSoundCreate(0, &DirectSound, 0))) {

  0005d	48 83 7c 24 30
	00		 cmp	 QWORD PTR DirectSoundCreate$4[rsp], 0
  00063	0f 84 b5 01 00
	00		 je	 $LN3@Win32InitD
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	48 8d 54 24 20	 lea	 rdx, QWORD PTR DirectSound$1[rsp]
  00071	33 c9		 xor	 ecx, ecx
  00073	ff 54 24 30	 call	 QWORD PTR DirectSoundCreate$4[rsp]
  00077	85 c0		 test	 eax, eax
  00079	0f 8c 9f 01 00
	00		 jl	 $LN3@Win32InitD

; 99   :             WAVEFORMATEX WaveFormat = {};

  0007f	48 8d 44 24 78	 lea	 rax, QWORD PTR WaveFormat$8[rsp]
  00084	48 8b f8	 mov	 rdi, rax
  00087	33 c0		 xor	 eax, eax
  00089	b9 12 00 00 00	 mov	 ecx, 18
  0008e	f3 aa		 rep stosb

; 100  :             WaveFormat.wFormatTag = WAVE_FORMAT_PCM;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	66 89 44 24 78	 mov	 WORD PTR WaveFormat$8[rsp], ax

; 101  :             WaveFormat.nChannels = 2;

  0009a	b8 02 00 00 00	 mov	 eax, 2
  0009f	66 89 44 24 7a	 mov	 WORD PTR WaveFormat$8[rsp+2], ax

; 102  :             WaveFormat.nSamplesPerSec = SamplesPerSecond;

  000a4	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR SamplesPerSecond$[rsp]
  000ab	89 44 24 7c	 mov	 DWORD PTR WaveFormat$8[rsp+4], eax

; 103  :             WaveFormat.wBitsPerSample = 16;

  000af	b8 10 00 00 00	 mov	 eax, 16
  000b4	66 89 84 24 86
	00 00 00	 mov	 WORD PTR WaveFormat$8[rsp+14], ax

; 104  :             WaveFormat.nBlockAlign = (WaveFormat.nChannels*WaveFormat.wBitsPerSample) / 8;

  000bc	0f b7 44 24 7a	 movzx	 eax, WORD PTR WaveFormat$8[rsp+2]
  000c1	0f b7 8c 24 86
	00 00 00	 movzx	 ecx, WORD PTR WaveFormat$8[rsp+14]
  000c9	0f af c1	 imul	 eax, ecx
  000cc	99		 cdq
  000cd	83 e2 07	 and	 edx, 7
  000d0	03 c2		 add	 eax, edx
  000d2	c1 f8 03	 sar	 eax, 3
  000d5	66 89 84 24 84
	00 00 00	 mov	 WORD PTR WaveFormat$8[rsp+12], ax

; 105  :             WaveFormat.nAvgBytesPerSec = WaveFormat.nSamplesPerSec*WaveFormat.nBlockAlign;

  000dd	0f b7 84 24 84
	00 00 00	 movzx	 eax, WORD PTR WaveFormat$8[rsp+12]
  000e5	8b 4c 24 7c	 mov	 ecx, DWORD PTR WaveFormat$8[rsp+4]
  000e9	0f af c8	 imul	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 84 24 80 00
	00 00		 mov	 DWORD PTR WaveFormat$8[rsp+8], eax

; 106  :             WaveFormat.cbSize = 0;

  000f5	33 c0		 xor	 eax, eax
  000f7	66 89 84 24 88
	00 00 00	 mov	 WORD PTR WaveFormat$8[rsp+16], ax

; 107  : 
; 108  :             if(SUCCEEDED(DirectSound->SetCooperativeLevel(Window, DSSCL_PRIORITY))) {

  000ff	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  00104	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00107	41 b8 02 00 00
	00		 mov	 r8d, 2
  0010d	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR Window$[rsp]
  00115	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  0011a	ff 50 30	 call	 QWORD PTR [rax+48]
  0011d	85 c0		 test	 eax, eax
  0011f	0f 8c 86 00 00
	00		 jl	 $LN5@Win32InitD

; 109  :                 DSBUFFERDESC BufferDescription = {0};

  00125	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR BufferDescription$9[rsp], 0
  00130	48 8d 84 24 94
	00 00 00	 lea	 rax, QWORD PTR BufferDescription$9[rsp+4]
  00138	48 8b f8	 mov	 rdi, rax
  0013b	33 c0		 xor	 eax, eax
  0013d	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00142	f3 aa		 rep stosb

; 110  :                 BufferDescription.dwSize = sizeof(BufferDescription);

  00144	c7 84 24 90 00
	00 00 28 00 00
	00		 mov	 DWORD PTR BufferDescription$9[rsp], 40 ; 00000028H

; 111  :                 BufferDescription.dwFlags = DSBCAPS_PRIMARYBUFFER;

  0014f	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR BufferDescription$9[rsp+4], 1

; 112  :                 // TODO DSBCAPS_GLOBALFOCUS?
; 113  : 
; 114  :                 LPDIRECTSOUNDBUFFER PrimaryBuffer;
; 115  : 
; 116  :                 if (SUCCEEDED(DirectSound->CreateSoundBuffer(&BufferDescription, &PrimaryBuffer, 0))) {

  0015a	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  0015f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00162	45 33 c9	 xor	 r9d, r9d
  00165	4c 8d 44 24 40	 lea	 r8, QWORD PTR PrimaryBuffer$5[rsp]
  0016a	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR BufferDescription$9[rsp]
  00172	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  00177	ff 50 18	 call	 QWORD PTR [rax+24]
  0017a	85 c0		 test	 eax, eax
  0017c	7c 2d		 jl	 SHORT $LN7@Win32InitD

; 117  :                     HRESULT Error = PrimaryBuffer->SetFormat(&WaveFormat);

  0017e	48 8b 44 24 40	 mov	 rax, QWORD PTR PrimaryBuffer$5[rsp]
  00183	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00186	48 8d 54 24 78	 lea	 rdx, QWORD PTR WaveFormat$8[rsp]
  0018b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR PrimaryBuffer$5[rsp]
  00190	ff 50 70	 call	 QWORD PTR [rax+112]
  00193	89 44 24 2c	 mov	 DWORD PTR Error$3[rsp], eax

; 118  :                     if(SUCCEEDED(Error)) {

  00197	83 7c 24 2c 00	 cmp	 DWORD PTR Error$3[rsp], 0
  0019c	7c 0d		 jl	 SHORT $LN9@Win32InitD

; 119  :                         OutputDebugStringA("Primary buffer format was set.\n");

  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84312
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN9@Win32InitD:
$LN7@Win32InitD:
$LN5@Win32InitD:

; 120  :                     }
; 121  :                     else {
; 122  :                         // TODO Diagnostic
; 123  :                     }
; 124  :                 }
; 125  :                 else {
; 126  :                     // TODO Diagnostic
; 127  :                 }
; 128  :             }
; 129  :             else {
; 130  :                 // TODO Diagnostic
; 131  :             }
; 132  :             // create a secondary buffer
; 133  :             // TODO DSBCAPS_GETCURENTPOSITION2?
; 134  :             DSBUFFERDESC BufferDescription = {0};

  001ab	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR BufferDescription$7[rsp], 0
  001b3	48 8d 44 24 54	 lea	 rax, QWORD PTR BufferDescription$7[rsp+4]
  001b8	48 8b f8	 mov	 rdi, rax
  001bb	33 c0		 xor	 eax, eax
  001bd	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001c2	f3 aa		 rep stosb

; 135  :             BufferDescription.dwSize = sizeof(BufferDescription);

  001c4	c7 44 24 50 28
	00 00 00	 mov	 DWORD PTR BufferDescription$7[rsp], 40 ; 00000028H

; 136  :             BufferDescription.dwFlags = 0;

  001cc	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR BufferDescription$7[rsp+4], 0

; 137  :             BufferDescription.dwBufferBytes = BufferSize;

  001d4	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR BufferSize$[rsp]
  001db	89 44 24 58	 mov	 DWORD PTR BufferDescription$7[rsp+8], eax

; 138  :             BufferDescription.lpwfxFormat = &WaveFormat;

  001df	48 8d 44 24 78	 lea	 rax, QWORD PTR WaveFormat$8[rsp]
  001e4	48 89 44 24 60	 mov	 QWORD PTR BufferDescription$7[rsp+16], rax

; 139  :             LPDIRECTSOUNDBUFFER SecondaryBuffer;
; 140  :             HRESULT Error = DirectSound->CreateSoundBuffer(&BufferDescription, &SecondaryBuffer, 0);

  001e9	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  001ee	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f1	45 33 c9	 xor	 r9d, r9d
  001f4	4c 8d 44 24 48	 lea	 r8, QWORD PTR SecondaryBuffer$6[rsp]
  001f9	48 8d 54 24 50	 lea	 rdx, QWORD PTR BufferDescription$7[rsp]
  001fe	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  00203	ff 50 18	 call	 QWORD PTR [rax+24]
  00206	89 44 24 28	 mov	 DWORD PTR Error$2[rsp], eax

; 141  : 
; 142  :             if(SUCCEEDED(Error)) {

  0020a	83 7c 24 28 00	 cmp	 DWORD PTR Error$2[rsp], 0
  0020f	7c 0d		 jl	 SHORT $LN11@Win32InitD

; 143  :                 OutputDebugStringA("Secondary buffer created successfuly\n");

  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84314
  00218	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN11@Win32InitD:
$LN3@Win32InitD:
$LN2@Win32InitD:

; 144  :             }
; 145  : 
; 146  : 
; 147  : 
; 148  :         }
; 149  :         else {
; 150  :             // TODO Diagnositc
; 151  :         }
; 152  :     }
; 153  : }

  0021e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00226	48 33 cc	 xor	 rcx, rsp
  00229	e8 00 00 00 00	 call	 __security_check_cookie
  0022e	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00235	5f		 pop	 rdi
  00236	c3		 ret	 0
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ENDP		; Win32InitDSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
XInputLibrary$ = 32
XInputLibrary$1 = 40
?Wind32LoadXInput@@YAXXZ PROC				; Wind32LoadXInput

; 68   : Wind32LoadXInput(void) {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 69   :     // TODO Test on windows 8
; 70   :     HMODULE XInputLibrary = LoadLibraryA("xinput1_4.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84271
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 71   :     if(!XInputLibrary) {

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	75 12		 jne	 SHORT $LN2@Wind32Load

; 72   :         // TODO Diagnostic
; 73   :         HMODULE XInputLibrary = LoadLibraryA("xinput1_3.dll");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG84273
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0002b	48 89 44 24 28	 mov	 QWORD PTR XInputLibrary$1[rsp], rax
$LN2@Wind32Load:

; 74   :     }
; 75   :     if(XInputLibrary) {

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00036	74 62		 je	 SHORT $LN3@Wind32Load

; 76   :         XInputGetState = (x_input_get_state *)GetProcAddress(XInputLibrary, "XInputGetState" );

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG84276
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0004a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax

; 77   :         if(!XInputGetState) {XInputGetState = XInputGetStateStub;}

  00051	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, 0
  00059	75 0e		 jne	 SHORT $LN5@Wind32Load
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetStateStub
  00062	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax
$LN5@Wind32Load:

; 78   :         XInputSetState = (x_input_set_state *)GetProcAddress(XInputLibrary, "XInputSetState" );

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG84278
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0007b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax

; 79   :         if(!XInputSetState) {XInputSetState = XInputSetStateStub;}

  00082	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, 0
  0008a	75 0e		 jne	 SHORT $LN6@Wind32Load
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
  00093	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax
$LN6@Wind32Load:
$LN3@Wind32Load:

; 80   : 
; 81   :         // TODO Diagnostic
; 82   :     }
; 83   :     else {
; 84   :         // TODO Diagnostic
; 85   :     }
; 86   : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
?Wind32LoadXInput@@YAXXZ ENDP				; Wind32LoadXInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pVibration$ = 16
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z PROC	; XInputSetStateStub

; 58   : X_INPUT_SET_STATE(XInputSetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 59   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 60   : }

  0000e	c3		 ret	 0
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ENDP	; XInputSetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z PROC	; XInputGetStateStub

; 49   : X_INPUT_GET_STATE(XInputGetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 50   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 51   : }

  0000e	c3		 ret	 0
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ENDP	; XInputGetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv180 = 96
tv185 = 97
tv155 = 98
tv190 = 99
tv165 = 100
tv227 = 101
tv175 = 102
tv232 = 103
tv160 = 104
tv150 = 105
tv170 = 106
AButton$1 = 107
Pad$2 = 112
ControllerIndex$3 = 120
Back$4 = 124
Down$5 = 125
Right$6 = 126
BlueOffset$7 = 128
Up$8 = 132
GreenOffset$9 = 136
RightShoulder$10 = 140
Left$11 = 141
XButton$12 = 142
Start$13 = 143
LeftShoulder$14 = 144
YButton$15 = 145
BButton$16 = 146
Window$17 = 152
Dimension$18 = 160
StickX$19 = 168
Sticky$20 = 172
DeviceContext$21 = 176
$T22 = 184
WindowClass$ = 192
Message$23 = 272
ControllerState$24 = 320
__$ArrayPad$ = 336
Instance$ = 368
PrevInstance$ = 376
CmdLine$ = 384
ShowCode$ = 392
WinMain	PROC

; 339  : ) {

$LN40:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 60 01
	00 00		 sub	 rsp, 352		; 00000160H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 340  : 
; 341  :     Wind32LoadXInput();

  0002e	e8 00 00 00 00	 call	 ?Wind32LoadXInput@@YAXXZ ; Wind32LoadXInput

; 342  : 
; 343  :     WNDCLASSA WindowClass = {};

  00033	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00045	f3 aa		 rep stosb

; 344  : 
; 345  :     Win32ResizeDIBSection(&GlobalBackbuffer, 1280, 720);

  00047	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  0004d	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00059	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 346  :     
; 347  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0005e	c7 84 24 c0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 348  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  00070	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 349  :     WindowClass.hInstance = Instance;

  00078	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00080	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 350  : //    WindowClass.hIcon;
; 351  :     WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG84461
  0008f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 352  : 
; 353  :     if (RegisterClass(&WindowClass)) {

  00097	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000a5	0f b7 c0	 movzx	 eax, ax
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 20 04 00
	00		 je	 $LN9@WinMain

; 354  :         HWND Window = CreateWindowExA(

  000b0	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000b9	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000c1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000c6	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000cf	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000d8	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000e0	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000e8	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000f0	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000f8	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG84464
  00105	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0010d	33 c9		 xor	 ecx, ecx
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00115	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR Window$17[rsp], rax

; 355  :             0,
; 356  :             WindowClass.lpszClassName,
; 357  :             "Handmade Hero",
; 358  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 359  :             CW_USEDEFAULT,
; 360  :             CW_USEDEFAULT,
; 361  :             CW_USEDEFAULT,
; 362  :             CW_USEDEFAULT,
; 363  :             0,
; 364  :             0,
; 365  :             Instance,
; 366  :             0
; 367  :         );
; 368  :         if(Window){

  0011d	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR Window$17[rsp], 0
  00126	0f 84 a4 03 00
	00		 je	 $LN11@WinMain

; 369  :             int BlueOffset = 0;

  0012c	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR BlueOffset$7[rsp], 0

; 370  :             int GreenOffset = 0;

  00137	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR GreenOffset$9[rsp], 0

; 371  : 
; 372  :             Win32InitDSound(Window, 48000, 48000*sizeof(int16)*2);

  00142	41 b8 00 ee 02
	00		 mov	 r8d, 192000		; 0002ee00H
  00148	ba 80 bb 00 00	 mov	 edx, 48000		; 0000bb80H
  0014d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  00155	e8 00 00 00 00	 call	 ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ; Win32InitDSound

; 373  : 
; 374  :             
; 375  :             GlobalRunning = true;

  0015a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1
$LN2@WinMain:

; 376  :             while (GlobalRunning) {

  00161	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA
  00168	85 c0		 test	 eax, eax
  0016a	0f 84 60 03 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 377  :                 MSG Message;
; 378  :                 while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  00170	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00178	45 33 c9	 xor	 r9d, r9d
  0017b	45 33 c0	 xor	 r8d, r8d
  0017e	33 d2		 xor	 edx, edx
  00180	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  0018e	85 c0		 test	 eax, eax
  00190	74 2f		 je	 SHORT $LN5@WinMain

; 379  :                     if(Message.message == WM_QUIT) {

  00192	83 bc 24 18 01
	00 00 12	 cmp	 DWORD PTR Message$23[rsp+8], 18
  0019a	75 07		 jne	 SHORT $LN13@WinMain

; 380  :                         GlobalRunning = false;

  0019c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN13@WinMain:

; 381  :                     }
; 382  : 
; 383  :                     // TODO Should we poll this more frequently
; 384  : 
; 385  :                     TranslateMessage(&Message);

  001a3	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 386  :                     DispatchMessageA(&Message);

  001b1	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 387  :                 }

  001bf	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 388  : 
; 389  :                 for(
; 390  :                     DWORD ControllerIndex = 0;

  001c1	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR ControllerIndex$3[rsp], 0
  001c9	eb 0a		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:

; 392  :                     ++ControllerIndex

  001cb	8b 44 24 78	 mov	 eax, DWORD PTR ControllerIndex$3[rsp]
  001cf	ff c0		 inc	 eax
  001d1	89 44 24 78	 mov	 DWORD PTR ControllerIndex$3[rsp], eax
$LN8@WinMain:

; 391  :                     ControllerIndex < XUSER_MAX_COUNT;

  001d5	83 7c 24 78 04	 cmp	 DWORD PTR ControllerIndex$3[rsp], 4
  001da	0f 83 26 02 00
	00		 jae	 $LN7@WinMain

; 393  :                 ) {
; 394  :                     XINPUT_STATE ControllerState;
; 395  :                     if(XInputGetState(ControllerIndex, &ControllerState) == ERROR_SUCCESS) {

  001e0	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR ControllerState$24[rsp]
  001e8	8b 4c 24 78	 mov	 ecx, DWORD PTR ControllerIndex$3[rsp]
  001ec	ff 15 00 00 00
	00		 call	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA
  001f2	85 c0		 test	 eax, eax
  001f4	0f 85 07 02 00
	00		 jne	 $LN14@WinMain

; 396  :                         // NOTE Controller is plugged in
; 397  :                         // TODO See if ControllerState.dwPacketNumber increments
; 398  :                         XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  001fa	48 8d 84 24 44
	01 00 00	 lea	 rax, QWORD PTR ControllerState$24[rsp+4]
  00202	48 89 44 24 70	 mov	 QWORD PTR Pad$2[rsp], rax

; 399  : 
; 400  :                         bool Up = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);

  00207	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  0020c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0020f	83 e0 01	 and	 eax, 1
  00212	88 84 24 84 00
	00 00		 mov	 BYTE PTR Up$8[rsp], al

; 401  :                         bool Down = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);

  00219	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  0021e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00221	83 e0 02	 and	 eax, 2
  00224	85 c0		 test	 eax, eax
  00226	74 07		 je	 SHORT $LN18@WinMain
  00228	c6 44 24 69 01	 mov	 BYTE PTR tv150[rsp], 1
  0022d	eb 05		 jmp	 SHORT $LN19@WinMain
$LN18@WinMain:
  0022f	c6 44 24 69 00	 mov	 BYTE PTR tv150[rsp], 0
$LN19@WinMain:
  00234	0f b6 44 24 69	 movzx	 eax, BYTE PTR tv150[rsp]
  00239	88 44 24 7d	 mov	 BYTE PTR Down$5[rsp], al

; 402  :                         bool Left = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);

  0023d	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  00242	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00245	83 e0 04	 and	 eax, 4
  00248	85 c0		 test	 eax, eax
  0024a	74 07		 je	 SHORT $LN20@WinMain
  0024c	c6 44 24 62 01	 mov	 BYTE PTR tv155[rsp], 1
  00251	eb 05		 jmp	 SHORT $LN21@WinMain
$LN20@WinMain:
  00253	c6 44 24 62 00	 mov	 BYTE PTR tv155[rsp], 0
$LN21@WinMain:
  00258	0f b6 44 24 62	 movzx	 eax, BYTE PTR tv155[rsp]
  0025d	88 84 24 8d 00
	00 00		 mov	 BYTE PTR Left$11[rsp], al

; 403  :                         bool Right = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

  00264	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  00269	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0026c	83 e0 08	 and	 eax, 8
  0026f	85 c0		 test	 eax, eax
  00271	74 07		 je	 SHORT $LN22@WinMain
  00273	c6 44 24 68 01	 mov	 BYTE PTR tv160[rsp], 1
  00278	eb 05		 jmp	 SHORT $LN23@WinMain
$LN22@WinMain:
  0027a	c6 44 24 68 00	 mov	 BYTE PTR tv160[rsp], 0
$LN23@WinMain:
  0027f	0f b6 44 24 68	 movzx	 eax, BYTE PTR tv160[rsp]
  00284	88 44 24 7e	 mov	 BYTE PTR Right$6[rsp], al

; 404  :                         bool Start = (Pad->wButtons & XINPUT_GAMEPAD_START);

  00288	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  0028d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00290	83 e0 10	 and	 eax, 16
  00293	85 c0		 test	 eax, eax
  00295	74 07		 je	 SHORT $LN24@WinMain
  00297	c6 44 24 64 01	 mov	 BYTE PTR tv165[rsp], 1
  0029c	eb 05		 jmp	 SHORT $LN25@WinMain
$LN24@WinMain:
  0029e	c6 44 24 64 00	 mov	 BYTE PTR tv165[rsp], 0
$LN25@WinMain:
  002a3	0f b6 44 24 64	 movzx	 eax, BYTE PTR tv165[rsp]
  002a8	88 84 24 8f 00
	00 00		 mov	 BYTE PTR Start$13[rsp], al

; 405  :                         bool Back = (Pad->wButtons & XINPUT_GAMEPAD_BACK);

  002af	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  002b4	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002b7	83 e0 20	 and	 eax, 32			; 00000020H
  002ba	85 c0		 test	 eax, eax
  002bc	74 07		 je	 SHORT $LN26@WinMain
  002be	c6 44 24 6a 01	 mov	 BYTE PTR tv170[rsp], 1
  002c3	eb 05		 jmp	 SHORT $LN27@WinMain
$LN26@WinMain:
  002c5	c6 44 24 6a 00	 mov	 BYTE PTR tv170[rsp], 0
$LN27@WinMain:
  002ca	0f b6 44 24 6a	 movzx	 eax, BYTE PTR tv170[rsp]
  002cf	88 44 24 7c	 mov	 BYTE PTR Back$4[rsp], al

; 406  :                         bool LeftShoulder = (Pad->wButtons & XINPUT_GAMEPAD_LEFT_SHOULDER);

  002d3	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  002d8	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002db	25 00 01 00 00	 and	 eax, 256		; 00000100H
  002e0	85 c0		 test	 eax, eax
  002e2	74 07		 je	 SHORT $LN28@WinMain
  002e4	c6 44 24 66 01	 mov	 BYTE PTR tv175[rsp], 1
  002e9	eb 05		 jmp	 SHORT $LN29@WinMain
$LN28@WinMain:
  002eb	c6 44 24 66 00	 mov	 BYTE PTR tv175[rsp], 0
$LN29@WinMain:
  002f0	0f b6 44 24 66	 movzx	 eax, BYTE PTR tv175[rsp]
  002f5	88 84 24 90 00
	00 00		 mov	 BYTE PTR LeftShoulder$14[rsp], al

; 407  :                         bool RightShoulder = (Pad->wButtons & XINPUT_GAMEPAD_RIGHT_SHOULDER);

  002fc	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  00301	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00304	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00309	85 c0		 test	 eax, eax
  0030b	74 07		 je	 SHORT $LN30@WinMain
  0030d	c6 44 24 60 01	 mov	 BYTE PTR tv180[rsp], 1
  00312	eb 05		 jmp	 SHORT $LN31@WinMain
$LN30@WinMain:
  00314	c6 44 24 60 00	 mov	 BYTE PTR tv180[rsp], 0
$LN31@WinMain:
  00319	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv180[rsp]
  0031e	88 84 24 8c 00
	00 00		 mov	 BYTE PTR RightShoulder$10[rsp], al

; 408  :                         bool AButton = (Pad->wButtons & XINPUT_GAMEPAD_A);

  00325	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  0032a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0032d	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00332	85 c0		 test	 eax, eax
  00334	74 07		 je	 SHORT $LN32@WinMain
  00336	c6 44 24 61 01	 mov	 BYTE PTR tv185[rsp], 1
  0033b	eb 05		 jmp	 SHORT $LN33@WinMain
$LN32@WinMain:
  0033d	c6 44 24 61 00	 mov	 BYTE PTR tv185[rsp], 0
$LN33@WinMain:
  00342	0f b6 44 24 61	 movzx	 eax, BYTE PTR tv185[rsp]
  00347	88 44 24 6b	 mov	 BYTE PTR AButton$1[rsp], al

; 409  :                         bool BButton = (Pad->wButtons & XINPUT_GAMEPAD_B);

  0034b	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  00350	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00353	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00358	85 c0		 test	 eax, eax
  0035a	74 07		 je	 SHORT $LN34@WinMain
  0035c	c6 44 24 63 01	 mov	 BYTE PTR tv190[rsp], 1
  00361	eb 05		 jmp	 SHORT $LN35@WinMain
$LN34@WinMain:
  00363	c6 44 24 63 00	 mov	 BYTE PTR tv190[rsp], 0
$LN35@WinMain:
  00368	0f b6 44 24 63	 movzx	 eax, BYTE PTR tv190[rsp]
  0036d	88 84 24 92 00
	00 00		 mov	 BYTE PTR BButton$16[rsp], al

; 410  :                         bool XButton = (Pad->wButtons & XINPUT_GAMEPAD_X);

  00374	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  00379	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0037c	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00381	85 c0		 test	 eax, eax
  00383	74 07		 je	 SHORT $LN36@WinMain
  00385	c6 44 24 65 01	 mov	 BYTE PTR tv227[rsp], 1
  0038a	eb 05		 jmp	 SHORT $LN37@WinMain
$LN36@WinMain:
  0038c	c6 44 24 65 00	 mov	 BYTE PTR tv227[rsp], 0
$LN37@WinMain:
  00391	0f b6 44 24 65	 movzx	 eax, BYTE PTR tv227[rsp]
  00396	88 84 24 8e 00
	00 00		 mov	 BYTE PTR XButton$12[rsp], al

; 411  :                         bool YButton = (Pad->wButtons & XINPUT_GAMEPAD_Y);

  0039d	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  003a2	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003a5	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  003aa	85 c0		 test	 eax, eax
  003ac	74 07		 je	 SHORT $LN38@WinMain
  003ae	c6 44 24 67 01	 mov	 BYTE PTR tv232[rsp], 1
  003b3	eb 05		 jmp	 SHORT $LN39@WinMain
$LN38@WinMain:
  003b5	c6 44 24 67 00	 mov	 BYTE PTR tv232[rsp], 0
$LN39@WinMain:
  003ba	0f b6 44 24 67	 movzx	 eax, BYTE PTR tv232[rsp]
  003bf	88 84 24 91 00
	00 00		 mov	 BYTE PTR YButton$15[rsp], al

; 412  :                         
; 413  :                         int16 StickX = Pad->sThumbLX;

  003c6	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  003cb	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  003cf	66 89 84 24 a8
	00 00 00	 mov	 WORD PTR StickX$19[rsp], ax

; 414  :                         int16 Sticky = Pad->sThumbLY;

  003d7	48 8b 44 24 70	 mov	 rax, QWORD PTR Pad$2[rsp]
  003dc	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  003e0	66 89 84 24 ac
	00 00 00	 mov	 WORD PTR Sticky$20[rsp], ax

; 415  :                         if (AButton) {

  003e8	0f b6 44 24 6b	 movzx	 eax, BYTE PTR AButton$1[rsp]
  003ed	85 c0		 test	 eax, eax
  003ef	74 10		 je	 SHORT $LN16@WinMain

; 416  :                             ++BlueOffset;

  003f1	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR BlueOffset$7[rsp]
  003f8	ff c0		 inc	 eax
  003fa	89 84 24 80 00
	00 00		 mov	 DWORD PTR BlueOffset$7[rsp], eax
$LN16@WinMain:
$LN14@WinMain:

; 417  :                         }
; 418  :                     }
; 419  :                     else {
; 420  :                         // NOTE Controller is not available
; 421  :                     }
; 422  :                 }

  00401	e9 c5 fd ff ff	 jmp	 $LN6@WinMain
$LN7@WinMain:

; 423  : 
; 424  :                 // XINPUT_VIBRATION Vibration;
; 425  :                 // Vibration.wLeftMotorSpeed = 60000;
; 426  :                 // Vibration.wRightMotorSpeed = 60000;
; 427  :                 // XInputSetState(0, &Vibration);
; 428  : 
; 429  :                 RenderWeirdGradient(&GlobalBackbuffer, BlueOffset, GreenOffset);

  00406	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR GreenOffset$9[rsp]
  0040e	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR BlueOffset$7[rsp]
  00415	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  0041c	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; RenderWeirdGradient

; 430  :                 HDC DeviceContext = GetDC(Window);

  00421	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  00429	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  0042f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR DeviceContext$21[rsp], rax

; 431  :                 win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  00437	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  0043f	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  00444	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR $T22[rsp], rax
  0044c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR $T22[rsp]
  00454	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR Dimension$18[rsp], rax

; 432  :                 Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, &GlobalBackbuffer, 0, 0, Dimension.Width, Dimension.Height);

  0045c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR Dimension$18[rsp+4]
  00463	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00467	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR Dimension$18[rsp]
  0046e	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00472	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0047a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00482	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00489	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR Dimension$18[rsp+4]
  00491	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR Dimension$18[rsp]
  00498	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$21[rsp]
  004a0	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHPEAUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow

; 433  :                 ReleaseDC(Window, DeviceContext);

  004a5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$21[rsp]
  004ad	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  004b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 434  : 
; 435  :                 // ++BlueOffset;
; 436  : 				++GreenOffset;

  004bb	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR GreenOffset$9[rsp]
  004c2	ff c0		 inc	 eax
  004c4	89 84 24 88 00
	00 00		 mov	 DWORD PTR GreenOffset$9[rsp], eax

; 437  :             }

  004cb	e9 91 fc ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN11@WinMain:
$LN9@WinMain:

; 438  :         }
; 439  :         else {
; 440  :             // TODO Logging
; 441  :         }
; 442  :     }
; 443  :     else{
; 444  :         // TODO Logging
; 445  :     }
; 446  :     return(0); 

  004d0	33 c0		 xor	 eax, eax

; 447  : }

  004d2	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004da	48 33 cc	 xor	 rcx, rsp
  004dd	e8 00 00 00 00	 call	 __security_check_cookie
  004e2	48 81 c4 60 01
	00 00		 add	 rsp, 352		; 00000160H
  004e9	5f		 pop	 rdi
  004ea	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
