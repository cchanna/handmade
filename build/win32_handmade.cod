; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z	; XInputGetStateStub
PUBLIC	?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
CONST	SEGMENT
$SG87769 DB	'xinput1_4.dll', 00H
	ORG $+2
$SG87771 DB	'xinput9_1_0.dll', 00H
$SG87773 DB	'xinput1_3.dll', 00H
	ORG $+2
$SG87776 DB	'XInputGetState', 00H
	ORG $+1
$SG87778 DB	'XInputSetState', 00H
	ORG $+1
$SG87800 DB	'dsound.dll', 00H
	ORG $+5
$SG87802 DB	'DirectSoundCreate', 00H
	ORG $+6
$SG87811 DB	'Primary buffer format was set.', 0aH, 00H
$SG87813 DB	'Secondary buffer created successfuly', 0aH, 00H
	ORG $+2
$SG87850 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG87854 DB	'Keyboard input came in through a non-dispatch message!', 00H
	ORG $+1
$SG87856 DB	'WM_PAINT', 0aH, 00H
	ORG $+6
$SG3963	DB	'p:\handmade\code\handmade.cpp', 00H
	ORG $+2
$SG3965	DB	'test.out', 00H
	ORG $+7
$SG88031 DB	'HandmadeHeroWindowClass', 00H
$SG88034 DB	'Handmade Hero', 00H
CONST	ENDS
_DATA	SEGMENT
?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA DQ FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetState_
?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA DQ FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetState_
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	?SafeTruncateUInt64@@YAI_K@Z			; SafeTruncateUInt64
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@412e848000000000
PUBLIC	__real@43000000
PUBLIC	__real@43f0000000000000
PUBLIC	__real@46fffe00
PUBLIC	__real@47000000
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSizeEx:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	sinf:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
_BSS	SEGMENT
?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA DD 01H DUP (?) ; `GameOutputSound'::`2'::tSine
_BSS	ENDS
_BSS	SEGMENT
?GlobalRunning@@3HA DD 01H DUP (?)			; GlobalRunning
?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
	ALIGN	8

?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA DQ 01H DUP (?) ; GlobalSecondaryBuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z DD imagerel ?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z
	DD	imagerel ?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z+307
	DD	imagerel $unwind$?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z
$pdata$?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z DD imagerel ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z
	DD	imagerel ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z+41
	DD	imagerel $unwind$?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z
$pdata$?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z DD imagerel ?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z
	DD	imagerel ?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z+184
	DD	imagerel $unwind$?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z
$pdata$?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z DD imagerel ?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z
	DD	imagerel ?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z+414
	DD	imagerel $unwind$?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z
$pdata$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z DD imagerel ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z
	DD	imagerel ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z+249
	DD	imagerel $unwind$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z
$pdata$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z DD imagerel ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z+301
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z
$pdata$WinMain DD imagerel $LN27
	DD	imagerel $LN27+2835
	DD	imagerel $unwind$WinMain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SafeTruncateUInt64@@YAI_K@Z DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$?SafeTruncateUInt64@@YAI_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Wind32LoadXInput@@YAXXZ DD imagerel ?Wind32LoadXInput@@YAXXZ
	DD	imagerel ?Wind32LoadXInput@@YAXXZ+185
	DD	imagerel $unwind$?Wind32LoadXInput@@YAXXZ
$pdata$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
	DD	imagerel ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z+554
	DD	imagerel $unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
	DD	imagerel ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+269
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z+159
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z+433
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z DD imagerel ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z
	DD	imagerel ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z+271
	DD	imagerel $unwind$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z
$pdata$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z DD imagerel ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z
	DD	imagerel ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z+539
	DD	imagerel $unwind$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z
$pdata$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z DD imagerel ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z
	DD	imagerel ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z+120
	DD	imagerel $unwind$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z
$pdata$?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z DD imagerel ?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z
	DD	imagerel ?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z+575
	DD	imagerel $unwind$?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z
pdata	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+19
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SafeTruncateUInt64@@YAI_K@Z DD 010901H
	DD	02209H
xdata	ENDS
xdata	SEGMENT
$unwind$?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z DD 010901H
	DD	04209H
$unwind$?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z DD 011201H
	DD	0c212H
$unwind$?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z DD 031a01H
	DD	07016e21aH
	DD	06015H
$unwind$?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z DD 010d01H
	DD	0820dH
$unwind$?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$WinMain DD 042f19H
	DD	0c7011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0620H
$unwind$?Wind32LoadXInput@@YAXXZ DD 010401H
	DD	06204H
$unwind$?Win32InitDSound@@YAXPEAUHWND__@@HH@Z DD 032819H
	DD	0180116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD 011801H
	DD	0e218H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	017011aH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z DD 010901H
	DD	0e209H
$unwind$?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z DD 021a01H
	DD	011011aH
$unwind$?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z DD 011701H
	DD	02217H
$unwind$?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z DD 020c01H
	DD	011010cH
xdata	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
VKCode$1 = 48
IsDown$2 = 52
tv71 = 56
tv74 = 60
tv77 = 64
WasDown$3 = 68
Message$ = 72
KeyboardController$ = 144
?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z PROC ; Win32ProcessPendingMessage

; 475  : Win32ProcessPendingMessage(game_controller_input *KeyboardController) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN2@Win32Proce:

; 476  :     MSG Message;
; 477  :     while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  0000c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00014	45 33 c9	 xor	 r9d, r9d
  00017	45 33 c0	 xor	 r8d, r8d
  0001a	33 d2		 xor	 edx, edx
  0001c	48 8d 4c 24 48	 lea	 rcx, QWORD PTR Message$[rsp]
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00027	85 c0		 test	 eax, eax
  00029	0f 84 08 02 00
	00		 je	 $LN3@Win32Proce

; 478  :         switch(Message.message) {

  0002f	8b 44 24 50	 mov	 eax, DWORD PTR Message$[rsp+8]
  00033	89 44 24 38	 mov	 DWORD PTR tv71[rsp], eax
  00037	83 7c 24 38 12	 cmp	 DWORD PTR tv71[rsp], 18
  0003c	74 35		 je	 SHORT $LN6@Win32Proce
  0003e	81 7c 24 38 ff
	00 00 00	 cmp	 DWORD PTR tv71[rsp], 255 ; 000000ffH
  00046	0f 86 d0 01 00
	00		 jbe	 $LN33@Win32Proce
  0004c	81 7c 24 38 01
	01 00 00	 cmp	 DWORD PTR tv71[rsp], 257 ; 00000101H
  00054	76 2c		 jbe	 SHORT $LN7@Win32Proce
  00056	81 7c 24 38 03
	01 00 00	 cmp	 DWORD PTR tv71[rsp], 259 ; 00000103H
  0005e	0f 86 b8 01 00
	00		 jbe	 $LN33@Win32Proce
  00064	81 7c 24 38 05
	01 00 00	 cmp	 DWORD PTR tv71[rsp], 261 ; 00000105H
  0006c	76 14		 jbe	 SHORT $LN7@Win32Proce
  0006e	e9 a9 01 00 00	 jmp	 $LN33@Win32Proce
$LN6@Win32Proce:

; 479  :             case WM_QUIT: {
; 480  :                 GlobalRunning = false;

  00073	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0

; 481  :             } break;

  0007d	e9 b0 01 00 00	 jmp	 $LN4@Win32Proce
$LN7@Win32Proce:

; 482  :             case WM_SYSKEYDOWN:
; 483  :             case WM_SYSKEYUP:
; 484  :             case WM_KEYDOWN:
; 485  :             case WM_KEYUP: {
; 486  :                 uint32 VKCode = (uint32)Message.wParam;

  00082	8b 44 24 58	 mov	 eax, DWORD PTR Message$[rsp+16]
  00086	89 44 24 30	 mov	 DWORD PTR VKCode$1[rsp], eax

; 487  :                 bool32 WasDown = ((Message.lParam & (1 << 30)) != 0);

  0008a	48 8b 44 24 60	 mov	 rax, QWORD PTR Message$[rsp+24]
  0008f	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  00095	48 85 c0	 test	 rax, rax
  00098	74 0a		 je	 SHORT $LN35@Win32Proce
  0009a	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  000a2	eb 08		 jmp	 SHORT $LN36@Win32Proce
$LN35@Win32Proce:
  000a4	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN36@Win32Proce:
  000ac	8b 44 24 3c	 mov	 eax, DWORD PTR tv74[rsp]
  000b0	89 44 24 44	 mov	 DWORD PTR WasDown$3[rsp], eax

; 488  :                 bool32 IsDown = ((Message.lParam & (1 << 31)) == 0);

  000b4	48 8b 44 24 60	 mov	 rax, QWORD PTR Message$[rsp+24]
  000b9	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  000bf	48 85 c0	 test	 rax, rax
  000c2	75 0a		 jne	 SHORT $LN37@Win32Proce
  000c4	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  000cc	eb 08		 jmp	 SHORT $LN38@Win32Proce
$LN37@Win32Proce:
  000ce	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN38@Win32Proce:
  000d6	8b 44 24 40	 mov	 eax, DWORD PTR tv77[rsp]
  000da	89 44 24 34	 mov	 DWORD PTR IsDown$2[rsp], eax

; 489  :                 if(WasDown != IsDown) {

  000de	8b 44 24 34	 mov	 eax, DWORD PTR IsDown$2[rsp]
  000e2	39 44 24 44	 cmp	 DWORD PTR WasDown$3[rsp], eax
  000e6	0f 84 2e 01 00
	00		 je	 $LN8@Win32Proce

; 490  :                     if(VKCode == 'W') {

  000ec	83 7c 24 30 57	 cmp	 DWORD PTR VKCode$1[rsp], 87 ; 00000057H
  000f1	75 05		 jne	 SHORT $LN9@Win32Proce
  000f3	e9 01 01 00 00	 jmp	 $LN10@Win32Proce
$LN9@Win32Proce:

; 491  :                     }
; 492  :                     else if(VKCode == 'A') {

  000f8	83 7c 24 30 41	 cmp	 DWORD PTR VKCode$1[rsp], 65 ; 00000041H
  000fd	75 05		 jne	 SHORT $LN11@Win32Proce
  000ff	e9 f5 00 00 00	 jmp	 $LN12@Win32Proce
$LN11@Win32Proce:

; 493  :                     }
; 494  :                     else if(VKCode == 'S') {

  00104	83 7c 24 30 53	 cmp	 DWORD PTR VKCode$1[rsp], 83 ; 00000053H
  00109	75 05		 jne	 SHORT $LN13@Win32Proce
  0010b	e9 e9 00 00 00	 jmp	 $LN14@Win32Proce
$LN13@Win32Proce:

; 495  :                     }
; 496  :                     else if(VKCode == 'D') {

  00110	83 7c 24 30 44	 cmp	 DWORD PTR VKCode$1[rsp], 68 ; 00000044H
  00115	75 05		 jne	 SHORT $LN15@Win32Proce
  00117	e9 dd 00 00 00	 jmp	 $LN16@Win32Proce
$LN15@Win32Proce:

; 497  :                     }
; 498  :                     else if(VKCode == 'Q') {

  0011c	83 7c 24 30 51	 cmp	 DWORD PTR VKCode$1[rsp], 81 ; 00000051H
  00121	75 1d		 jne	 SHORT $LN17@Win32Proce

; 499  :                         Win32ProcessKeyboardMessage(&KeyboardController->LeftShoulder, IsDown);

  00123	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR KeyboardController$[rsp]
  0012b	48 83 c0 44	 add	 rax, 68			; 00000044H
  0012f	8b 54 24 34	 mov	 edx, DWORD PTR IsDown$2[rsp]
  00133	48 8b c8	 mov	 rcx, rax
  00136	e8 00 00 00 00	 call	 ?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z ; Win32ProcessKeyboardMessage
  0013b	e9 b9 00 00 00	 jmp	 $LN18@Win32Proce
$LN17@Win32Proce:

; 500  :                     }
; 501  :                     else if(VKCode == 'E') {

  00140	83 7c 24 30 45	 cmp	 DWORD PTR VKCode$1[rsp], 69 ; 00000045H
  00145	75 1d		 jne	 SHORT $LN19@Win32Proce

; 502  :                         Win32ProcessKeyboardMessage(&KeyboardController->RightShoulder, IsDown);

  00147	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR KeyboardController$[rsp]
  0014f	48 83 c0 4c	 add	 rax, 76			; 0000004cH
  00153	8b 54 24 34	 mov	 edx, DWORD PTR IsDown$2[rsp]
  00157	48 8b c8	 mov	 rcx, rax
  0015a	e8 00 00 00 00	 call	 ?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z ; Win32ProcessKeyboardMessage
  0015f	e9 95 00 00 00	 jmp	 $LN20@Win32Proce
$LN19@Win32Proce:

; 503  :                     }
; 504  :                     else if(VKCode == VK_UP) {

  00164	83 7c 24 30 26	 cmp	 DWORD PTR VKCode$1[rsp], 38 ; 00000026H
  00169	75 1a		 jne	 SHORT $LN21@Win32Proce

; 505  :                         Win32ProcessKeyboardMessage(&KeyboardController->Up, IsDown);

  0016b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR KeyboardController$[rsp]
  00173	48 83 c0 24	 add	 rax, 36			; 00000024H
  00177	8b 54 24 34	 mov	 edx, DWORD PTR IsDown$2[rsp]
  0017b	48 8b c8	 mov	 rcx, rax
  0017e	e8 00 00 00 00	 call	 ?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z ; Win32ProcessKeyboardMessage
  00183	eb 74		 jmp	 SHORT $LN22@Win32Proce
$LN21@Win32Proce:

; 506  :                     }
; 507  :                     else if(VKCode == VK_DOWN) {

  00185	83 7c 24 30 28	 cmp	 DWORD PTR VKCode$1[rsp], 40 ; 00000028H
  0018a	75 1a		 jne	 SHORT $LN23@Win32Proce

; 508  :                         Win32ProcessKeyboardMessage(&KeyboardController->Down, IsDown);

  0018c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR KeyboardController$[rsp]
  00194	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00198	8b 54 24 34	 mov	 edx, DWORD PTR IsDown$2[rsp]
  0019c	48 8b c8	 mov	 rcx, rax
  0019f	e8 00 00 00 00	 call	 ?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z ; Win32ProcessKeyboardMessage
  001a4	eb 53		 jmp	 SHORT $LN24@Win32Proce
$LN23@Win32Proce:

; 509  :                     }
; 510  :                     else if(VKCode == VK_LEFT) {

  001a6	83 7c 24 30 25	 cmp	 DWORD PTR VKCode$1[rsp], 37 ; 00000025H
  001ab	75 1a		 jne	 SHORT $LN25@Win32Proce

; 511  :                         Win32ProcessKeyboardMessage(&KeyboardController->Left, IsDown);

  001ad	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR KeyboardController$[rsp]
  001b5	48 83 c0 34	 add	 rax, 52			; 00000034H
  001b9	8b 54 24 34	 mov	 edx, DWORD PTR IsDown$2[rsp]
  001bd	48 8b c8	 mov	 rcx, rax
  001c0	e8 00 00 00 00	 call	 ?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z ; Win32ProcessKeyboardMessage
  001c5	eb 32		 jmp	 SHORT $LN26@Win32Proce
$LN25@Win32Proce:

; 512  :                     }
; 513  :                     else if(VKCode == VK_RIGHT) {

  001c7	83 7c 24 30 27	 cmp	 DWORD PTR VKCode$1[rsp], 39 ; 00000027H
  001cc	75 1a		 jne	 SHORT $LN27@Win32Proce

; 514  :                         Win32ProcessKeyboardMessage(&KeyboardController->Right, IsDown);

  001ce	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR KeyboardController$[rsp]
  001d6	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  001da	8b 54 24 34	 mov	 edx, DWORD PTR IsDown$2[rsp]
  001de	48 8b c8	 mov	 rcx, rax
  001e1	e8 00 00 00 00	 call	 ?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z ; Win32ProcessKeyboardMessage
  001e6	eb 11		 jmp	 SHORT $LN28@Win32Proce
$LN27@Win32Proce:

; 515  :                     }
; 516  :                     else if(VKCode == VK_ESCAPE) {

  001e8	83 7c 24 30 1b	 cmp	 DWORD PTR VKCode$1[rsp], 27
  001ed	75 0a		 jne	 SHORT $LN29@Win32Proce

; 517  :                         GlobalRunning = false;

  001ef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0
$LN29@Win32Proce:
$LN28@Win32Proce:
$LN26@Win32Proce:
$LN24@Win32Proce:
$LN22@Win32Proce:
$LN20@Win32Proce:
$LN18@Win32Proce:
$LN16@Win32Proce:
$LN14@Win32Proce:
$LN12@Win32Proce:
$LN10@Win32Proce:

; 518  :                     }
; 519  :                     else if(VKCode == VK_SPACE) {
; 520  :                     }
; 521  :                     if((Message.lParam & (1 << 29)) && VKCode == VK_F4) { //Alt+F4

  001f9	48 8b 44 24 60	 mov	 rax, QWORD PTR Message$[rsp+24]
  001fe	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00204	48 85 c0	 test	 rax, rax
  00207	74 11		 je	 SHORT $LN32@Win32Proce
  00209	83 7c 24 30 73	 cmp	 DWORD PTR VKCode$1[rsp], 115 ; 00000073H
  0020e	75 0a		 jne	 SHORT $LN32@Win32Proce

; 522  :                         GlobalRunning = false;

  00210	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0
$LN32@Win32Proce:
$LN8@Win32Proce:

; 523  :                     }
; 524  :                 }
; 525  :             } break;

  0021a	eb 16		 jmp	 SHORT $LN4@Win32Proce
$LN33@Win32Proce:

; 526  : 
; 527  :             default: {
; 528  :                 TranslateMessage(&Message);

  0021c	48 8d 4c 24 48	 lea	 rcx, QWORD PTR Message$[rsp]
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 529  :                 DispatchMessageA(&Message);

  00227	48 8d 4c 24 48	 lea	 rcx, QWORD PTR Message$[rsp]
  0022c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA
$LN4@Win32Proce:

; 530  :             }
; 531  :         }
; 532  : 
; 533  :         // TODO Should we poll this more frequently
; 534  : 
; 535  :     }

  00232	e9 d5 fd ff ff	 jmp	 $LN2@Win32Proce
$LN3@Win32Proce:

; 536  : }

  00237	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0023e	c3		 ret	 0
?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z ENDP ; Win32ProcessPendingMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
NewState$ = 8
IsDown$ = 16
?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z PROC ; Win32ProcessKeyboardMessage

; 467  : Win32ProcessKeyboardMessage(game_button_state *NewState, bool32 IsDown) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 468  :     NewState->EndedDown = IsDown;

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR NewState$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR IsDown$[rsp]
  00012	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 469  :     ++NewState->HalfTransitionCount;  

  00015	48 8b 44 24 08	 mov	 rax, QWORD PTR NewState$[rsp]
  0001a	8b 00		 mov	 eax, DWORD PTR [rax]
  0001c	ff c0		 inc	 eax
  0001e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR NewState$[rsp]
  00023	89 01		 mov	 DWORD PTR [rcx], eax

; 470  : }

  00025	c3		 ret	 0
?Win32ProcessKeyboardMessage@@YAXPEAUgame_button_state@@H@Z ENDP ; Win32ProcessKeyboardMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv67 = 0
tv72 = 4
XInputButtonState$ = 32
OldState$ = 40
NewState$ = 48
ButtonBit$ = 56
?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z PROC ; Win32ProcessXInputDigitalButton

; 459  : Win32ProcessXInputDigitalButton(DWORD XInputButtonState, game_button_state *OldState, game_button_state *NewState, DWORD ButtonBit) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 18	 sub	 rsp, 24

; 460  :     NewState->EndedDown = (XInputButtonState & ButtonBit) == ButtonBit;

  00017	8b 44 24 38	 mov	 eax, DWORD PTR ButtonBit$[rsp]
  0001b	8b 4c 24 20	 mov	 ecx, DWORD PTR XInputButtonState$[rsp]
  0001f	23 c8		 and	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	3b 44 24 38	 cmp	 eax, DWORD PTR ButtonBit$[rsp]
  00027	75 09		 jne	 SHORT $LN3@Win32Proce
  00029	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  00030	eb 07		 jmp	 SHORT $LN4@Win32Proce
$LN3@Win32Proce:
  00032	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@Win32Proce:
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR NewState$[rsp]
  0003e	8b 0c 24	 mov	 ecx, DWORD PTR tv67[rsp]
  00041	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 461  :     NewState->HalfTransitionCount = (OldState->EndedDown != NewState->EndedDown) ? 1 : 0;  

  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR OldState$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR NewState$[rsp]
  0004e	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00051	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  00054	74 0a		 je	 SHORT $LN5@Win32Proce
  00056	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN6@Win32Proce
$LN5@Win32Proce:
  00060	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN6@Win32Proce:
  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR NewState$[rsp]
  0006d	8b 4c 24 04	 mov	 ecx, DWORD PTR tv72[rsp]
  00071	89 08		 mov	 DWORD PTR [rax], ecx

; 462  : }

  00073	48 83 c4 18	 add	 rsp, 24
  00077	c3		 ret	 0
?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ENDP ; Win32ProcessXInputDigitalButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DestSample$1 = 64
SourceSample$2 = 72
SampleIndex$3 = 80
SampleIndex$4 = 84
Region2Size$ = 88
Region1Size$ = 92
Region1SampleCount$5 = 96
Region2SampleCount$6 = 100
Region2$ = 104
Region1$ = 112
SoundOutput$ = 144
ByteToLock$ = 152
BytesToWrite$ = 160
SourceBuffer$ = 168
?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z PROC ; win32FillSoundBuffer

; 422  : win32FillSoundBuffer(win32_sound_output *SoundOutput, DWORD ByteToLock, DWORD BytesToWrite, game_sound_output_buffer *SourceBuffer) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 423  :     VOID *Region1;
; 424  :     DWORD Region1Size;
; 425  :     VOID *Region2;
; 426  :     DWORD Region2Size;
; 427  :     if(SUCCEEDED(GlobalSecondaryBuffer->Lock(

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00024	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0002c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Region2Size$[rsp]
  00031	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00036	48 8d 4c 24 68	 lea	 rcx, QWORD PTR Region2$[rsp]
  0003b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00040	48 8d 4c 24 5c	 lea	 rcx, QWORD PTR Region1Size$[rsp]
  00045	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004a	4c 8d 4c 24 70	 lea	 r9, QWORD PTR Region1$[rsp]
  0004f	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR BytesToWrite$[rsp]
  00057	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR ByteToLock$[rsp]
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00065	ff 50 58	 call	 QWORD PTR [rax+88]
  00068	85 c0		 test	 eax, eax
  0006a	0f 8c a3 01 00
	00		 jl	 $LN8@win32FillS

; 428  :         ByteToLock, BytesToWrite,
; 429  :         &Region1, &Region1Size,
; 430  :         &Region2, &Region2Size,
; 431  :         0
; 432  :     ))) {
; 433  :         //TODO Assert that Region1Size/Region2Size is valid
; 434  :         //TODO Collapse these to loops
; 435  :         DWORD Region1SampleCount = Region1Size/SoundOutput->BytesPerSample;

  00070	33 d2		 xor	 edx, edx
  00072	8b 44 24 5c	 mov	 eax, DWORD PTR Region1Size$[rsp]
  00076	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  0007e	f7 71 08	 div	 DWORD PTR [rcx+8]
  00081	89 44 24 60	 mov	 DWORD PTR Region1SampleCount$5[rsp], eax

; 436  :         int16 *DestSample = (int16 *)Region1;

  00085	48 8b 44 24 70	 mov	 rax, QWORD PTR Region1$[rsp]
  0008a	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax

; 437  :         int16 *SourceSample = SourceBuffer->Samples;

  0008f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR SourceBuffer$[rsp]
  00097	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0009b	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 438  :         for(DWORD SampleIndex = 0; SampleIndex < Region1SampleCount; ++SampleIndex) {

  000a0	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR SampleIndex$4[rsp], 0
  000a8	eb 0a		 jmp	 SHORT $LN4@win32FillS
$LN2@win32FillS:
  000aa	8b 44 24 54	 mov	 eax, DWORD PTR SampleIndex$4[rsp]
  000ae	ff c0		 inc	 eax
  000b0	89 44 24 54	 mov	 DWORD PTR SampleIndex$4[rsp], eax
$LN4@win32FillS:
  000b4	8b 44 24 60	 mov	 eax, DWORD PTR Region1SampleCount$5[rsp]
  000b8	39 44 24 54	 cmp	 DWORD PTR SampleIndex$4[rsp], eax
  000bc	73 75		 jae	 SHORT $LN3@win32FillS

; 439  :             *DestSample++ = *SourceSample++;

  000be	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  000c8	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  000cb	66 89 08	 mov	 WORD PTR [rax], cx
  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000d3	48 83 c0 02	 add	 rax, 2
  000d7	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  000dc	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  000e1	48 83 c0 02	 add	 rax, 2
  000e5	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 440  :             *DestSample++ = *SourceSample++;

  000ea	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000ef	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  000f4	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  000f7	66 89 08	 mov	 WORD PTR [rax], cx
  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  000ff	48 83 c0 02	 add	 rax, 2
  00103	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  00108	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  0010d	48 83 c0 02	 add	 rax, 2
  00111	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 441  :             ++SoundOutput->RunningSampleIndex;

  00116	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR SoundOutput$[rsp]
  0011e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00121	ff c0		 inc	 eax
  00123	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  0012b	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 442  :         }

  0012e	e9 77 ff ff ff	 jmp	 $LN2@win32FillS
$LN3@win32FillS:

; 443  : 
; 444  :         DWORD Region2SampleCount = Region2Size/SoundOutput->BytesPerSample;

  00133	33 d2		 xor	 edx, edx
  00135	8b 44 24 58	 mov	 eax, DWORD PTR Region2Size$[rsp]
  00139	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  00141	f7 71 08	 div	 DWORD PTR [rcx+8]
  00144	89 44 24 64	 mov	 DWORD PTR Region2SampleCount$6[rsp], eax

; 445  :         DestSample = (int16 *)Region2;

  00148	48 8b 44 24 68	 mov	 rax, QWORD PTR Region2$[rsp]
  0014d	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax

; 446  :         for(DWORD SampleIndex = 0; SampleIndex < Region2SampleCount; ++SampleIndex) {

  00152	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR SampleIndex$3[rsp], 0
  0015a	eb 0a		 jmp	 SHORT $LN7@win32FillS
$LN5@win32FillS:
  0015c	8b 44 24 50	 mov	 eax, DWORD PTR SampleIndex$3[rsp]
  00160	ff c0		 inc	 eax
  00162	89 44 24 50	 mov	 DWORD PTR SampleIndex$3[rsp], eax
$LN7@win32FillS:
  00166	8b 44 24 64	 mov	 eax, DWORD PTR Region2SampleCount$6[rsp]
  0016a	39 44 24 50	 cmp	 DWORD PTR SampleIndex$3[rsp], eax
  0016e	73 75		 jae	 SHORT $LN6@win32FillS

; 447  :             *DestSample++ = *SourceSample++;

  00170	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  00175	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  0017a	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  0017d	66 89 08	 mov	 WORD PTR [rax], cx
  00180	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  00185	48 83 c0 02	 add	 rax, 2
  00189	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  0018e	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  00193	48 83 c0 02	 add	 rax, 2
  00197	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 448  :             *DestSample++ = *SourceSample++;

  0019c	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  001a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR SourceSample$2[rsp]
  001a6	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  001a9	66 89 08	 mov	 WORD PTR [rax], cx
  001ac	48 8b 44 24 40	 mov	 rax, QWORD PTR DestSample$1[rsp]
  001b1	48 83 c0 02	 add	 rax, 2
  001b5	48 89 44 24 40	 mov	 QWORD PTR DestSample$1[rsp], rax
  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR SourceSample$2[rsp]
  001bf	48 83 c0 02	 add	 rax, 2
  001c3	48 89 44 24 48	 mov	 QWORD PTR SourceSample$2[rsp], rax

; 449  :             ++SoundOutput->RunningSampleIndex;

  001c8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR SoundOutput$[rsp]
  001d0	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001d3	ff c0		 inc	 eax
  001d5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  001dd	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 450  :         }

  001e0	e9 77 ff ff ff	 jmp	 $LN5@win32FillS
$LN6@win32FillS:

; 451  : 
; 452  :         GlobalSecondaryBuffer->Unlock(Region1, Region1Size, Region2, Region2Size);

  001e5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001ec	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ef	8b 4c 24 58	 mov	 ecx, DWORD PTR Region2Size$[rsp]
  001f3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001f7	4c 8b 4c 24 68	 mov	 r9, QWORD PTR Region2$[rsp]
  001fc	44 8b 44 24 5c	 mov	 r8d, DWORD PTR Region1Size$[rsp]
  00201	48 8b 54 24 70	 mov	 rdx, QWORD PTR Region1$[rsp]
  00206	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  0020d	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
$LN8@win32FillS:

; 453  :     }
; 454  : }

  00213	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0021a	c3		 ret	 0
?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z ENDP ; win32FillSoundBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
ByteIndex$1 = 64
ByteIndex$2 = 68
Region2Size$ = 72
Region1Size$ = 76
DestSample$3 = 80
Region2$ = 88
Region1$ = 96
SoundOutput$ = 128
?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z PROC	; win32ClearBuffer

; 395  : win32ClearBuffer(win32_sound_output *SoundOutput) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 396  :     VOID *Region1;
; 397  :     DWORD Region1Size;
; 398  :     VOID *Region2;
; 399  :     DWORD Region2Size;
; 400  :     if(SUCCEEDED(GlobalSecondaryBuffer->Lock(

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00010	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00013	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0001b	48 8d 4c 24 48	 lea	 rcx, QWORD PTR Region2Size$[rsp]
  00020	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00025	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Region2$[rsp]
  0002a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002f	48 8d 4c 24 4c	 lea	 rcx, QWORD PTR Region1Size$[rsp]
  00034	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00039	4c 8d 4c 24 60	 lea	 r9, QWORD PTR Region1$[rsp]
  0003e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR SoundOutput$[rsp]
  00046	44 8b 41 0c	 mov	 r8d, DWORD PTR [rcx+12]
  0004a	33 d2		 xor	 edx, edx
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00053	ff 50 58	 call	 QWORD PTR [rax+88]
  00056	85 c0		 test	 eax, eax
  00058	0f 8c ac 00 00
	00		 jl	 $LN8@win32Clear

; 401  :         0, SoundOutput->SecondaryBufferSize,
; 402  :         &Region1, &Region1Size,
; 403  :         &Region2, &Region2Size,
; 404  :         0
; 405  :     ))) {
; 406  :         // TODO Assert that Region1Size/Region2Sizse is valid
; 407  :         uint8 *DestSample = (uint8 *)Region1;

  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR Region1$[rsp]
  00063	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 408  :         for(DWORD ByteIndex = 0; ByteIndex < Region1Size; ++ByteIndex) {

  00068	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR ByteIndex$1[rsp], 0
  00070	eb 0a		 jmp	 SHORT $LN4@win32Clear
$LN2@win32Clear:
  00072	8b 44 24 40	 mov	 eax, DWORD PTR ByteIndex$1[rsp]
  00076	ff c0		 inc	 eax
  00078	89 44 24 40	 mov	 DWORD PTR ByteIndex$1[rsp], eax
$LN4@win32Clear:
  0007c	8b 44 24 4c	 mov	 eax, DWORD PTR Region1Size$[rsp]
  00080	39 44 24 40	 cmp	 DWORD PTR ByteIndex$1[rsp], eax
  00084	73 17		 jae	 SHORT $LN3@win32Clear

; 409  :             *DestSample++ = 0;

  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  0008b	c6 00 00	 mov	 BYTE PTR [rax], 0
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  00093	48 ff c0	 inc	 rax
  00096	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 410  :         }

  0009b	eb d5		 jmp	 SHORT $LN2@win32Clear
$LN3@win32Clear:

; 411  : 
; 412  :         DestSample = (uint8 *)Region2;

  0009d	48 8b 44 24 58	 mov	 rax, QWORD PTR Region2$[rsp]
  000a2	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 413  :         for(DWORD ByteIndex = 0; ByteIndex < Region2Size; ++ByteIndex) {

  000a7	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ByteIndex$2[rsp], 0
  000af	eb 0a		 jmp	 SHORT $LN7@win32Clear
$LN5@win32Clear:
  000b1	8b 44 24 44	 mov	 eax, DWORD PTR ByteIndex$2[rsp]
  000b5	ff c0		 inc	 eax
  000b7	89 44 24 44	 mov	 DWORD PTR ByteIndex$2[rsp], eax
$LN7@win32Clear:
  000bb	8b 44 24 48	 mov	 eax, DWORD PTR Region2Size$[rsp]
  000bf	39 44 24 44	 cmp	 DWORD PTR ByteIndex$2[rsp], eax
  000c3	73 17		 jae	 SHORT $LN6@win32Clear

; 414  :             *DestSample++ = 0;

  000c5	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  000ca	c6 00 00	 mov	 BYTE PTR [rax], 0
  000cd	48 8b 44 24 50	 mov	 rax, QWORD PTR DestSample$3[rsp]
  000d2	48 ff c0	 inc	 rax
  000d5	48 89 44 24 50	 mov	 QWORD PTR DestSample$3[rsp], rax

; 415  :         }

  000da	eb d5		 jmp	 SHORT $LN5@win32Clear
$LN6@win32Clear:

; 416  : 
; 417  :         GlobalSecondaryBuffer->Unlock(Region1, Region1Size, Region2, Region2Size);

  000dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	8b 4c 24 48	 mov	 ecx, DWORD PTR Region2Size$[rsp]
  000ea	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ee	4c 8b 4c 24 58	 mov	 r9, QWORD PTR Region2$[rsp]
  000f3	44 8b 44 24 4c	 mov	 r8d, DWORD PTR Region1Size$[rsp]
  000f8	48 8b 54 24 60	 mov	 rdx, QWORD PTR Region1$[rsp]
  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00104	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
$LN8@win32Clear:

; 418  :     }
; 419  : }

  0010a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0010e	c3		 ret	 0
?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z ENDP	; win32ClearBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv64 = 32
Result$ = 40
Dimension$1 = 48
$T2 = 56
DeviceContext$3 = 64
Paint$4 = 80
__$ArrayPad$ = 160
Window$ = 192
Message$ = 200
WParam$ = 208
LParam$ = 216
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 347  : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 348  :     LRESULT Result = 0;

  0002c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 349  : 
; 350  :     switch(Message)

  00035	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  00045	77 25		 ja	 SHORT $LN13@Win32MainW
  00047	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  0004c	74 5f		 je	 SHORT $LN5@Win32MainW
  0004e	83 7c 24 20 02	 cmp	 DWORD PTR tv64[rsp], 2
  00053	74 79		 je	 SHORT $LN7@Win32MainW
  00055	83 7c 24 20 05	 cmp	 DWORD PTR tv64[rsp], 5
  0005a	74 4c		 je	 SHORT $LN4@Win32MainW
  0005c	83 7c 24 20 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00061	0f 84 92 00 00
	00		 je	 $LN10@Win32MainW
  00067	e9 fe 00 00 00	 jmp	 $LN11@Win32MainW
$LN13@Win32MainW:
  0006c	83 7c 24 20 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00071	74 49		 je	 SHORT $LN6@Win32MainW
  00073	81 7c 24 20 ff
	00 00 00	 cmp	 DWORD PTR tv64[rsp], 255 ; 000000ffH
  0007b	0f 86 e9 00 00
	00		 jbe	 $LN11@Win32MainW
  00081	81 7c 24 20 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  00089	76 52		 jbe	 SHORT $LN8@Win32MainW
  0008b	81 7c 24 20 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  00093	0f 86 d1 00 00
	00		 jbe	 $LN11@Win32MainW
  00099	81 7c 24 20 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  000a1	76 3a		 jbe	 SHORT $LN8@Win32MainW
  000a3	e9 c2 00 00 00	 jmp	 $LN11@Win32MainW
$LN4@Win32MainW:

; 351  :     {
; 352  :         case WM_SIZE: {
; 353  :         } break;

  000a8	e9 e7 00 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 354  : 
; 355  :         case WM_CLOSE: {
; 356  :             // TODO Handle this with a message to the user?
; 357  :             GlobalRunning = false;

  000ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0

; 358  :         } break;

  000b7	e9 d8 00 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 359  : 
; 360  :         case WM_ACTIVATEAPP: {
; 361  :             OutputDebugStringA("WM_ACTIVATEAPP\n");

  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87850
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 362  :         } break;

  000c9	e9 c6 00 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 363  : 
; 364  :         case WM_DESTROY: {
; 365  :             // TODO Handle this as an error - recreate window?
; 366  :             GlobalRunning = false;

  000ce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0

; 367  :         } break;

  000d8	e9 b7 00 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 368  : 
; 369  :         case WM_SYSKEYDOWN: 
; 370  :         case WM_SYSKEYUP:
; 371  :         case WM_KEYDOWN:
; 372  :         case WM_KEYUP: {
; 373  :             Assert(!"Keyboard input came in through a non-dispatch message!");

  000dd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG87854
  000e4	48 85 c0	 test	 rax, rax
  000e7	74 0b		 je	 SHORT $LN9@Win32MainW
  000e9	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN9@Win32MainW:

; 374  :         } break;

  000f4	e9 9b 00 00 00	 jmp	 $LN2@Win32MainW
$LN10@Win32MainW:

; 375  : 
; 376  :         case WM_PAINT: {
; 377  :             OutputDebugStringA("WM_PAINT\n");

  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87856
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 378  :             PAINTSTRUCT Paint;
; 379  :             HDC DeviceContext = BeginPaint(Window, &Paint);

  00106	48 8d 54 24 50	 lea	 rdx, QWORD PTR Paint$4[rsp]
  0010b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  00119	48 89 44 24 40	 mov	 QWORD PTR DeviceContext$3[rsp], rax

; 380  :             win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  0011e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00126	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  0012b	48 89 44 24 38	 mov	 QWORD PTR $T2[rsp], rax
  00130	48 8b 44 24 38	 mov	 rax, QWORD PTR $T2[rsp]
  00135	48 89 44 24 30	 mov	 QWORD PTR Dimension$1[rsp], rax

; 381  :             Win32DisplayBufferInWindow(&GlobalBackbuffer, DeviceContext, Dimension.Width, Dimension.Height);

  0013a	44 8b 4c 24 34	 mov	 r9d, DWORD PTR Dimension$1[rsp+4]
  0013f	44 8b 44 24 30	 mov	 r8d, DWORD PTR Dimension$1[rsp]
  00144	48 8b 54 24 40	 mov	 rdx, QWORD PTR DeviceContext$3[rsp]
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00150	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 382  :             EndPaint(Window, &Paint);

  00155	48 8d 54 24 50	 lea	 rdx, QWORD PTR Paint$4[rsp]
  0015a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 383  :         } break;

  00168	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN11@Win32MainW:

; 384  : 
; 385  :         default: {
; 386  :             Result = DefWindowProcA(Window, Message, WParam, LParam);

  0016a	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  00172	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  0017a	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00181	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  0018f	48 89 44 24 28	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 387  :         } break;
; 388  :     }
; 389  : 
; 390  :     return(Result);

  00194	48 8b 44 24 28	 mov	 rax, QWORD PTR Result$[rsp]

; 391  : } 

  00199	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a1	48 33 cc	 xor	 rcx, rsp
  001a4	e8 00 00 00 00	 call	 __security_check_cookie
  001a9	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001b0	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Buffer$ = 128
DeviceContext$ = 136
WindowWidth$ = 144
WindowHeight$ = 152
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z PROC ; Win32DisplayBufferInWindow

; 323  : ) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 324  :     // TODO aspect ration correction
; 325  :     StretchDIBits(

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  00020	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00028	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00030	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00035	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00041	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00046	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004e	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005d	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00060	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00064	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00074	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007f	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 326  :         DeviceContext,
; 327  :         0, 0, WindowWidth, WindowHeight,
; 328  :         0, 0, Buffer->Width, Buffer->Height,
; 329  :         Buffer->Memory,
; 330  :         &Buffer->Info,
; 331  :         DIB_RGB_COLORS, SRCCOPY
; 332  :     );
; 333  : }

  0009a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009e	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 288  : Win32ResizeDIBSection(win32_offscreen_buffer *Buffer, int Width, int Height) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 289  :     // TODO Bulletproof this
; 290  :     // Maybe don't free first, free after, then free first if that fails
; 291  : 
; 292  :     if(Buffer->Memory) {

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 293  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 294  :     }
; 295  : 
; 296  :     Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 297  :     Buffer->Height = Height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 298  :     Buffer->BytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 299  : 
; 300  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 301  :     Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 302  :     Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 303  :     Buffer->Info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 304  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 305  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 306  : 
; 307  :     // NOTE Thanks Chris Hecker for clarifying StretchDIBits/BitBlt
; 308  :     int BitmapMemorySize = (Buffer->Width*Buffer->Height)*Buffer->BytesPerPixel;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000bb	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000c4	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c8	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 309  :     Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000d1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d7	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000ed	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 310  : 
; 311  :     // TODO probably clear to black
; 312  : 
; 313  :     Buffer->Pitch = Width*Buffer->BytesPerPixel;

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f6	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  000fa	0f af 48 44	 imul	 ecx, DWORD PTR [rax+68]
  000fe	8b c1		 mov	 eax, ecx
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00105	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 314  : }

  00108	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010c	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 271  : internal win32_window_dimension Win32GetWindowDimension(HWND Window) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 272  :     win32_window_dimension Result;
; 273  : 
; 274  :     RECT ClientRect;
; 275  :     GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 276  :     Result.Width = ClientRect.right - ClientRect.left;

  00028	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 277  :     Result.Height = ClientRect.bottom - ClientRect.top;

  00038	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 278  : 
; 279  :     return(Result);

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 280  : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DirectSound$1 = 32
Error$2 = 40
Error$3 = 44
DirectSoundCreate$4 = 48
PrimaryBuffer$5 = 56
DSoundLibrary$ = 64
BufferDescription$6 = 72
WaveFormat$7 = 112
BufferDescription$8 = 136
__$ArrayPad$ = 176
Window$ = 208
SamplesPerSecond$ = 216
BufferSize$ = 224
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z PROC		; Win32InitDSound

; 210  : Win32InitDSound(HWND Window, int32 SamplesPerSecond, int32 BufferSize) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 211  :     HMODULE DSoundLibrary = LoadLibraryA("dsound.dll");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87800
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00035	48 89 44 24 40	 mov	 QWORD PTR DSoundLibrary$[rsp], rax

; 212  : 
; 213  :     if(DSoundLibrary) {

  0003a	48 83 7c 24 40
	00		 cmp	 QWORD PTR DSoundLibrary$[rsp], 0
  00040	0f 84 cb 01 00
	00		 je	 $LN2@Win32InitD

; 214  :         direct_sound_create *DirectSoundCreate = (direct_sound_create *)GetProcAddress(DSoundLibrary, "DirectSoundCreate");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87802
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR DSoundLibrary$[rsp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00058	48 89 44 24 30	 mov	 QWORD PTR DirectSoundCreate$4[rsp], rax

; 215  :         // TODO double-check that this works on XP -- 7 or 8?
; 216  :         LPDIRECTSOUND DirectSound;
; 217  :         if(DirectSoundCreate && SUCCEEDED(DirectSoundCreate(0, &DirectSound, 0))) {

  0005d	48 83 7c 24 30
	00		 cmp	 QWORD PTR DirectSoundCreate$4[rsp], 0
  00063	0f 84 a8 01 00
	00		 je	 $LN3@Win32InitD
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	48 8d 54 24 20	 lea	 rdx, QWORD PTR DirectSound$1[rsp]
  00071	33 c9		 xor	 ecx, ecx
  00073	ff 54 24 30	 call	 QWORD PTR DirectSoundCreate$4[rsp]
  00077	85 c0		 test	 eax, eax
  00079	0f 8c 92 01 00
	00		 jl	 $LN3@Win32InitD

; 218  :             WAVEFORMATEX WaveFormat = {};

  0007f	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  00084	48 8b f8	 mov	 rdi, rax
  00087	33 c0		 xor	 eax, eax
  00089	b9 12 00 00 00	 mov	 ecx, 18
  0008e	f3 aa		 rep stosb

; 219  :             WaveFormat.wFormatTag = WAVE_FORMAT_PCM;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	66 89 44 24 70	 mov	 WORD PTR WaveFormat$7[rsp], ax

; 220  :             WaveFormat.nChannels = 2;

  0009a	b8 02 00 00 00	 mov	 eax, 2
  0009f	66 89 44 24 72	 mov	 WORD PTR WaveFormat$7[rsp+2], ax

; 221  :             WaveFormat.nSamplesPerSec = SamplesPerSecond;

  000a4	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR SamplesPerSecond$[rsp]
  000ab	89 44 24 74	 mov	 DWORD PTR WaveFormat$7[rsp+4], eax

; 222  :             WaveFormat.wBitsPerSample = 16;

  000af	b8 10 00 00 00	 mov	 eax, 16
  000b4	66 89 44 24 7e	 mov	 WORD PTR WaveFormat$7[rsp+14], ax

; 223  :             WaveFormat.nBlockAlign = (WaveFormat.nChannels*WaveFormat.wBitsPerSample) / 8;

  000b9	0f b7 44 24 72	 movzx	 eax, WORD PTR WaveFormat$7[rsp+2]
  000be	0f b7 4c 24 7e	 movzx	 ecx, WORD PTR WaveFormat$7[rsp+14]
  000c3	0f af c1	 imul	 eax, ecx
  000c6	99		 cdq
  000c7	83 e2 07	 and	 edx, 7
  000ca	03 c2		 add	 eax, edx
  000cc	c1 f8 03	 sar	 eax, 3
  000cf	66 89 44 24 7c	 mov	 WORD PTR WaveFormat$7[rsp+12], ax

; 224  :             WaveFormat.nAvgBytesPerSec = WaveFormat.nSamplesPerSec*WaveFormat.nBlockAlign;

  000d4	0f b7 44 24 7c	 movzx	 eax, WORD PTR WaveFormat$7[rsp+12]
  000d9	8b 4c 24 74	 mov	 ecx, DWORD PTR WaveFormat$7[rsp+4]
  000dd	0f af c8	 imul	 ecx, eax
  000e0	8b c1		 mov	 eax, ecx
  000e2	89 44 24 78	 mov	 DWORD PTR WaveFormat$7[rsp+8], eax

; 225  :             WaveFormat.cbSize = 0;

  000e6	33 c0		 xor	 eax, eax
  000e8	66 89 84 24 80
	00 00 00	 mov	 WORD PTR WaveFormat$7[rsp+16], ax

; 226  : 
; 227  :             if(SUCCEEDED(DirectSound->SetCooperativeLevel(Window, DSSCL_PRIORITY))) {

  000f0	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	41 b8 02 00 00
	00		 mov	 r8d, 2
  000fe	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR Window$[rsp]
  00106	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  0010b	ff 50 30	 call	 QWORD PTR [rax+48]
  0010e	85 c0		 test	 eax, eax
  00110	0f 8c 86 00 00
	00		 jl	 $LN5@Win32InitD

; 228  :                 DSBUFFERDESC BufferDescription = {0};

  00116	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 0
  00121	48 8d 84 24 8c
	00 00 00	 lea	 rax, QWORD PTR BufferDescription$8[rsp+4]
  00129	48 8b f8	 mov	 rdi, rax
  0012c	33 c0		 xor	 eax, eax
  0012e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00133	f3 aa		 rep stosb

; 229  :                 BufferDescription.dwSize = sizeof(BufferDescription);

  00135	c7 84 24 88 00
	00 00 28 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp], 40 ; 00000028H

; 230  :                 BufferDescription.dwFlags = DSBCAPS_PRIMARYBUFFER;

  00140	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR BufferDescription$8[rsp+4], 1

; 231  :                 // TODO DSBCAPS_GLOBALFOCUS?
; 232  : 
; 233  :                 LPDIRECTSOUNDBUFFER PrimaryBuffer;
; 234  : 
; 235  :                 if (SUCCEEDED(DirectSound->CreateSoundBuffer(&BufferDescription, &PrimaryBuffer, 0))) {

  0014b	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  00150	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00153	45 33 c9	 xor	 r9d, r9d
  00156	4c 8d 44 24 38	 lea	 r8, QWORD PTR PrimaryBuffer$5[rsp]
  0015b	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR BufferDescription$8[rsp]
  00163	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  00168	ff 50 18	 call	 QWORD PTR [rax+24]
  0016b	85 c0		 test	 eax, eax
  0016d	7c 2d		 jl	 SHORT $LN7@Win32InitD

; 236  :                     HRESULT Error = PrimaryBuffer->SetFormat(&WaveFormat);

  0016f	48 8b 44 24 38	 mov	 rax, QWORD PTR PrimaryBuffer$5[rsp]
  00174	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00177	48 8d 54 24 70	 lea	 rdx, QWORD PTR WaveFormat$7[rsp]
  0017c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR PrimaryBuffer$5[rsp]
  00181	ff 50 70	 call	 QWORD PTR [rax+112]
  00184	89 44 24 2c	 mov	 DWORD PTR Error$3[rsp], eax

; 237  :                     if(SUCCEEDED(Error)) {

  00188	83 7c 24 2c 00	 cmp	 DWORD PTR Error$3[rsp], 0
  0018d	7c 0d		 jl	 SHORT $LN9@Win32InitD

; 238  :                         OutputDebugStringA("Primary buffer format was set.\n");

  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87811
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN9@Win32InitD:
$LN7@Win32InitD:
$LN5@Win32InitD:

; 239  :                     }
; 240  :                     else {
; 241  :                         // TODO Diagnostic
; 242  :                     }
; 243  :                 }
; 244  :                 else {
; 245  :                     // TODO Diagnostic
; 246  :                 }
; 247  :             }
; 248  :             else {
; 249  :                 // TODO Diagnostic
; 250  :             }
; 251  :             // TODO DSBCAPS_GETCURENTPOSITION2?
; 252  :             DSBUFFERDESC BufferDescription = {0};

  0019c	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 0
  001a4	48 8d 44 24 4c	 lea	 rax, QWORD PTR BufferDescription$6[rsp+4]
  001a9	48 8b f8	 mov	 rdi, rax
  001ac	33 c0		 xor	 eax, eax
  001ae	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001b3	f3 aa		 rep stosb

; 253  :             BufferDescription.dwSize = sizeof(BufferDescription);

  001b5	c7 44 24 48 28
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp], 40 ; 00000028H

; 254  :             BufferDescription.dwFlags = 0;

  001bd	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR BufferDescription$6[rsp+4], 0

; 255  :             BufferDescription.dwBufferBytes = BufferSize;

  001c5	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR BufferSize$[rsp]
  001cc	89 44 24 50	 mov	 DWORD PTR BufferDescription$6[rsp+8], eax

; 256  :             BufferDescription.lpwfxFormat = &WaveFormat;

  001d0	48 8d 44 24 70	 lea	 rax, QWORD PTR WaveFormat$7[rsp]
  001d5	48 89 44 24 58	 mov	 QWORD PTR BufferDescription$6[rsp+16], rax

; 257  :             HRESULT Error = DirectSound->CreateSoundBuffer(&BufferDescription, &GlobalSecondaryBuffer, 0);

  001da	48 8b 44 24 20	 mov	 rax, QWORD PTR DirectSound$1[rsp]
  001df	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e2	45 33 c9	 xor	 r9d, r9d
  001e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001ec	48 8d 54 24 48	 lea	 rdx, QWORD PTR BufferDescription$6[rsp]
  001f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR DirectSound$1[rsp]
  001f6	ff 50 18	 call	 QWORD PTR [rax+24]
  001f9	89 44 24 28	 mov	 DWORD PTR Error$2[rsp], eax

; 258  : 
; 259  :             if(SUCCEEDED(Error)) {

  001fd	83 7c 24 28 00	 cmp	 DWORD PTR Error$2[rsp], 0
  00202	7c 0d		 jl	 SHORT $LN11@Win32InitD

; 260  :                 OutputDebugStringA("Secondary buffer created successfuly\n");

  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87813
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA
$LN11@Win32InitD:
$LN3@Win32InitD:
$LN2@Win32InitD:

; 261  :             }
; 262  :         }
; 263  :         else {
; 264  :             // TODO Diagnositc
; 265  :         }
; 266  :     }
; 267  : }

  00211	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00219	48 33 cc	 xor	 rcx, rsp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00228	5f		 pop	 rdi
  00229	c3		 ret	 0
?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ENDP		; Win32InitDSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
XInputLibrary$ = 32
?Wind32LoadXInput@@YAXXZ PROC				; Wind32LoadXInput

; 182  : Wind32LoadXInput(void) {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 183  :     // TODO Test on windows 8
; 184  :     HMODULE XInputLibrary = LoadLibraryA("xinput1_4.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87769
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 185  :     if(!XInputLibrary)

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	75 12		 jne	 SHORT $LN2@Wind32Load

; 186  :     {
; 187  :         // TODO(casey): Diagnostic
; 188  :         XInputLibrary = LoadLibraryA("xinput9_1_0.dll");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87771
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0002b	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN2@Wind32Load:

; 189  :     }
; 190  :     if(!XInputLibrary) {

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00036	75 12		 jne	 SHORT $LN3@Wind32Load

; 191  :         // TODO Diagnostic
; 192  :         XInputLibrary = LoadLibraryA("xinput1_3.dll");

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG87773
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00045	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN3@Wind32Load:

; 193  :     }
; 194  :     if(XInputLibrary) {

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00050	74 62		 je	 SHORT $LN4@Wind32Load

; 195  :         XInputGetState = (x_input_get_state *)GetProcAddress(XInputLibrary, "XInputGetState" );

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87776
  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00064	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax

; 196  :         if(!XInputGetState) {XInputGetState = XInputGetStateStub;}

  0006b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, 0
  00073	75 0e		 jne	 SHORT $LN6@Wind32Load
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetStateStub
  0007c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax
$LN6@Wind32Load:

; 197  :         XInputSetState = (x_input_set_state *)GetProcAddress(XInputLibrary, "XInputSetState" );

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG87778
  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00095	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax

; 198  :         if(!XInputSetState) {XInputSetState = XInputSetStateStub;}

  0009c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, 0
  000a4	75 0e		 jne	 SHORT $LN7@Wind32Load
  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
  000ad	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax
$LN7@Wind32Load:
$LN4@Wind32Load:

; 199  : 
; 200  :         // TODO Diagnostic
; 201  :     }
; 202  :     else {
; 203  :         // TODO Diagnostic
; 204  :     }
; 205  : }

  000b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b8	c3		 ret	 0
?Wind32LoadXInput@@YAXXZ ENDP				; Wind32LoadXInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
;	COMDAT ?SafeTruncateUInt64@@YAI_K@Z
_TEXT	SEGMENT
Result$ = 0
Value$ = 32
?SafeTruncateUInt64@@YAI_K@Z PROC			; SafeTruncateUInt64, COMDAT

; 89   : SafeTruncateUInt64(uint64 Value) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 90   :     Assert(Value <= 0xFFFFFFFF);

  00009	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0000e	48 39 44 24 20	 cmp	 QWORD PTR Value$[rsp], rax
  00013	76 0b		 jbe	 SHORT $LN2@SafeTrunca
  00015	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@SafeTrunca:

; 91   :     uint32 Result = (uint32)Value;

  00020	8b 44 24 20	 mov	 eax, DWORD PTR Value$[rsp]
  00024	89 04 24	 mov	 DWORD PTR Result$[rsp], eax

; 92   :     return(Result);

  00027	8b 04 24	 mov	 eax, DWORD PTR Result$[rsp]

; 93   : }

  0002a	48 83 c4 18	 add	 rsp, 24
  0002e	c3		 ret	 0
?SafeTruncateUInt64@@YAI_K@Z ENDP			; SafeTruncateUInt64
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pVibration$ = 16
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z PROC	; XInputSetStateStub

; 77   : X_INPUT_SET_STATE(XInputSetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 78   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 79   : }

  0000e	c3		 ret	 0
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ENDP	; XInputSetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z PROC	; XInputGetStateStub

; 68   : X_INPUT_GET_STATE(XInputGetStateStub) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 69   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 70   : }

  0000e	c3		 ret	 0
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ENDP	; XInputGetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Pad$1 = 96
BytesToWrite$2 = 104
NewController$3 = 112
ByteToLock$4 = 120
TargetCursor$5 = 124
X$6 = 128
ControllerIndex$7 = 132
Y$8 = 136
OldController$9 = 144
OurControllerIndex$10 = 152
MaxControllerCount$11 = 156
PlayCursor$12 = 160
NewInput$13 = 168
SoundIsValid$14 = 176
Window$15 = 184
OldInput$16 = 192
tv295 = 200
WriteCursor$17 = 204
tv303 = 208
tv287 = 212
tv311 = 216
tv279 = 220
tv319 = 224
EndCycleCount$18 = 232
PerfCountFrequency$ = 240
CounterElapsed$19 = 248
KeyboardController$20 = 256
EndCounter$21 = 264
Dimension$22 = 272
LastCounter$23 = 280
Samples$24 = 288
LastCycleCount$25 = 296
SoundBuffer$26 = 304
GameMemory$27 = 320
BaseAddress$28 = 360
DeviceContext$29 = 368
Left$30 = 376
CyclesElapsed$31 = 384
TotalSize$32 = 392
Temp$33 = 400
$T34 = 408
Down$35 = 416
Right$36 = 420
Up$37 = 424
PerfCountFrequencyResult$ = 432
Buffer$38 = 440
FPS$39 = 464
MSPerFrame$40 = 472
MCPF$41 = 480
WindowClass$ = 496
SoundOutput$42 = 576
ControllerState$43 = 600
ZeroController$44 = 624
Input$45 = 720
__$ArrayPad$ = 1568
Instance$ = 1616
PrevInstance$ = 1624
CmdLine$ = 1632
ShowCode$ = 1640
WinMain	PROC

; 546  : ) {

$LN27:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 38 06
	00 00		 sub	 rsp, 1592		; 00000638H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 20
	06 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 547  :     LARGE_INTEGER PerfCountFrequencyResult;
; 548  :     QueryPerformanceFrequency(&PerfCountFrequencyResult);

  0002f	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 549  :     int64 PerfCountFrequency = PerfCountFrequencyResult.QuadPart;

  0003d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR PerfCountFrequencyResult$[rsp]
  00045	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR PerfCountFrequency$[rsp], rax

; 550  : 
; 551  :     Wind32LoadXInput();

  0004d	e8 00 00 00 00	 call	 ?Wind32LoadXInput@@YAXXZ ; Wind32LoadXInput

; 552  : 
; 553  :     WNDCLASSA WindowClass = {};

  00052	48 8d 84 24 f0
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	33 c0		 xor	 eax, eax
  0005f	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00064	f3 aa		 rep stosb

; 554  : 
; 555  :     Win32ResizeDIBSection(&GlobalBackbuffer, 1280, 720);

  00066	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  0006c	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00078	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 556  :     
; 557  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0007d	c7 84 24 f0 01
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 558  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  0008f	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 559  :     WindowClass.hInstance = Instance;

  00097	48 8b 84 24 50
	06 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  0009f	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 560  : //    WindowClass.hIcon;
; 561  :     WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  000a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG88031
  000ae	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 562  : 
; 563  : 
; 564  :     if (RegisterClass(&WindowClass)) {

  000b6	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000c4	0f b7 c0	 movzx	 eax, ax
  000c7	85 c0		 test	 eax, eax
  000c9	0f 84 28 0a 00
	00		 je	 $LN7@WinMain

; 565  :         HWND Window = CreateWindowExA(

  000cf	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000d8	48 8b 84 24 50
	06 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000e0	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000e5	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000ee	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000f7	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000ff	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  00107	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  0010f	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  00117	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG88034
  00124	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0012c	33 c9		 xor	 ecx, ecx
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00134	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR Window$15[rsp], rax

; 566  :             0,
; 567  :             WindowClass.lpszClassName,
; 568  :             "Handmade Hero",
; 569  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 570  :             CW_USEDEFAULT,
; 571  :             CW_USEDEFAULT,
; 572  :             CW_USEDEFAULT,
; 573  :             CW_USEDEFAULT,
; 574  :             0,
; 575  :             0,
; 576  :             Instance,
; 577  :             0
; 578  :         );
; 579  :         if(Window){

  0013c	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR Window$15[rsp], 0
  00145	0f 84 ac 09 00
	00		 je	 $LN9@WinMain

; 580  :             HDC DeviceContext = GetDC(Window);

  0014b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Window$15[rsp]
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00159	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR DeviceContext$29[rsp], rax

; 581  : 
; 582  :             // Sound Test
; 583  :             win32_sound_output SoundOutput = {};

  00161	48 8d 84 24 40
	02 00 00	 lea	 rax, QWORD PTR SoundOutput$42[rsp]
  00169	48 8b f8	 mov	 rdi, rax
  0016c	33 c0		 xor	 eax, eax
  0016e	b9 18 00 00 00	 mov	 ecx, 24
  00173	f3 aa		 rep stosb

; 584  :             SoundOutput.SamplesPerSecond = 48000;

  00175	c7 84 24 40 02
	00 00 80 bb 00
	00		 mov	 DWORD PTR SoundOutput$42[rsp], 48000 ; 0000bb80H

; 585  :             SoundOutput.RunningSampleIndex = 0;

  00180	c7 84 24 44 02
	00 00 00 00 00
	00		 mov	 DWORD PTR SoundOutput$42[rsp+4], 0

; 586  :             SoundOutput.BytesPerSample = sizeof(int16)*2;

  0018b	c7 84 24 48 02
	00 00 04 00 00
	00		 mov	 DWORD PTR SoundOutput$42[rsp+8], 4

; 587  :             SoundOutput.LatencySampleCount = SoundOutput.SamplesPerSecond / 15;

  00196	8b 84 24 40 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$42[rsp]
  0019d	99		 cdq
  0019e	b9 0f 00 00 00	 mov	 ecx, 15
  001a3	f7 f9		 idiv	 ecx
  001a5	89 84 24 54 02
	00 00		 mov	 DWORD PTR SoundOutput$42[rsp+20], eax

; 588  :             SoundOutput.SecondaryBufferSize = SoundOutput.SamplesPerSecond*SoundOutput.BytesPerSample;

  001ac	8b 84 24 40 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$42[rsp]
  001b3	0f af 84 24 48
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$42[rsp+8]
  001bb	89 84 24 4c 02
	00 00		 mov	 DWORD PTR SoundOutput$42[rsp+12], eax

; 589  :             Win32InitDSound(Window, SoundOutput.SamplesPerSecond, SoundOutput.SecondaryBufferSize);

  001c2	44 8b 84 24 4c
	02 00 00	 mov	 r8d, DWORD PTR SoundOutput$42[rsp+12]
  001ca	8b 94 24 40 02
	00 00		 mov	 edx, DWORD PTR SoundOutput$42[rsp]
  001d1	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Window$15[rsp]
  001d9	e8 00 00 00 00	 call	 ?Win32InitDSound@@YAXPEAUHWND__@@HH@Z ; Win32InitDSound

; 590  :             win32ClearBuffer(&SoundOutput);

  001de	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR SoundOutput$42[rsp]
  001e6	e8 00 00 00 00	 call	 ?win32ClearBuffer@@YAXPEAUwin32_sound_output@@@Z ; win32ClearBuffer

; 591  :             GlobalSecondaryBuffer->Play(0, 0, DSBPLAY_LOOPING);

  001eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  001f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f5	41 b9 01 00 00
	00		 mov	 r9d, 1
  001fb	45 33 c0	 xor	 r8d, r8d
  001fe	33 d2		 xor	 edx, edx
  00200	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  00207	ff 50 60	 call	 QWORD PTR [rax+96]

; 592  : 
; 593  :             GlobalRunning = true;

  0020a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 1

; 594  : 
; 595  :             // TODO Pool with bitmap VirtualAlloc
; 596  :             int16 *Samples = (int16 *)VirtualAlloc(0, SoundOutput.SecondaryBufferSize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  00214	48 63 84 24 4c
	02 00 00	 movsxd	 rax, DWORD PTR SoundOutput$42[rsp+12]
  0021c	41 b9 04 00 00
	00		 mov	 r9d, 4
  00222	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  00228	48 8b d0	 mov	 rdx, rax
  0022b	33 c9		 xor	 ecx, ecx
  0022d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00233	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR Samples$24[rsp], rax

; 597  : 
; 598  : #if HANDMADE_INTERNAL
; 599  :             LPVOID BaseAddress = 0;

  0023b	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR BaseAddress$28[rsp], 0

; 600  : #else
; 601  :             LPVOID BaseAddress = Terabytes(2);
; 602  : #endif
; 603  : 
; 604  :             game_memory GameMemory = {};

  00247	48 8d 84 24 40
	01 00 00	 lea	 rax, QWORD PTR GameMemory$27[rsp]
  0024f	48 8b f8	 mov	 rdi, rax
  00252	33 c0		 xor	 eax, eax
  00254	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00259	f3 aa		 rep stosb

; 605  :             GameMemory.PermanentStorageSize = Megabytes(64);

  0025b	48 c7 84 24 48
	01 00 00 00 00
	00 04		 mov	 QWORD PTR GameMemory$27[rsp+8], 67108864 ; 04000000H

; 606  :             GameMemory.TransientStorageSize = Gigabytes(1);

  00267	48 c7 84 24 58
	01 00 00 00 00
	00 40		 mov	 QWORD PTR GameMemory$27[rsp+24], 1073741824 ; 40000000H

; 607  :             uint64 TotalSize = GameMemory.PermanentStorageSize + GameMemory.TransientStorageSize;

  00273	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR GameMemory$27[rsp+24]
  0027b	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR GameMemory$27[rsp+8]
  00283	48 03 c8	 add	 rcx, rax
  00286	48 8b c1	 mov	 rax, rcx
  00289	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR TotalSize$32[rsp], rax

; 608  :             GameMemory.PermanentStorage = VirtualAlloc(BaseAddress, (size_t)TotalSize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  00291	41 b9 04 00 00
	00		 mov	 r9d, 4
  00297	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0029d	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR TotalSize$32[rsp]
  002a5	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR BaseAddress$28[rsp]
  002ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  002b3	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR GameMemory$27[rsp+16], rax

; 609  :             GameMemory.TransientStorage = ((uint8 *)GameMemory.PermanentStorage + GameMemory.PermanentStorageSize);

  002bb	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR GameMemory$27[rsp+8]
  002c3	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR GameMemory$27[rsp+16]
  002cb	48 03 c8	 add	 rcx, rax
  002ce	48 8b c1	 mov	 rax, rcx
  002d1	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR GameMemory$27[rsp+32], rax

; 610  :             
; 611  : 
; 612  : 
; 613  :             if(Samples && GameMemory.PermanentStorage && GameMemory.TransientStorage) {

  002d9	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR Samples$24[rsp], 0
  002e2	0f 84 0f 08 00
	00		 je	 $LN11@WinMain
  002e8	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR GameMemory$27[rsp+16], 0
  002f1	0f 84 00 08 00
	00		 je	 $LN11@WinMain
  002f7	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR GameMemory$27[rsp+32], 0
  00300	0f 84 f1 07 00
	00		 je	 $LN11@WinMain

; 614  : 
; 615  : 
; 616  :                 game_input Input[2] = {};

  00306	48 8d 84 24 d0
	02 00 00	 lea	 rax, QWORD PTR Input$45[rsp]
  0030e	48 8b f8	 mov	 rdi, rax
  00311	33 c0		 xor	 eax, eax
  00313	b9 48 03 00 00	 mov	 ecx, 840		; 00000348H
  00318	f3 aa		 rep stosb

; 617  :                 game_input *NewInput = &Input[0];

  0031a	b8 a4 01 00 00	 mov	 eax, 420		; 000001a4H
  0031f	48 6b c0 00	 imul	 rax, rax, 0
  00323	48 8d 84 04 d0
	02 00 00	 lea	 rax, QWORD PTR Input$45[rsp+rax]
  0032b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR NewInput$13[rsp], rax

; 618  :                 game_input *OldInput = &Input[1];

  00333	b8 a4 01 00 00	 mov	 eax, 420		; 000001a4H
  00338	48 6b c0 01	 imul	 rax, rax, 1
  0033c	48 8d 84 04 d0
	02 00 00	 lea	 rax, QWORD PTR Input$45[rsp+rax]
  00344	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR OldInput$16[rsp], rax

; 619  : 
; 620  :                 LARGE_INTEGER LastCounter;
; 621  :                 QueryPerformanceCounter(&LastCounter);

  0034c	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR LastCounter$23[rsp]
  00354	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 622  :                 int64 LastCycleCount = __rdtsc();

  0035a	0f 31		 rdtsc
  0035c	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00360	48 0b c2	 or	 rax, rdx
  00363	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR LastCycleCount$25[rsp], rax
$LN2@WinMain:

; 623  : 
; 624  :                 // game loop begin
; 625  :                 while (GlobalRunning) {

  0036b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?GlobalRunning@@3HA, 0
  00372	0f 84 7f 07 00
	00		 je	 $LN3@WinMain

; 626  :                     // TODO Zeroing macro
; 627  :                     // TODO We can't zero everything because the up/down state will be wrong
; 628  : 
; 629  :                     game_controller_input *KeyboardController = &NewInput->Controllers[0];

  00378	b8 54 00 00 00	 mov	 eax, 84			; 00000054H
  0037d	48 6b c0 00	 imul	 rax, rax, 0
  00381	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR NewInput$13[rsp]
  00389	48 03 c8	 add	 rcx, rax
  0038c	48 8b c1	 mov	 rax, rcx
  0038f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR KeyboardController$20[rsp], rax

; 630  :                     game_controller_input ZeroController = {};

  00397	48 8d 84 24 70
	02 00 00	 lea	 rax, QWORD PTR ZeroController$44[rsp]
  0039f	48 8b f8	 mov	 rdi, rax
  003a2	33 c0		 xor	 eax, eax
  003a4	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  003a9	f3 aa		 rep stosb

; 631  :                     *KeyboardController = ZeroController;

  003ab	48 8d 84 24 70
	02 00 00	 lea	 rax, QWORD PTR ZeroController$44[rsp]
  003b3	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR KeyboardController$20[rsp]
  003bb	48 8b f0	 mov	 rsi, rax
  003be	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  003c3	f3 a4		 rep movsb

; 632  :                     
; 633  :                     Win32ProcessPendingMessage(KeyboardController);

  003c5	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR KeyboardController$20[rsp]
  003cd	e8 00 00 00 00	 call	 ?Win32ProcessPendingMessage@@YAXPEAUgame_controller_input@@@Z ; Win32ProcessPendingMessage

; 634  : 
; 635  :                     
; 636  : 
; 637  :                     DWORD MaxControllerCount = XUSER_MAX_COUNT;

  003d2	c7 84 24 9c 00
	00 00 04 00 00
	00		 mov	 DWORD PTR MaxControllerCount$11[rsp], 4

; 638  :                     if(MaxControllerCount > ArrayCount(NewInput->Controllers)) {

  003dd	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR MaxControllerCount$11[rsp]
  003e4	48 83 f8 05	 cmp	 rax, 5
  003e8	76 0b		 jbe	 SHORT $LN13@WinMain

; 639  :                         MaxControllerCount = ArrayCount(NewInput->Controllers);

  003ea	c7 84 24 9c 00
	00 00 05 00 00
	00		 mov	 DWORD PTR MaxControllerCount$11[rsp], 5
$LN13@WinMain:

; 640  :                     }
; 641  :                     for(
; 642  :                         DWORD ControllerIndex = 0;

  003f5	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ControllerIndex$7[rsp], 0
  00400	eb 10		 jmp	 SHORT $LN6@WinMain
$LN4@WinMain:

; 644  :                         ++ControllerIndex

  00402	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR ControllerIndex$7[rsp]
  00409	ff c0		 inc	 eax
  0040b	89 84 24 84 00
	00 00		 mov	 DWORD PTR ControllerIndex$7[rsp], eax
$LN6@WinMain:

; 643  :                         ControllerIndex < XUSER_MAX_COUNT;

  00412	83 bc 24 84 00
	00 00 04	 cmp	 DWORD PTR ControllerIndex$7[rsp], 4
  0041a	0f 83 7d 03 00
	00		 jae	 $LN5@WinMain

; 645  :                     ) {
; 646  :                         int OurControllerIndex = ControllerIndex + 1;

  00420	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR ControllerIndex$7[rsp]
  00427	ff c0		 inc	 eax
  00429	89 84 24 98 00
	00 00		 mov	 DWORD PTR OurControllerIndex$10[rsp], eax

; 647  :                         game_controller_input *OldController = &OldInput->Controllers[OurControllerIndex];

  00430	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR OurControllerIndex$10[rsp]
  00438	48 6b c0 54	 imul	 rax, rax, 84		; 00000054H
  0043c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR OldInput$16[rsp]
  00444	48 03 c8	 add	 rcx, rax
  00447	48 8b c1	 mov	 rax, rcx
  0044a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR OldController$9[rsp], rax

; 648  :                         game_controller_input *NewController = &NewInput->Controllers[OurControllerIndex];

  00452	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR OurControllerIndex$10[rsp]
  0045a	48 6b c0 54	 imul	 rax, rax, 84		; 00000054H
  0045e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR NewInput$13[rsp]
  00466	48 03 c8	 add	 rcx, rax
  00469	48 8b c1	 mov	 rax, rcx
  0046c	48 89 44 24 70	 mov	 QWORD PTR NewController$3[rsp], rax

; 649  : 
; 650  : 
; 651  :                         XINPUT_STATE ControllerState;
; 652  :                         if(XInputGetState(OurControllerIndex, &ControllerState) == ERROR_SUCCESS) {

  00471	48 8d 94 24 58
	02 00 00	 lea	 rdx, QWORD PTR ControllerState$43[rsp]
  00479	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR OurControllerIndex$10[rsp]
  00480	ff 15 00 00 00
	00		 call	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA
  00486	85 c0		 test	 eax, eax
  00488	0f 85 0a 03 00
	00		 jne	 $LN14@WinMain

; 653  :                             // NOTE Controller is plugged in
; 654  :                             // TODO See if ControllerState.dwPacketNumber increments
; 655  :                             XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  0048e	48 8d 84 24 5c
	02 00 00	 lea	 rax, QWORD PTR ControllerState$43[rsp+4]
  00496	48 89 44 24 60	 mov	 QWORD PTR Pad$1[rsp], rax

; 656  : 
; 657  :                             // TODO DPad
; 658  :                             bool32 Up = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);

  0049b	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  004a0	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004a3	83 e0 01	 and	 eax, 1
  004a6	89 84 24 a8 01
	00 00		 mov	 DWORD PTR Up$37[rsp], eax

; 659  :                             bool32 Down = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);

  004ad	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  004b2	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004b5	83 e0 02	 and	 eax, 2
  004b8	89 84 24 a0 01
	00 00		 mov	 DWORD PTR Down$35[rsp], eax

; 660  :                             bool32 Left = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);

  004bf	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  004c4	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004c7	83 e0 04	 and	 eax, 4
  004ca	89 84 24 78 01
	00 00		 mov	 DWORD PTR Left$30[rsp], eax

; 661  :                             bool32 Right = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

  004d1	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  004d6	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004d9	83 e0 08	 and	 eax, 8
  004dc	89 84 24 a4 01
	00 00		 mov	 DWORD PTR Right$36[rsp], eax

; 662  : 
; 663  :                             NewController->IsAnalogue = true;

  004e3	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  004e8	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 664  :                             real32 X;
; 665  :                             if(Pad->sThumbLX < 0) {

  004ee	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  004f3	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  004f7	85 c0		 test	 eax, eax
  004f9	7d 20		 jge	 SHORT $LN16@WinMain

; 666  :                                 X = (real32)Pad->sThumbLX / 32768.0f; 

  004fb	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  00500	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00504	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00508	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47000000
  00510	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR X$6[rsp], xmm0

; 667  :                             }
; 668  :                             else {

  00519	eb 1e		 jmp	 SHORT $LN17@WinMain
$LN16@WinMain:

; 669  :                                 X = (real32)Pad->sThumbLX / 32767.0f;

  0051b	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  00520	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00524	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00528	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  00530	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR X$6[rsp], xmm0
$LN17@WinMain:

; 670  :                             }
; 671  : 
; 672  :                             real32 Y;
; 673  :                             if(Pad->sThumbLX < 0) {

  00539	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  0053e	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00542	85 c0		 test	 eax, eax
  00544	7d 20		 jge	 SHORT $LN18@WinMain

; 674  :                                 Y = (real32)Pad->sThumbLY / 32768.0f; 

  00546	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  0054b	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  0054f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00553	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47000000
  0055b	f3 0f 11 84 24
	88 00 00 00	 movss	 DWORD PTR Y$8[rsp], xmm0

; 675  :                             }
; 676  :                             else {

  00564	eb 1e		 jmp	 SHORT $LN19@WinMain
$LN18@WinMain:

; 677  :                                 Y = (real32)Pad->sThumbLY / 32767.0f;

  00566	48 8b 44 24 60	 mov	 rax, QWORD PTR Pad$1[rsp]
  0056b	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  0056f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00573	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  0057b	f3 0f 11 84 24
	88 00 00 00	 movss	 DWORD PTR Y$8[rsp], xmm0
$LN19@WinMain:

; 678  :                             }
; 679  : 
; 680  :                             NewController->StartX = OldController->EndX;

  00584	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  00589	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00591	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [rcx+28]
  00596	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 681  :                             NewController->StartY = OldController->EndY;

  0059b	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  005a0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  005a8	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [rcx+32]
  005ad	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 682  : 
; 683  :                             // TODO Deadzones XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE
; 684  :                             // TODO Min/max macros
; 685  :                             NewController->MinX = NewController->MaxX = NewController->EndX = X;

  005b2	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  005b7	f3 0f 10 84 24
	80 00 00 00	 movss	 xmm0, DWORD PTR X$6[rsp]
  005c0	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
  005c5	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  005ca	f3 0f 10 84 24
	80 00 00 00	 movss	 xmm0, DWORD PTR X$6[rsp]
  005d3	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
  005d8	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  005dd	f3 0f 10 84 24
	80 00 00 00	 movss	 xmm0, DWORD PTR X$6[rsp]
  005e6	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 686  :                             NewController->MinY = NewController->MaxY = NewController->EndY = Y;

  005eb	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  005f0	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR Y$8[rsp]
  005f9	f3 0f 11 40 20	 movss	 DWORD PTR [rax+32], xmm0
  005fe	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  00603	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR Y$8[rsp]
  0060c	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0
  00611	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  00616	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR Y$8[rsp]
  0061f	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 687  : 
; 688  : 
; 689  : 
; 690  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Down, &NewController->Down, XINPUT_GAMEPAD_A);

  00624	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  00629	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0062d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00635	48 83 c1 2c	 add	 rcx, 44			; 0000002cH
  00639	48 8b 54 24 60	 mov	 rdx, QWORD PTR Pad$1[rsp]
  0063e	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00641	89 94 24 dc 00
	00 00		 mov	 DWORD PTR tv279[rsp], edx
  00648	41 b9 00 10 00
	00		 mov	 r9d, 4096		; 00001000H
  0064e	4c 8b c0	 mov	 r8, rax
  00651	48 8b d1	 mov	 rdx, rcx
  00654	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv279[rsp]
  0065b	8b c8		 mov	 ecx, eax
  0065d	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 691  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Right, &NewController->Right, XINPUT_GAMEPAD_B);

  00662	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  00667	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  0066b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  00673	48 83 c1 3c	 add	 rcx, 60			; 0000003cH
  00677	48 8b 54 24 60	 mov	 rdx, QWORD PTR Pad$1[rsp]
  0067c	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  0067f	89 94 24 d4 00
	00 00		 mov	 DWORD PTR tv287[rsp], edx
  00686	41 b9 00 20 00
	00		 mov	 r9d, 8192		; 00002000H
  0068c	4c 8b c0	 mov	 r8, rax
  0068f	48 8b d1	 mov	 rdx, rcx
  00692	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv287[rsp]
  00699	8b c8		 mov	 ecx, eax
  0069b	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 692  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Left, &NewController->Left, XINPUT_GAMEPAD_X);

  006a0	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  006a5	48 83 c0 34	 add	 rax, 52			; 00000034H
  006a9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  006b1	48 83 c1 34	 add	 rcx, 52			; 00000034H
  006b5	48 8b 54 24 60	 mov	 rdx, QWORD PTR Pad$1[rsp]
  006ba	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  006bd	89 94 24 c8 00
	00 00		 mov	 DWORD PTR tv295[rsp], edx
  006c4	41 b9 00 40 00
	00		 mov	 r9d, 16384		; 00004000H
  006ca	4c 8b c0	 mov	 r8, rax
  006cd	48 8b d1	 mov	 rdx, rcx
  006d0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv295[rsp]
  006d7	8b c8		 mov	 ecx, eax
  006d9	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 693  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->Up, &NewController->Up, XINPUT_GAMEPAD_Y);

  006de	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  006e3	48 83 c0 24	 add	 rax, 36			; 00000024H
  006e7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  006ef	48 83 c1 24	 add	 rcx, 36			; 00000024H
  006f3	48 8b 54 24 60	 mov	 rdx, QWORD PTR Pad$1[rsp]
  006f8	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  006fb	89 94 24 d0 00
	00 00		 mov	 DWORD PTR tv303[rsp], edx
  00702	41 b9 00 80 00
	00		 mov	 r9d, 32768		; 00008000H
  00708	4c 8b c0	 mov	 r8, rax
  0070b	48 8b d1	 mov	 rdx, rcx
  0070e	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv303[rsp]
  00715	8b c8		 mov	 ecx, eax
  00717	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 694  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->LeftShoulder, &NewController->LeftShoulder, XINPUT_GAMEPAD_LEFT_SHOULDER);

  0071c	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  00721	48 83 c0 44	 add	 rax, 68			; 00000044H
  00725	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  0072d	48 83 c1 44	 add	 rcx, 68			; 00000044H
  00731	48 8b 54 24 60	 mov	 rdx, QWORD PTR Pad$1[rsp]
  00736	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00739	89 94 24 d8 00
	00 00		 mov	 DWORD PTR tv311[rsp], edx
  00740	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  00746	4c 8b c0	 mov	 r8, rax
  00749	48 8b d1	 mov	 rdx, rcx
  0074c	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv311[rsp]
  00753	8b c8		 mov	 ecx, eax
  00755	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton

; 695  :                             Win32ProcessXInputDigitalButton(Pad->wButtons, &OldController->RightShoulder, &NewController->RightShoulder, XINPUT_GAMEPAD_RIGHT_SHOULDER);

  0075a	48 8b 44 24 70	 mov	 rax, QWORD PTR NewController$3[rsp]
  0075f	48 83 c0 4c	 add	 rax, 76			; 0000004cH
  00763	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR OldController$9[rsp]
  0076b	48 83 c1 4c	 add	 rcx, 76			; 0000004cH
  0076f	48 8b 54 24 60	 mov	 rdx, QWORD PTR Pad$1[rsp]
  00774	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00777	89 94 24 e0 00
	00 00		 mov	 DWORD PTR tv319[rsp], edx
  0077e	41 b9 00 02 00
	00		 mov	 r9d, 512		; 00000200H
  00784	4c 8b c0	 mov	 r8, rax
  00787	48 8b d1	 mov	 rdx, rcx
  0078a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR tv319[rsp]
  00791	8b c8		 mov	 ecx, eax
  00793	e8 00 00 00 00	 call	 ?Win32ProcessXInputDigitalButton@@YAXKPEAUgame_button_state@@0K@Z ; Win32ProcessXInputDigitalButton
$LN14@WinMain:

; 696  :                         }
; 697  :                         else {
; 698  :                             // NOTE Controller is not available
; 699  :                         }
; 700  :                     }

  00798	e9 65 fc ff ff	 jmp	 $LN4@WinMain
$LN5@WinMain:

; 701  : 
; 702  :                     DWORD ByteToLock = 0;

  0079d	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR ByteToLock$4[rsp], 0

; 703  :                     DWORD TargetCursor = 0;

  007a5	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR TargetCursor$5[rsp], 0

; 704  :                     DWORD BytesToWrite = 0;

  007ad	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR BytesToWrite$2[rsp], 0

; 705  :                     DWORD PlayCursor = 0;

  007b5	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR PlayCursor$12[rsp], 0

; 706  :                     DWORD WriteCursor = 0;

  007c0	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR WriteCursor$17[rsp], 0

; 707  :                     bool32 SoundIsValid = false;

  007cb	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR SoundIsValid$14[rsp], 0

; 708  :                     // TODO Tighten up sound logic so that we know where we should be 
; 709  :                     // writing to and can anticipate the time spent in the game update
; 710  :                     if(SUCCEEDED(GlobalSecondaryBuffer->GetCurrentPosition(&PlayCursor, &WriteCursor))) {

  007d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  007dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007e0	4c 8d 84 24 cc
	00 00 00	 lea	 r8, QWORD PTR WriteCursor$17[rsp]
  007e8	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR PlayCursor$12[rsp]
  007f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?GlobalSecondaryBuffer@@3PEAUIDirectSoundBuffer@@EA
  007f7	ff 50 20	 call	 QWORD PTR [rax+32]
  007fa	85 c0		 test	 eax, eax
  007fc	0f 8c a3 00 00
	00		 jl	 $LN20@WinMain

; 711  :                         ByteToLock = (SoundOutput.RunningSampleIndex*SoundOutput.BytesPerSample) % SoundOutput.SecondaryBufferSize;

  00802	8b 84 24 44 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$42[rsp+4]
  00809	0f af 84 24 48
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$42[rsp+8]
  00811	33 d2		 xor	 edx, edx
  00813	f7 b4 24 4c 02
	00 00		 div	 DWORD PTR SoundOutput$42[rsp+12]
  0081a	8b c2		 mov	 eax, edx
  0081c	89 44 24 78	 mov	 DWORD PTR ByteToLock$4[rsp], eax

; 712  :                         TargetCursor = (PlayCursor + (SoundOutput.LatencySampleCount*SoundOutput.BytesPerSample)) % SoundOutput.SecondaryBufferSize;

  00820	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$42[rsp+20]
  00827	0f af 84 24 48
	02 00 00	 imul	 eax, DWORD PTR SoundOutput$42[rsp+8]
  0082f	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR PlayCursor$12[rsp]
  00836	03 c8		 add	 ecx, eax
  00838	8b c1		 mov	 eax, ecx
  0083a	33 d2		 xor	 edx, edx
  0083c	f7 b4 24 4c 02
	00 00		 div	 DWORD PTR SoundOutput$42[rsp+12]
  00843	8b c2		 mov	 eax, edx
  00845	89 44 24 7c	 mov	 DWORD PTR TargetCursor$5[rsp], eax

; 713  :                         if(ByteToLock == TargetCursor) {

  00849	8b 44 24 7c	 mov	 eax, DWORD PTR TargetCursor$5[rsp]
  0084d	39 44 24 78	 cmp	 DWORD PTR ByteToLock$4[rsp], eax
  00851	75 08		 jne	 SHORT $LN21@WinMain

; 714  :                             BytesToWrite = 0;

  00853	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR BytesToWrite$2[rsp], 0
$LN21@WinMain:

; 715  :                         }
; 716  :                         if(ByteToLock > TargetCursor) {

  0085b	8b 44 24 7c	 mov	 eax, DWORD PTR TargetCursor$5[rsp]
  0085f	39 44 24 78	 cmp	 DWORD PTR ByteToLock$4[rsp], eax
  00863	76 25		 jbe	 SHORT $LN22@WinMain

; 717  :                             BytesToWrite = (SoundOutput.SecondaryBufferSize - ByteToLock);

  00865	8b 44 24 78	 mov	 eax, DWORD PTR ByteToLock$4[rsp]
  00869	8b 8c 24 4c 02
	00 00		 mov	 ecx, DWORD PTR SoundOutput$42[rsp+12]
  00870	2b c8		 sub	 ecx, eax
  00872	8b c1		 mov	 eax, ecx
  00874	89 44 24 68	 mov	 DWORD PTR BytesToWrite$2[rsp], eax

; 718  :                             BytesToWrite += TargetCursor;

  00878	8b 44 24 7c	 mov	 eax, DWORD PTR TargetCursor$5[rsp]
  0087c	8b 4c 24 68	 mov	 ecx, DWORD PTR BytesToWrite$2[rsp]
  00880	03 c8		 add	 ecx, eax
  00882	8b c1		 mov	 eax, ecx
  00884	89 44 24 68	 mov	 DWORD PTR BytesToWrite$2[rsp], eax

; 719  :                         }
; 720  :                         else {

  00888	eb 10		 jmp	 SHORT $LN23@WinMain
$LN22@WinMain:

; 721  :                             BytesToWrite = TargetCursor - ByteToLock;

  0088a	8b 44 24 78	 mov	 eax, DWORD PTR ByteToLock$4[rsp]
  0088e	8b 4c 24 7c	 mov	 ecx, DWORD PTR TargetCursor$5[rsp]
  00892	2b c8		 sub	 ecx, eax
  00894	8b c1		 mov	 eax, ecx
  00896	89 44 24 68	 mov	 DWORD PTR BytesToWrite$2[rsp], eax
$LN23@WinMain:

; 722  :                         }
; 723  : 
; 724  :                         SoundIsValid = true;

  0089a	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR SoundIsValid$14[rsp], 1
$LN20@WinMain:

; 725  :                     }
; 726  : 
; 727  :                     
; 728  :                     game_sound_output_buffer SoundBuffer = {};

  008a5	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR SoundBuffer$26[rsp]
  008ad	48 8b f8	 mov	 rdi, rax
  008b0	33 c0		 xor	 eax, eax
  008b2	b9 10 00 00 00	 mov	 ecx, 16
  008b7	f3 aa		 rep stosb

; 729  :                     SoundBuffer.SamplesPerSecond = SoundOutput.SamplesPerSecond;

  008b9	8b 84 24 40 02
	00 00		 mov	 eax, DWORD PTR SoundOutput$42[rsp]
  008c0	89 84 24 30 01
	00 00		 mov	 DWORD PTR SoundBuffer$26[rsp], eax

; 730  :                     SoundBuffer.SampleCount = BytesToWrite / SoundOutput.BytesPerSample;

  008c7	33 d2		 xor	 edx, edx
  008c9	8b 44 24 68	 mov	 eax, DWORD PTR BytesToWrite$2[rsp]
  008cd	f7 b4 24 48 02
	00 00		 div	 DWORD PTR SoundOutput$42[rsp+8]
  008d4	89 84 24 34 01
	00 00		 mov	 DWORD PTR SoundBuffer$26[rsp+4], eax

; 731  :                     SoundBuffer.Samples = Samples;

  008db	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR Samples$24[rsp]
  008e3	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR SoundBuffer$26[rsp+8], rax

; 732  : 
; 733  :                     game_offscreen_buffer Buffer = {};

  008eb	48 8d 84 24 b8
	01 00 00	 lea	 rax, QWORD PTR Buffer$38[rsp]
  008f3	48 8b f8	 mov	 rdi, rax
  008f6	33 c0		 xor	 eax, eax
  008f8	b9 18 00 00 00	 mov	 ecx, 24
  008fd	f3 aa		 rep stosb

; 734  :                     Buffer.Memory = GlobalBackbuffer.Memory;

  008ff	48 8b 05 30 00
	00 00		 mov	 rax, QWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+48
  00906	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR Buffer$38[rsp], rax

; 735  :                     Buffer.Width = GlobalBackbuffer.Width;

  0090e	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+56
  00914	89 84 24 c0 01
	00 00		 mov	 DWORD PTR Buffer$38[rsp+8], eax

; 736  :                     Buffer.Height = GlobalBackbuffer.Height;

  0091b	8b 05 3c 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+60
  00921	89 84 24 c4 01
	00 00		 mov	 DWORD PTR Buffer$38[rsp+12], eax

; 737  :                     Buffer.Pitch = GlobalBackbuffer.Pitch;

  00928	8b 05 40 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+64
  0092e	89 84 24 c8 01
	00 00		 mov	 DWORD PTR Buffer$38[rsp+16], eax

; 738  :                     GameUpdateAndRender(&GameMemory, NewInput, &Buffer, &SoundBuffer);

  00935	4c 8d 8c 24 30
	01 00 00	 lea	 r9, QWORD PTR SoundBuffer$26[rsp]
  0093d	4c 8d 84 24 b8
	01 00 00	 lea	 r8, QWORD PTR Buffer$38[rsp]
  00945	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR NewInput$13[rsp]
  0094d	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR GameMemory$27[rsp]
  00955	e8 00 00 00 00	 call	 ?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z ; GameUpdateAndRender

; 739  : 
; 740  :                     // directsound output test
; 741  :                     if(SoundIsValid) {

  0095a	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR SoundIsValid$14[rsp], 0
  00962	74 1e		 je	 SHORT $LN24@WinMain

; 742  :                         
; 743  :                         win32FillSoundBuffer(&SoundOutput, ByteToLock, BytesToWrite, &SoundBuffer);

  00964	4c 8d 8c 24 30
	01 00 00	 lea	 r9, QWORD PTR SoundBuffer$26[rsp]
  0096c	44 8b 44 24 68	 mov	 r8d, DWORD PTR BytesToWrite$2[rsp]
  00971	8b 54 24 78	 mov	 edx, DWORD PTR ByteToLock$4[rsp]
  00975	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR SoundOutput$42[rsp]
  0097d	e8 00 00 00 00	 call	 ?win32FillSoundBuffer@@YAXPEAUwin32_sound_output@@KKPEAUgame_sound_output_buffer@@@Z ; win32FillSoundBuffer
$LN24@WinMain:

; 744  : 
; 745  :                         // TODO More strenuous test
; 746  :                     }
; 747  : 
; 748  :                     win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  00982	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Window$15[rsp]
  0098a	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  0098f	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR $T34[rsp], rax
  00997	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR $T34[rsp]
  0099f	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR Dimension$22[rsp], rax

; 749  :                     Win32DisplayBufferInWindow(

  009a7	44 8b 8c 24 14
	01 00 00	 mov	 r9d, DWORD PTR Dimension$22[rsp+4]
  009af	44 8b 84 24 10
	01 00 00	 mov	 r8d, DWORD PTR Dimension$22[rsp]
  009b7	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR DeviceContext$29[rsp]
  009bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  009c6	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 750  :                         &GlobalBackbuffer, DeviceContext,
; 751  :                         Dimension.Width, Dimension.Height
; 752  :                     );
; 753  : 
; 754  :                     int64 EndCycleCount = __rdtsc();

  009cb	0f 31		 rdtsc
  009cd	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  009d1	48 0b c2	 or	 rax, rdx
  009d4	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR EndCycleCount$18[rsp], rax

; 755  : 
; 756  :                     LARGE_INTEGER EndCounter;
; 757  :                     QueryPerformanceCounter(&EndCounter);

  009dc	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR EndCounter$21[rsp]
  009e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 758  : 
; 759  :                     uint64 CyclesElapsed = EndCycleCount - LastCycleCount;

  009ea	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR LastCycleCount$25[rsp]
  009f2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR EndCycleCount$18[rsp]
  009fa	48 2b c8	 sub	 rcx, rax
  009fd	48 8b c1	 mov	 rax, rcx
  00a00	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR CyclesElapsed$31[rsp], rax

; 760  :                     int64 CounterElapsed = EndCounter.QuadPart - LastCounter.QuadPart;

  00a08	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR LastCounter$23[rsp]
  00a10	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR EndCounter$21[rsp]
  00a18	48 2b c8	 sub	 rcx, rax
  00a1b	48 8b c1	 mov	 rax, rcx
  00a1e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR CounterElapsed$19[rsp], rax

; 761  :                     real64 MSPerFrame = (((1000.0f*(real64)CounterElapsed) / (real64)PerfCountFrequency));

  00a26	f2 48 0f 2a 84
	24 f8 00 00 00	 cvtsi2sd xmm0, QWORD PTR CounterElapsed$19[rsp]
  00a30	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00a38	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00a3c	0f 28 c1	 movaps	 xmm0, xmm1
  00a3f	f2 48 0f 2a 8c
	24 f0 00 00 00	 cvtsi2sd xmm1, QWORD PTR PerfCountFrequency$[rsp]
  00a49	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00a4d	f2 0f 11 84 24
	d8 01 00 00	 movsd	 QWORD PTR MSPerFrame$40[rsp], xmm0

; 762  :                     real64 FPS = (real64)PerfCountFrequency / (real64)CounterElapsed;

  00a56	f2 48 0f 2a 84
	24 f0 00 00 00	 cvtsi2sd xmm0, QWORD PTR PerfCountFrequency$[rsp]
  00a60	f2 48 0f 2a 8c
	24 f8 00 00 00	 cvtsi2sd xmm1, QWORD PTR CounterElapsed$19[rsp]
  00a6a	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00a6e	f2 0f 11 84 24
	d0 01 00 00	 movsd	 QWORD PTR FPS$39[rsp], xmm0

; 763  :                     real64 MCPF = ((real64)CyclesElapsed / (1000.0f * 1000.0f));

  00a77	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR CyclesElapsed$31[rsp]
  00a7f	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00a84	48 85 c0	 test	 rax, rax
  00a87	7d 08		 jge	 SHORT $LN26@WinMain
  00a89	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN26@WinMain:
  00a91	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@412e848000000000
  00a99	f2 0f 11 84 24
	e0 01 00 00	 movsd	 QWORD PTR MCPF$41[rsp], xmm0

; 764  :                     
; 765  : 
; 766  :                     // char Buffer[256];
; 767  :                     // sprintf(Buffer, "%.02fms/f,  %.02ff/s,  %.02fmc/f\n", MSPerFrame, FPS, MCPF);
; 768  :                     // OutputDebugStringA(Buffer);
; 769  : 
; 770  :                     // TODO print it
; 771  :                     LastCounter = EndCounter;

  00aa2	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR EndCounter$21[rsp]
  00aaa	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR LastCounter$23[rsp], rax

; 772  :                     LastCycleCount = EndCycleCount;

  00ab2	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR EndCycleCount$18[rsp]
  00aba	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR LastCycleCount$25[rsp], rax

; 773  : 
; 774  :                     game_input *Temp = NewInput;

  00ac2	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR NewInput$13[rsp]
  00aca	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR Temp$33[rsp], rax

; 775  :                     NewInput = OldInput;

  00ad2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR OldInput$16[rsp]
  00ada	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR NewInput$13[rsp], rax

; 776  :                     OldInput = Temp;

  00ae2	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR Temp$33[rsp]
  00aea	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR OldInput$16[rsp], rax

; 777  :                     // TODO Clear?
; 778  :                 }

  00af2	e9 74 f8 ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN11@WinMain:
$LN9@WinMain:
$LN7@WinMain:

; 779  :                 //game loop end
; 780  :             }
; 781  :             else {
; 782  :                 // TODO Logging
; 783  :             }
; 784  :         }
; 785  :         else {
; 786  :             // TODO Logging
; 787  :         }
; 788  :     }
; 789  :     else{
; 790  :         // TODO Logging
; 791  :     }
; 792  :     return(0); 

  00af7	33 c0		 xor	 eax, eax

; 793  : }

  00af9	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00b01	48 33 cc	 xor	 rcx, rsp
  00b04	e8 00 00 00 00	 call	 __security_check_cookie
  00b09	48 81 c4 38 06
	00 00		 add	 rsp, 1592		; 00000638H
  00b10	5f		 pop	 rdi
  00b11	5e		 pop	 rsi
  00b12	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
Red$1 = 0
Green$2 = 1
Blue$3 = 2
X$4 = 4
Y$5 = 8
tv76 = 12
Pixel$6 = 16
Row$ = 24
Buffer$ = 48
XOffset$ = 56
YOffset$ = 64
?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z PROC ; RenderWeirdGradient

; 26   : RenderWeirdGradient(game_offscreen_buffer *Buffer, int XOffset, int YOffset) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 27   :     // TODO lets see which is better
; 28   :     uint8 *Row = (uint8 *)Buffer->Memory;

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 29   :     for( int Y = 0 ; Y < Buffer->Height ; ++Y ) {

  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$5[rsp], 0
  00027	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  00029	8b 44 24 08	 mov	 eax, DWORD PTR Y$5[rsp]
  0002d	ff c0		 inc	 eax
  0002f	89 44 24 08	 mov	 DWORD PTR Y$5[rsp], eax
$LN4@RenderWeir:
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00038	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0003b	39 44 24 08	 cmp	 DWORD PTR Y$5[rsp], eax
  0003f	0f 8d e3 00 00
	00		 jge	 $LN3@RenderWeir

; 30   :         uint32 *Pixel = (uint32 *)Row;

  00045	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  0004a	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 31   :         for( int X = 0 ; X < Buffer->Width ; ++X ) {

  0004f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$4[rsp], 0
  00057	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  00059	8b 44 24 04	 mov	 eax, DWORD PTR X$4[rsp]
  0005d	ff c0		 inc	 eax
  0005f	89 44 24 04	 mov	 DWORD PTR X$4[rsp], eax
$LN7@RenderWeir:
  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00068	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0006b	39 44 24 04	 cmp	 DWORD PTR X$4[rsp], eax
  0006f	0f 8d 95 00 00
	00		 jge	 $LN6@RenderWeir

; 32   :             uint8 Blue = (uint8)(X - XOffset);

  00075	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  00079	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  0007d	2b c8		 sub	 ecx, eax
  0007f	8b c1		 mov	 eax, ecx
  00081	88 44 24 02	 mov	 BYTE PTR Blue$3[rsp], al

; 33   :             uint8 Green = (uint8)(Y + YOffset);

  00085	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  00089	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  0008d	03 c8		 add	 ecx, eax
  0008f	8b c1		 mov	 eax, ecx
  00091	88 44 24 01	 mov	 BYTE PTR Green$2[rsp], al

; 34   :             uint8 Red = (uint8)((X - (XOffset/4))*(Y + (YOffset/4))/8);

  00095	8b 44 24 38	 mov	 eax, DWORD PTR XOffset$[rsp]
  00099	99		 cdq
  0009a	83 e2 03	 and	 edx, 3
  0009d	03 c2		 add	 eax, edx
  0009f	c1 f8 02	 sar	 eax, 2
  000a2	8b 4c 24 04	 mov	 ecx, DWORD PTR X$4[rsp]
  000a6	2b c8		 sub	 ecx, eax
  000a8	8b c1		 mov	 eax, ecx
  000aa	89 44 24 0c	 mov	 DWORD PTR tv76[rsp], eax
  000ae	8b 44 24 40	 mov	 eax, DWORD PTR YOffset$[rsp]
  000b2	99		 cdq
  000b3	83 e2 03	 and	 edx, 3
  000b6	03 c2		 add	 eax, edx
  000b8	c1 f8 02	 sar	 eax, 2
  000bb	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$5[rsp]
  000bf	03 c8		 add	 ecx, eax
  000c1	8b c1		 mov	 eax, ecx
  000c3	8b 4c 24 0c	 mov	 ecx, DWORD PTR tv76[rsp]
  000c7	0f af c8	 imul	 ecx, eax
  000ca	8b c1		 mov	 eax, ecx
  000cc	99		 cdq
  000cd	83 e2 07	 and	 edx, 7
  000d0	03 c2		 add	 eax, edx
  000d2	c1 f8 03	 sar	 eax, 3
  000d5	88 04 24	 mov	 BYTE PTR Red$1[rsp], al

; 35   :             *Pixel++ = ((Red << 16) | (Green << 8) | Blue);

  000d8	0f b6 04 24	 movzx	 eax, BYTE PTR Red$1[rsp]
  000dc	c1 e0 10	 shl	 eax, 16
  000df	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR Green$2[rsp]
  000e4	c1 e1 08	 shl	 ecx, 8
  000e7	0b c1		 or	 eax, ecx
  000e9	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR Blue$3[rsp]
  000ee	0b c1		 or	 eax, ecx
  000f0	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Pixel$6[rsp]
  000f5	89 01		 mov	 DWORD PTR [rcx], eax
  000f7	48 8b 44 24 10	 mov	 rax, QWORD PTR Pixel$6[rsp]
  000fc	48 83 c0 04	 add	 rax, 4
  00100	48 89 44 24 10	 mov	 QWORD PTR Pixel$6[rsp], rax

; 36   :         }

  00105	e9 4f ff ff ff	 jmp	 $LN5@RenderWeir
$LN6@RenderWeir:

; 37   :         Row += Buffer->Pitch;

  0010a	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  0010f	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  00113	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  00118	48 03 c8	 add	 rcx, rax
  0011b	48 8b c1	 mov	 rax, rcx
  0011e	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 38   :     }

  00123	e9 01 ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 39   : }

  00128	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012c	c3		 ret	 0
?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z ENDP ; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
SampleValue$1 = 32
ToneVolume$ = 36
SampleIndex$2 = 40
SineValue$3 = 44
WavePeriod$ = 48
SampleOut$ = 56
SoundBuffer$ = 80
ToneHz$ = 88
?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z PROC ; GameOutputSound

; 6    : GameOutputSound(game_sound_output_buffer *SoundBuffer, int ToneHz) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7    :     local_persist real32 tSine;
; 8    :     int16 ToneVolume = 3000;

  0000d	b8 b8 0b 00 00	 mov	 eax, 3000		; 00000bb8H
  00012	66 89 44 24 24	 mov	 WORD PTR ToneVolume$[rsp], ax

; 9    :     // int ToneHz = 256;
; 10   :     int WavePeriod = SoundBuffer->SamplesPerSecond/ToneHz;

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0001c	8b 00		 mov	 eax, DWORD PTR [rax]
  0001e	99		 cdq
  0001f	f7 7c 24 58	 idiv	 DWORD PTR ToneHz$[rsp]
  00023	89 44 24 30	 mov	 DWORD PTR WavePeriod$[rsp], eax

; 11   :     
; 12   :     int16 *SampleOut = SoundBuffer->Samples; 

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0002c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00030	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 13   :     for(int SampleIndex = 0; SampleIndex < SoundBuffer->SampleCount; ++SampleIndex) {

  00035	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR SampleIndex$2[rsp], 0
  0003d	eb 0a		 jmp	 SHORT $LN4@GameOutput
$LN2@GameOutput:
  0003f	8b 44 24 28	 mov	 eax, DWORD PTR SampleIndex$2[rsp]
  00043	ff c0		 inc	 eax
  00045	89 44 24 28	 mov	 DWORD PTR SampleIndex$2[rsp], eax
$LN4@GameOutput:
  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR SoundBuffer$[rsp]
  0004e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00051	39 44 24 28	 cmp	 DWORD PTR SampleIndex$2[rsp], eax
  00055	0f 8d 99 00 00
	00		 jge	 $LN3@GameOutput

; 14   :         real32 SineValue = sinf(tSine);

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
  00063	e8 00 00 00 00	 call	 sinf
  00068	f3 0f 11 44 24
	2c		 movss	 DWORD PTR SineValue$3[rsp], xmm0

; 15   :         int16 SampleValue = (int16)(SineValue * ToneVolume);

  0006e	0f bf 44 24 24	 movsx	 eax, WORD PTR ToneVolume$[rsp]
  00073	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00077	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR SineValue$3[rsp]
  0007d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00081	0f 28 c1	 movaps	 xmm0, xmm1
  00084	f3 0f 2c c0	 cvttss2si eax, xmm0
  00088	66 89 44 24 20	 mov	 WORD PTR SampleValue$1[rsp], ax

; 16   :         *SampleOut++ = SampleValue;

  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  00092	0f b7 4c 24 20	 movzx	 ecx, WORD PTR SampleValue$1[rsp]
  00097	66 89 08	 mov	 WORD PTR [rax], cx
  0009a	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  0009f	48 83 c0 02	 add	 rax, 2
  000a3	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 17   :         *SampleOut++ = SampleValue;

  000a8	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  000ad	0f b7 4c 24 20	 movzx	 ecx, WORD PTR SampleValue$1[rsp]
  000b2	66 89 08	 mov	 WORD PTR [rax], cx
  000b5	48 8b 44 24 38	 mov	 rax, QWORD PTR SampleOut$[rsp]
  000ba	48 83 c0 02	 add	 rax, 2
  000be	48 89 44 24 38	 mov	 QWORD PTR SampleOut$[rsp], rax

; 18   : 
; 19   :         tSine += 2.0f*Pi32*1.0f/(real32)WavePeriod;

  000c3	f3 0f 2a 44 24
	30		 cvtsi2ss xmm0, DWORD PTR WavePeriod$[rsp]
  000c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  000d1	f3 0f 5e c8	 divss	 xmm1, xmm0
  000d5	0f 28 c1	 movaps	 xmm0, xmm1
  000d8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA
  000e0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000e4	0f 28 c1	 movaps	 xmm0, xmm1
  000e7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tSine@?1??GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z@4MA, xmm0

; 20   :     }

  000ef	e9 4b ff ff ff	 jmp	 $LN2@GameOutput
$LN3@GameOutput:

; 21   : }

  000f4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f8	c3		 ret	 0
?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z ENDP ; GameOutputSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\handmade.cpp
_TEXT	SEGMENT
GameState$ = 32
Input0$ = 40
Filename$1 = 48
File$2 = 56
$T3 = 72
$T4 = 88
Memory$ = 144
Input$ = 152
Buffer$ = 160
SoundBuffer$ = 168
?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z PROC ; GameUpdateAndRender

; 49   : ) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 50   :     Assert(sizeof(game_state) <= Memory->PermanentStorageSize);

  0001a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  00022	48 83 78 08 0c	 cmp	 QWORD PTR [rax+8], 12
  00027	73 0b		 jae	 SHORT $LN2@GameUpdate
  00029	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@GameUpdate:

; 51   :     game_state *GameState = (game_state *)Memory->PermanentStorage;

  00034	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  0003c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00040	48 89 44 24 20	 mov	 QWORD PTR GameState$[rsp], rax

; 52   :     if (!Memory->IsInitialized) {

  00045	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  0004d	83 38 00	 cmp	 DWORD PTR [rax], 0
  00050	0f 85 84 00 00
	00		 jne	 $LN3@GameUpdate

; 53   :         char *Filename = __FILE__;

  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG3963
  0005d	48 89 44 24 30	 mov	 QWORD PTR Filename$1[rsp], rax

; 54   : 
; 55   :         debug_read_file_result File = DEBUGPlatformReadEntireFile(Filename);

  00062	48 8b 54 24 30	 mov	 rdx, QWORD PTR Filename$1[rsp]
  00067	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T4[rsp]
  0006c	e8 00 00 00 00	 call	 ?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z ; DEBUGPlatformReadEntireFile
  00071	48 8d 4c 24 48	 lea	 rcx, QWORD PTR $T3[rsp]
  00076	48 8b f9	 mov	 rdi, rcx
  00079	48 8b f0	 mov	 rsi, rax
  0007c	b9 10 00 00 00	 mov	 ecx, 16
  00081	f3 a4		 rep movsb
  00083	48 8d 44 24 38	 lea	 rax, QWORD PTR File$2[rsp]
  00088	48 8d 4c 24 48	 lea	 rcx, QWORD PTR $T3[rsp]
  0008d	48 8b f8	 mov	 rdi, rax
  00090	48 8b f1	 mov	 rsi, rcx
  00093	b9 10 00 00 00	 mov	 ecx, 16
  00098	f3 a4		 rep movsb

; 56   :         if(File.Contents) {

  0009a	48 83 7c 24 40
	00		 cmp	 QWORD PTR File$2[rsp+8], 0
  000a0	74 1f		 je	 SHORT $LN4@GameUpdate

; 57   :             DEBUGPlatformWriteEntireFile("test.out", File.ContentsSize, File.Contents);

  000a2	4c 8b 44 24 40	 mov	 r8, QWORD PTR File$2[rsp+8]
  000a7	8b 54 24 38	 mov	 edx, DWORD PTR File$2[rsp]
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG3965
  000b2	e8 00 00 00 00	 call	 ?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z ; DEBUGPlatformWriteEntireFile

; 58   :             DEBUGPlatformFreeFileMemory(File.Contents);

  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR File$2[rsp+8]
  000bc	e8 00 00 00 00	 call	 ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z ; DEBUGPlatformFreeFileMemory
$LN4@GameUpdate:

; 59   :         }
; 60   :         GameState->ToneHz = 256;

  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  000c6	c7 00 00 01 00
	00		 mov	 DWORD PTR [rax], 256	; 00000100H

; 61   : 
; 62   :         // TODO This may be more appropriate to do in the platform layer
; 63   :         Memory->IsInitialized = true;

  000cc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Memory$[rsp]
  000d4	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
$LN3@GameUpdate:

; 64   :     }
; 65   : 
; 66   :     game_controller_input *Input0 = &Input->Controllers[0];

  000da	b8 54 00 00 00	 mov	 eax, 84			; 00000054H
  000df	48 6b c0 00	 imul	 rax, rax, 0
  000e3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Input$[rsp]
  000eb	48 03 c8	 add	 rcx, rax
  000ee	48 8b c1	 mov	 rax, rcx
  000f1	48 89 44 24 28	 mov	 QWORD PTR Input0$[rsp], rax

; 67   :     if(Input0->IsAnalogue) {

  000f6	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  000fb	83 38 00	 cmp	 DWORD PTR [rax], 0
  000fe	74 48		 je	 SHORT $LN5@GameUpdate

; 68   :         // Use analogue movement tuning
; 69   :         GameState->XOffset += (int)(4.0f*(Input0->EndX));

  00100	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  00105	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  0010d	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [rax+28]
  00112	f3 0f 2c c0	 cvttss2si eax, xmm0
  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  0011b	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  0011e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  00123	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 70   :         GameState->ToneHz = 256 + (int)(128.0f*(Input0->EndY));

  00126	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  0012b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00133	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [rax+32]
  00138	f3 0f 2c c0	 cvttss2si eax, xmm0
  0013c	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00141	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  00146	89 01		 mov	 DWORD PTR [rcx], eax
$LN5@GameUpdate:

; 71   :     }
; 72   :     else {
; 73   :         // Use digital movement tuning
; 74   :     }
; 75   : 
; 76   :     if(Input0->Down.EndedDown) {

  00148	48 8b 44 24 28	 mov	 rax, QWORD PTR Input0$[rsp]
  0014d	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00151	74 12		 je	 SHORT $LN7@GameUpdate

; 77   :         GameState->YOffset += 1;

  00153	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  00158	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0015b	ff c0		 inc	 eax
  0015d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR GameState$[rsp]
  00162	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN7@GameUpdate:

; 78   :     }
; 79   : 
; 80   : 
; 81   :     // TODO Allow sample offsets here for more robust platform
; 82   :     GameOutputSound(SoundBuffer, GameState->ToneHz);

  00165	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  0016a	8b 10		 mov	 edx, DWORD PTR [rax]
  0016c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR SoundBuffer$[rsp]
  00174	e8 00 00 00 00	 call	 ?GameOutputSound@@YAXPEAUgame_sound_output_buffer@@H@Z ; GameOutputSound

; 83   :     RenderWeirdGradient(Buffer, GameState->XOffset, GameState->YOffset);

  00179	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  0017e	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00182	48 8b 44 24 20	 mov	 rax, QWORD PTR GameState$[rsp]
  00187	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  0018a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00192	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXPEAUgame_offscreen_buffer@@HH@Z ; RenderWeirdGradient

; 84   : }

  00197	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0019b	5f		 pop	 rdi
  0019c	5e		 pop	 rsi
  0019d	c3		 ret	 0
?GameUpdateAndRender@@YAXPEAUgame_memory@@PEAUgame_input@@PEAUgame_offscreen_buffer@@PEAUgame_sound_output_buffer@@@Z ENDP ; GameUpdateAndRender
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv81 = 64
Result$ = 68
BytesWritten$1 = 72
FileHandle$ = 80
Filename$ = 112
MemorySize$ = 120
Memory$ = 128
?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z PROC	; DEBUGPlatformWriteEntireFile

; 152  : DEBUGPlatformWriteEntireFile(char *Filename, uint32 MemorySize, void *Memory) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 153  :     bool32 Result = false;

  00012	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR Result$[rsp], 0

; 154  : 
; 155  :     HANDLE FileHandle = CreateFile(Filename, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0);

  0001a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00023	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0002b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00033	45 33 c9	 xor	 r9d, r9d
  00036	45 33 c0	 xor	 r8d, r8d
  00039	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  0003e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Filename$[rsp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00049	48 89 44 24 50	 mov	 QWORD PTR FileHandle$[rsp], rax

; 156  : 
; 157  :     if (FileHandle != INVALID_HANDLE_VALUE) {

  0004e	48 83 7c 24 50
	ff		 cmp	 QWORD PTR FileHandle$[rsp], -1
  00054	74 59		 je	 SHORT $LN2@DEBUGPlatf

; 158  :         DWORD BytesWritten;
; 159  :                 
; 160  :         if(WriteFile(FileHandle, Memory, MemorySize, &BytesWritten, 0)) {

  00056	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0005f	4c 8d 4c 24 48	 lea	 r9, QWORD PTR BytesWritten$1[rsp]
  00064	44 8b 44 24 78	 mov	 r8d, DWORD PTR MemorySize$[rsp]
  00069	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR Memory$[rsp]
  00071	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  0007c	85 c0		 test	 eax, eax
  0007e	74 24		 je	 SHORT $LN4@DEBUGPlatf

; 161  :             // NOTE File read successfully
; 162  :             Result = (BytesWritten == MemorySize);

  00080	8b 44 24 78	 mov	 eax, DWORD PTR MemorySize$[rsp]
  00084	39 44 24 48	 cmp	 DWORD PTR BytesWritten$1[rsp], eax
  00088	75 0a		 jne	 SHORT $LN7@DEBUGPlatf
  0008a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  00092	eb 08		 jmp	 SHORT $LN8@DEBUGPlatf
$LN7@DEBUGPlatf:
  00094	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN8@DEBUGPlatf:
  0009c	8b 44 24 40	 mov	 eax, DWORD PTR tv81[rsp]
  000a0	89 44 24 44	 mov	 DWORD PTR Result$[rsp], eax
$LN4@DEBUGPlatf:

; 163  :         }
; 164  :         else {
; 165  :             // TODO logging
; 166  :         }
; 167  : 
; 168  :         CloseHandle(FileHandle);

  000a4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN2@DEBUGPlatf:

; 169  :     }
; 170  :     else {
; 171  :         // TODO logging
; 172  :     }
; 173  : 
; 174  :     return(Result);

  000af	8b 44 24 44	 mov	 eax, DWORD PTR Result$[rsp]

; 175  : 
; 176  : 
; 177  : }

  000b3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000b7	c3		 ret	 0
?DEBUGPlatformWriteEntireFile@@YAHPEADIPEAX@Z ENDP	; DEBUGPlatformWriteEntireFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Memory$ = 48
?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z PROC		; DEBUGPlatformFreeFileMemory

; 143  : DEBUGPlatformFreeFileMemory(void *Memory) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 144  :     if(Memory) {

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR Memory$[rsp], 0
  0000f	74 13		 je	 SHORT $LN2@DEBUGPlatf

; 145  :         VirtualFree(Memory, 0, MEM_RELEASE);

  00011	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00017	33 d2		 xor	 edx, edx
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Memory$[rsp]
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@DEBUGPlatf:

; 146  :     }
; 147  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z ENDP		; DEBUGPlatformFreeFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File p:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
FileSize32$1 = 64
BytesRead$2 = 68
FileHandle$ = 72
FileSize$3 = 80
Result$ = 88
$T4 = 144
Filename$ = 152
?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z PROC ; DEBUGPlatformReadEntireFile

; 98   : DEBUGPlatformReadEntireFile(char *Filename) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 99   :     debug_read_file_result Result = {};

  00010	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  00015	48 8b f8	 mov	 rdi, rax
  00018	33 c0		 xor	 eax, eax
  0001a	b9 10 00 00 00	 mov	 ecx, 16
  0001f	f3 aa		 rep stosb

; 100  : 
; 101  :     HANDLE FileHandle = CreateFile(Filename, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);

  00021	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0002a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00032	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  0003a	45 33 c9	 xor	 r9d, r9d
  0003d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00043	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00048	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Filename$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00056	48 89 44 24 48	 mov	 QWORD PTR FileHandle$[rsp], rax

; 102  : 
; 103  :     if (FileHandle != INVALID_HANDLE_VALUE) {

  0005b	48 83 7c 24 48
	ff		 cmp	 QWORD PTR FileHandle$[rsp], -1
  00061	0f 84 a6 00 00
	00		 je	 $LN2@DEBUGPlatf

; 104  :         LARGE_INTEGER FileSize;
; 105  : 
; 106  :         if(GetFileSizeEx(FileHandle, &FileSize)) {

  00067	48 8d 54 24 50	 lea	 rdx, QWORD PTR FileSize$3[rsp]
  0006c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  00077	85 c0		 test	 eax, eax
  00079	0f 84 83 00 00
	00		 je	 $LN4@DEBUGPlatf

; 107  :             // TODO Defines for maximum values
; 108  :             uint32 FileSize32 = SafeTruncateUInt64(FileSize.QuadPart);

  0007f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileSize$3[rsp]
  00084	e8 00 00 00 00	 call	 ?SafeTruncateUInt64@@YAI_K@Z ; SafeTruncateUInt64
  00089	89 44 24 40	 mov	 DWORD PTR FileSize32$1[rsp], eax

; 109  :             Result.Contents = VirtualAlloc(0, FileSize32, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  0008d	8b 44 24 40	 mov	 eax, DWORD PTR FileSize32$1[rsp]
  00091	41 b9 04 00 00
	00		 mov	 r9d, 4
  00097	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0009d	8b d0		 mov	 edx, eax
  0009f	33 c9		 xor	 ecx, ecx
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000a7	48 89 44 24 60	 mov	 QWORD PTR Result$[rsp+8], rax

; 110  : 
; 111  :             if(Result.Contents) {

  000ac	48 83 7c 24 60
	00		 cmp	 QWORD PTR Result$[rsp+8], 0
  000b2	74 4e		 je	 SHORT $LN6@DEBUGPlatf

; 112  :                 DWORD BytesRead;
; 113  :                 
; 114  :                 if(ReadFile(FileHandle, Result.Contents, FileSize32, &BytesRead, 0) && (FileSize32 == BytesRead)) {

  000b4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000bd	4c 8d 4c 24 44	 lea	 r9, QWORD PTR BytesRead$2[rsp]
  000c2	44 8b 44 24 40	 mov	 r8d, DWORD PTR FileSize32$1[rsp]
  000c7	48 8b 54 24 60	 mov	 rdx, QWORD PTR Result$[rsp+8]
  000cc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  000d7	85 c0		 test	 eax, eax
  000d9	74 14		 je	 SHORT $LN8@DEBUGPlatf
  000db	8b 44 24 44	 mov	 eax, DWORD PTR BytesRead$2[rsp]
  000df	39 44 24 40	 cmp	 DWORD PTR FileSize32$1[rsp], eax
  000e3	75 0a		 jne	 SHORT $LN8@DEBUGPlatf

; 115  :                     // NOTE File read successfully
; 116  :                     Result.ContentsSize = FileSize32;

  000e5	8b 44 24 40	 mov	 eax, DWORD PTR FileSize32$1[rsp]
  000e9	89 44 24 58	 mov	 DWORD PTR Result$[rsp], eax

; 117  :                 }
; 118  :                 else {

  000ed	eb 13		 jmp	 SHORT $LN9@DEBUGPlatf
$LN8@DEBUGPlatf:

; 119  :                     DEBUGPlatformFreeFileMemory(Result.Contents);

  000ef	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Result$[rsp+8]
  000f4	e8 00 00 00 00	 call	 ?DEBUGPlatformFreeFileMemory@@YAXPEAX@Z ; DEBUGPlatformFreeFileMemory

; 120  :                     Result.Contents = 0;

  000f9	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR Result$[rsp+8], 0
$LN9@DEBUGPlatf:
$LN6@DEBUGPlatf:
$LN4@DEBUGPlatf:

; 121  :                 }
; 122  :             }
; 123  :             else {
; 124  :                 // TODO logging
; 125  :             }
; 126  :         }
; 127  :         else {
; 128  :             // TODO logging
; 129  :         }
; 130  : 
; 131  :         CloseHandle(FileHandle);

  00102	48 8b 4c 24 48	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN2@DEBUGPlatf:

; 132  :     }
; 133  :     else {
; 134  :         // TODO logging
; 135  :     }
; 136  : 
; 137  :     return(Result);

  0010d	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  00112	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  0011a	48 8b f0	 mov	 rsi, rax
  0011d	b9 10 00 00 00	 mov	 ecx, 16
  00122	f3 a4		 rep movsb
  00124	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 138  : }

  0012c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00130	5f		 pop	 rdi
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
?DEBUGPlatformReadEntireFile@@YA?AUdebug_read_file_result@@PEAD@Z ENDP ; DEBUGPlatformReadEntireFile
_TEXT	ENDS
END
